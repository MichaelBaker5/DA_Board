
Infineon_DA_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b8c  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10003b8c  10003b8c  00003b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       000000ac  10003b9c  10003b9c  00003b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000138  2000000c  10003c50  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   0000000c  20000144  00000000  00000144  2**0
                  ALLOC
  5 Stack         00000800  20000150  00000000  00000150  2**0
                  ALLOC
  6 .bss          00000010  20000950  20000950  00010950  2**2
                  ALLOC
  7 .data         00000030  20000960  10003d88  00008960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000348  00000000  00000000  00008990  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004a5c  00000000  00000000  00008cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d50  00000000  00000000  0000d734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006371  00000000  00000000  0000e484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000830  00000000  00000000  000147f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003a910  00000000  00000000  00015028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000980  00000000  00000000  0004f938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f0  00000000  00000000  000502b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000592  00000000  00000000  000504a8  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000b876  00000000  00000000  00050a3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1300_interrupt_vector_cortex_m>:
10001000:	50 09 00 20 19 10 00 10 c1 10 00 10 c3 10 00 10     P.. ............
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1300_reset_cortex_m>:
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1300_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0

    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1300_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader */
    B       __Xmc1300_Program_Loader 
10001020:	e004      	b.n	1000102c <__Xmc1300_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001024:	20000950 	.word	0x20000950
    MOV SP,R0

    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010bd 	.word	0x100010bd

1000102c <__Xmc1300_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
1000102c:	4816      	ldr	r0, [pc, #88]	; (10001088 <SKIPVENEERCOPY+0x16>)
   LDR R1, =__Xmc1300_sData
1000102e:	4917      	ldr	r1, [pc, #92]	; (1000108c <SKIPVENEERCOPY+0x1a>)
   LDR R2, =__Xmc1300_Data_Size
10001030:	4a17      	ldr	r2, [pc, #92]	; (10001090 <SKIPVENEERCOPY+0x1e>)

   /* Is there anything to be copied? */
   CMP R2,#0
10001032:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
10001034:	d007      	beq.n	10001046 <SKIPCOPY>

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001046:	4813      	ldr	r0, [pc, #76]	; (10001094 <SKIPVENEERCOPY+0x22>)
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001048:	4913      	ldr	r1, [pc, #76]	; (10001098 <SKIPVENEERCOPY+0x26>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000104a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000104c:	d006      	beq.n	1000105c <SKIPCLEAR>

1000104e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000104e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001050:	2200      	movs	r2, #0

10001052 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001052:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001054:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001056:	d001      	beq.n	1000105c <SKIPCLEAR>
   ADDS R0,#4
10001058:	3004      	adds	r0, #4
   B CLEARLOOP
1000105a:	e7fa      	b.n	10001052 <CLEARLOOP>

1000105c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	480f      	ldr	r0, [pc, #60]	; (1000109c <SKIPVENEERCOPY+0x2a>)
   LDR R1, =VeneerStart
1000105e:	4910      	ldr	r1, [pc, #64]	; (100010a0 <SKIPVENEERCOPY+0x2e>)
   LDR R2, =VeneerSize
10001060:	4a10      	ldr	r2, [pc, #64]	; (100010a4 <SKIPVENEERCOPY+0x32>)

10001062 <STARTVENEERCOPY>:
STARTVENEERCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001062:	0892      	lsrs	r2, r2, #2

10001064 <VENEERCOPYLOOP>:

   /* The proverbial loop from the schooldays */
VENEERCOPYLOOP:
   LDR R3,[R0]
10001064:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
10001066:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
10001068:	3a01      	subs	r2, #1
   BEQ SKIPVENEERCOPY
1000106a:	d002      	beq.n	10001072 <SKIPVENEERCOPY>
   ADDS R0,#4
1000106c:	3004      	adds	r0, #4
   ADDS R1,#4
1000106e:	3104      	adds	r1, #4
   B VENEERCOPYLOOP
10001070:	e7f8      	b.n	10001064 <VENEERCOPYLOOP>

10001072 <SKIPVENEERCOPY>:
    
SKIPVENEERCOPY:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
10001072:	480d      	ldr	r0, [pc, #52]	; (100010a8 <SKIPVENEERCOPY+0x36>)
   MOV SP,R0
10001074:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001076:	480d      	ldr	r0, [pc, #52]	; (100010ac <SKIPVENEERCOPY+0x3a>)
   BLX R0
10001078:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
1000107a:	480d      	ldr	r0, [pc, #52]	; (100010b0 <SKIPVENEERCOPY+0x3e>)
   BLX R0
1000107c:	4780      	blx	r0

   MOVS R0,#0
1000107e:	2000      	movs	r0, #0
   MOVS R1,#0
10001080:	2100      	movs	r1, #0
   LDR R2, =main
10001082:	4a0c      	ldr	r2, [pc, #48]	; (100010b4 <SKIPVENEERCOPY+0x42>)
   MOV PC,R2
10001084:	4697      	mov	pc, r2
10001086:	0000      	.short	0x0000
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001088:	10003d88 	.word	0x10003d88
   LDR R1, =__Xmc1300_sData
1000108c:	20000960 	.word	0x20000960
   LDR R2, =__Xmc1300_Data_Size
10001090:	00000030 	.word	0x00000030
   ADDS R1,#4
   B COPYLOOP
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001094:	20000950 	.word	0x20000950
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001098:	00000010 	.word	0x00000010
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000109c:	10003c50 	.word	0x10003c50
   LDR R1, =VeneerStart
100010a0:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010a4:	00000138 	.word	0x00000138
   B VENEERCOPYLOOP
    
SKIPVENEERCOPY:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
100010a8:	20000950 	.word	0x20000950
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010ac:	10001105 	.word	0x10001105
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010b0:	100010b9 	.word	0x100010b9
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010b4:	1000116d 	.word	0x1000116d

100010b8 <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010b8:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ba:	4770      	bx	lr

100010bc <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010bc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010be:	4770      	bx	lr

100010c0 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
100010c0:	e7fe      	b.n	100010c0 <NMI_Handler>

100010c2 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
100010c2:	e7fe      	b.n	100010c2 <HardFault_Handler>

100010c4 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
100010c4:	e7fe      	b.n	100010c4 <SVC_Handler>

100010c6 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
100010c6:	e7fe      	b.n	100010c6 <PendSV_Handler>

100010c8 <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
100010c8:	e7fe      	b.n	100010c8 <SysTick_Handler>

100010ca <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
100010ca:	e7fe      	b.n	100010ca <SCU_0_IRQHandler>

100010cc <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100010cc:	e7fe      	b.n	100010cc <SCU_1_IRQHandler>

100010ce <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100010ce:	e7fe      	b.n	100010ce <SCU_2_IRQHandler>

100010d0 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
100010d0:	e7fe      	b.n	100010d0 <ERU0_0_IRQHandler>

100010d2 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
100010d2:	e7fe      	b.n	100010d2 <ERU0_1_IRQHandler>

100010d4 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
100010d4:	e7fe      	b.n	100010d4 <ERU0_2_IRQHandler>

100010d6 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
100010d6:	e7fe      	b.n	100010d6 <ERU0_3_IRQHandler>

100010d8 <MATH0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler MATH0_0_IRQHandler
100010d8:	e7fe      	b.n	100010d8 <MATH0_0_IRQHandler>

100010da <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
100010da:	e7fe      	b.n	100010da <VADC0_C0_0_IRQHandler>

100010dc <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
100010dc:	e7fe      	b.n	100010dc <VADC0_C0_1_IRQHandler>

100010de <VADC0_G0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
100010de:	e7fe      	b.n	100010de <VADC0_G0_0_IRQHandler>

100010e0 <VADC0_G0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
100010e0:	e7fe      	b.n	100010e0 <VADC0_G0_1_IRQHandler>

100010e2 <VADC0_G1_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
100010e2:	e7fe      	b.n	100010e2 <VADC0_G1_0_IRQHandler>

100010e4 <VADC0_G1_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
100010e4:	e7fe      	b.n	100010e4 <VADC0_G1_1_IRQHandler>

100010e6 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
100010e6:	e7fe      	b.n	100010e6 <CCU40_0_IRQHandler>

100010e8 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
100010e8:	e7fe      	b.n	100010e8 <CCU40_1_IRQHandler>

100010ea <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
100010ea:	e7fe      	b.n	100010ea <CCU40_2_IRQHandler>

100010ec <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
100010ec:	e7fe      	b.n	100010ec <CCU40_3_IRQHandler>

100010ee <CCU80_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_0_IRQHandler
100010ee:	e7fe      	b.n	100010ee <CCU80_0_IRQHandler>

100010f0 <CCU80_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_1_IRQHandler
100010f0:	e7fe      	b.n	100010f0 <CCU80_1_IRQHandler>

100010f2 <POSIF0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_0_IRQHandler
100010f2:	e7fe      	b.n	100010f2 <POSIF0_0_IRQHandler>

100010f4 <POSIF0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_1_IRQHandler
100010f4:	e7fe      	b.n	100010f4 <POSIF0_1_IRQHandler>

100010f6 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100010f6:	e7fe      	b.n	100010f6 <USIC0_0_IRQHandler>

100010f8 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100010f8:	e7fe      	b.n	100010f8 <USIC0_1_IRQHandler>

100010fa <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100010fa:	e7fe      	b.n	100010fa <USIC0_2_IRQHandler>

100010fc <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100010fc:	e7fe      	b.n	100010fc <USIC0_3_IRQHandler>

100010fe <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
100010fe:	e7fe      	b.n	100010fe <USIC0_4_IRQHandler>

10001100 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
10001100:	e7fe      	b.n	10001100 <USIC0_5_IRQHandler>

10001102 <BCCU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler BCCU0_0_IRQHandler
10001102:	e7fe      	b.n	10001102 <BCCU0_0_IRQHandler>

10001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
10001104:	b580      	push	{r7, lr}
10001106:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
10001108:	f000 f802 	bl	10001110 <SystemCoreClockUpdate>
}
1000110c:	46bd      	mov	sp, r7
1000110e:	bd80      	pop	{r7, pc}

10001110 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10001110:	b580      	push	{r7, lr}
10001112:	b082      	sub	sp, #8
10001114:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001116:	4b11      	ldr	r3, [pc, #68]	; (1000115c <SystemCoreClockUpdate+0x4c>)
10001118:	681a      	ldr	r2, [r3, #0]
1000111a:	23ff      	movs	r3, #255	; 0xff
1000111c:	021b      	lsls	r3, r3, #8
1000111e:	4013      	ands	r3, r2
10001120:	0a1b      	lsrs	r3, r3, #8
10001122:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001124:	4b0d      	ldr	r3, [pc, #52]	; (1000115c <SystemCoreClockUpdate+0x4c>)
10001126:	681a      	ldr	r2, [r3, #0]
10001128:	23ff      	movs	r3, #255	; 0xff
1000112a:	4013      	ands	r3, r2
1000112c:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
1000112e:	687b      	ldr	r3, [r7, #4]
10001130:	2b00      	cmp	r3, #0
10001132:	d00c      	beq.n	1000114e <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
10001134:	687b      	ldr	r3, [r7, #4]
10001136:	021a      	lsls	r2, r3, #8
10001138:	683b      	ldr	r3, [r7, #0]
1000113a:	18d3      	adds	r3, r2, r3
1000113c:	4808      	ldr	r0, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0x50>)
1000113e:	1c19      	adds	r1, r3, #0
10001140:	f001 fd1e 	bl	10002b80 <__aeabi_uidiv>
10001144:	1c03      	adds	r3, r0, #0
10001146:	005a      	lsls	r2, r3, #1
10001148:	4b06      	ldr	r3, [pc, #24]	; (10001164 <SystemCoreClockUpdate+0x54>)
1000114a:	601a      	str	r2, [r3, #0]
1000114c:	e002      	b.n	10001154 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
1000114e:	4b05      	ldr	r3, [pc, #20]	; (10001164 <SystemCoreClockUpdate+0x54>)
10001150:	4a05      	ldr	r2, [pc, #20]	; (10001168 <SystemCoreClockUpdate+0x58>)
10001152:	601a      	str	r2, [r3, #0]
  }
}
10001154:	46bd      	mov	sp, r7
10001156:	b002      	add	sp, #8
10001158:	bd80      	pop	{r7, pc}
1000115a:	46c0      	nop			; (mov r8, r8)
1000115c:	40010300 	.word	0x40010300
10001160:	f4240000 	.word	0xf4240000
10001164:	2000095c 	.word	0x2000095c
10001168:	01e84800 	.word	0x01e84800

1000116c <main>:
  const uint16_t* DataPtr,
  SPI001_TransmitMode TrMode
);*/

int main(void)
{
1000116c:	b580      	push	{r7, lr}
1000116e:	af00      	add	r7, sp, #0
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)


	DAVE_Init();			// Initialization of DAVE Apps
10001170:	f001 fad6 	bl	10002720 <DAVE_Init>
	    // Clear the flags before writing data
	//	SPI001_ClearFlag(&SPI001_Handle0, SPI001_RECV_IND_FLAG);
	    /*
		 * SPI001_ClearFlag(&SPI001_Handle0, SPI001_ALT_RECV_IND_FLAG);
	     */
		SPI001_WriteData(&SPI001_Handle0, &SendData, SPI001_STANDARD); // 1
10001174:	4a03      	ldr	r2, [pc, #12]	; (10001184 <main+0x18>)
10001176:	4b04      	ldr	r3, [pc, #16]	; (10001188 <main+0x1c>)
10001178:	1c10      	adds	r0, r2, #0
1000117a:	1c19      	adds	r1, r3, #0
1000117c:	2200      	movs	r2, #0
1000117e:	f001 f83b 	bl	100021f8 <SPI001_WriteData>

	}
10001182:	e7f7      	b.n	10001174 <main+0x8>
10001184:	10003ba0 	.word	0x10003ba0
10001188:	20000960 	.word	0x20000960

1000118c <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
1000118c:	b580      	push	{r7, lr}
1000118e:	b084      	sub	sp, #16
10001190:	af00      	add	r7, sp, #0
10001192:	60f8      	str	r0, [r7, #12]
10001194:	60b9      	str	r1, [r7, #8]
10001196:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
10001198:	2301      	movs	r3, #1
1000119a:	425b      	negs	r3, r3
}
1000119c:	1c18      	adds	r0, r3, #0
1000119e:	46bd      	mov	sp, r7
100011a0:	b004      	add	sp, #16
100011a2:	bd80      	pop	{r7, pc}

100011a4 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
100011a4:	b580      	push	{r7, lr}
100011a6:	b084      	sub	sp, #16
100011a8:	af00      	add	r7, sp, #0
100011aa:	60f8      	str	r0, [r7, #12]
100011ac:	60b9      	str	r1, [r7, #8]
100011ae:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
100011b0:	2301      	movs	r3, #1
100011b2:	425b      	negs	r3, r3
}
100011b4:	1c18      	adds	r0, r3, #0
100011b6:	46bd      	mov	sp, r7
100011b8:	b004      	add	sp, #16
100011ba:	bd80      	pop	{r7, pc}

100011bc <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100011bc:	b580      	push	{r7, lr}
100011be:	b084      	sub	sp, #16
100011c0:	af00      	add	r7, sp, #0
100011c2:	60f8      	str	r0, [r7, #12]
100011c4:	60b9      	str	r1, [r7, #8]
100011c6:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
100011c8:	2300      	movs	r3, #0
}
100011ca:	1c18      	adds	r0, r3, #0
100011cc:	46bd      	mov	sp, r7
100011ce:	b004      	add	sp, #16
100011d0:	bd80      	pop	{r7, pc}
100011d2:	46c0      	nop			; (mov r8, r8)

100011d4 <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
100011d4:	b580      	push	{r7, lr}
100011d6:	b084      	sub	sp, #16
100011d8:	af00      	add	r7, sp, #0
100011da:	60f8      	str	r0, [r7, #12]
100011dc:	60b9      	str	r1, [r7, #8]
100011de:	607a      	str	r2, [r7, #4]
 return -1;
100011e0:	2301      	movs	r3, #1
100011e2:	425b      	negs	r3, r3
}
100011e4:	1c18      	adds	r0, r3, #0
100011e6:	46bd      	mov	sp, r7
100011e8:	b004      	add	sp, #16
100011ea:	bd80      	pop	{r7, pc}

100011ec <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
100011ec:	b580      	push	{r7, lr}
100011ee:	af00      	add	r7, sp, #0
 return -1;
100011f0:	2301      	movs	r3, #1
100011f2:	425b      	negs	r3, r3
}
100011f4:	1c18      	adds	r0, r3, #0
100011f6:	46bd      	mov	sp, r7
100011f8:	bd80      	pop	{r7, pc}
100011fa:	46c0      	nop			; (mov r8, r8)

100011fc <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
100011fc:	b580      	push	{r7, lr}
100011fe:	b082      	sub	sp, #8
10001200:	af00      	add	r7, sp, #0
10001202:	6078      	str	r0, [r7, #4]
10001204:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
10001206:	683b      	ldr	r3, [r7, #0]
10001208:	2b00      	cmp	r3, #0
1000120a:	d002      	beq.n	10001212 <_fstat+0x16>
  return -1;
1000120c:	2301      	movs	r3, #1
1000120e:	425b      	negs	r3, r3
10001210:	e001      	b.n	10001216 <_fstat+0x1a>
 else
  return -2;
10001212:	2302      	movs	r3, #2
10001214:	425b      	negs	r3, r3
}
10001216:	1c18      	adds	r0, r3, #0
10001218:	46bd      	mov	sp, r7
1000121a:	b002      	add	sp, #8
1000121c:	bd80      	pop	{r7, pc}
1000121e:	46c0      	nop			; (mov r8, r8)

10001220 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
10001220:	b580      	push	{r7, lr}
10001222:	b082      	sub	sp, #8
10001224:	af00      	add	r7, sp, #0
10001226:	6078      	str	r0, [r7, #4]
10001228:	6039      	str	r1, [r7, #0]
 if (old == new)
1000122a:	687a      	ldr	r2, [r7, #4]
1000122c:	683b      	ldr	r3, [r7, #0]
1000122e:	429a      	cmp	r2, r3
10001230:	d102      	bne.n	10001238 <_link+0x18>
  return -1;
10001232:	2301      	movs	r3, #1
10001234:	425b      	negs	r3, r3
10001236:	e001      	b.n	1000123c <_link+0x1c>
 else
  return -2;
10001238:	2302      	movs	r3, #2
1000123a:	425b      	negs	r3, r3
}
1000123c:	1c18      	adds	r0, r3, #0
1000123e:	46bd      	mov	sp, r7
10001240:	b002      	add	sp, #8
10001242:	bd80      	pop	{r7, pc}

10001244 <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
10001244:	b580      	push	{r7, lr}
10001246:	b082      	sub	sp, #8
10001248:	af00      	add	r7, sp, #0
1000124a:	6078      	str	r0, [r7, #4]
 return -1;
1000124c:	2301      	movs	r3, #1
1000124e:	425b      	negs	r3, r3
}
10001250:	1c18      	adds	r0, r3, #0
10001252:	46bd      	mov	sp, r7
10001254:	b002      	add	sp, #8
10001256:	bd80      	pop	{r7, pc}

10001258 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
10001258:	b580      	push	{r7, lr}
1000125a:	b086      	sub	sp, #24
1000125c:	af00      	add	r7, sp, #0
1000125e:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10001260:	4b14      	ldr	r3, [pc, #80]	; (100012b4 <_sbrk+0x5c>)
10001262:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
10001264:	4b14      	ldr	r3, [pc, #80]	; (100012b8 <_sbrk+0x60>)
10001266:	681b      	ldr	r3, [r3, #0]
10001268:	2b00      	cmp	r3, #0
1000126a:	d108      	bne.n	1000127e <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
1000126c:	4b12      	ldr	r3, [pc, #72]	; (100012b8 <_sbrk+0x60>)
1000126e:	4a13      	ldr	r2, [pc, #76]	; (100012bc <_sbrk+0x64>)
10001270:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
10001272:	4b11      	ldr	r3, [pc, #68]	; (100012b8 <_sbrk+0x60>)
10001274:	681a      	ldr	r2, [r3, #0]
10001276:	697b      	ldr	r3, [r7, #20]
10001278:	18d2      	adds	r2, r2, r3
1000127a:	4b11      	ldr	r3, [pc, #68]	; (100012c0 <_sbrk+0x68>)
1000127c:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
1000127e:	4b0e      	ldr	r3, [pc, #56]	; (100012b8 <_sbrk+0x60>)
10001280:	681b      	ldr	r3, [r3, #0]
10001282:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001284:	4b0c      	ldr	r3, [pc, #48]	; (100012b8 <_sbrk+0x60>)
10001286:	681b      	ldr	r3, [r3, #0]
10001288:	1c1a      	adds	r2, r3, #0
1000128a:	687b      	ldr	r3, [r7, #4]
1000128c:	18d3      	adds	r3, r2, r3
1000128e:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
10001290:	2207      	movs	r2, #7
10001292:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001294:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
10001296:	4b0a      	ldr	r3, [pc, #40]	; (100012c0 <_sbrk+0x68>)
10001298:	681b      	ldr	r3, [r3, #0]
1000129a:	68fa      	ldr	r2, [r7, #12]
1000129c:	429a      	cmp	r2, r3
1000129e:	d301      	bcc.n	100012a4 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
100012a0:	2300      	movs	r3, #0
100012a2:	e003      	b.n	100012ac <_sbrk+0x54>
 else
 {
  heap = NextBreak;
100012a4:	4b04      	ldr	r3, [pc, #16]	; (100012b8 <_sbrk+0x60>)
100012a6:	68fa      	ldr	r2, [r7, #12]
100012a8:	601a      	str	r2, [r3, #0]
  return CurrBreak;
100012aa:	693b      	ldr	r3, [r7, #16]
 }
}
100012ac:	1c18      	adds	r0, r3, #0
100012ae:	46bd      	mov	sp, r7
100012b0:	b006      	add	sp, #24
100012b2:	bd80      	pop	{r7, pc}
100012b4:	00003670 	.word	0x00003670
100012b8:	20000954 	.word	0x20000954
100012bc:	20000990 	.word	0x20000990
100012c0:	20000958 	.word	0x20000958

100012c4 <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
100012c4:	b580      	push	{r7, lr}
100012c6:	b082      	sub	sp, #8
100012c8:	af00      	add	r7, sp, #0
100012ca:	6078      	str	r0, [r7, #4]
 return -1;
100012cc:	2301      	movs	r3, #1
100012ce:	425b      	negs	r3, r3
}
100012d0:	1c18      	adds	r0, r3, #0
100012d2:	46bd      	mov	sp, r7
100012d4:	b002      	add	sp, #8
100012d6:	bd80      	pop	{r7, pc}

100012d8 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
100012d8:	b580      	push	{r7, lr}
100012da:	b082      	sub	sp, #8
100012dc:	af00      	add	r7, sp, #0
100012de:	6078      	str	r0, [r7, #4]
 return -1;
100012e0:	2301      	movs	r3, #1
100012e2:	425b      	negs	r3, r3
}
100012e4:	1c18      	adds	r0, r3, #0
100012e6:	46bd      	mov	sp, r7
100012e8:	b002      	add	sp, #8
100012ea:	bd80      	pop	{r7, pc}

100012ec <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
100012ec:	b580      	push	{r7, lr}
100012ee:	b082      	sub	sp, #8
100012f0:	af00      	add	r7, sp, #0
100012f2:	6078      	str	r0, [r7, #4]
100012f4:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
100012f6:	2301      	movs	r3, #1
100012f8:	425b      	negs	r3, r3
}
100012fa:	1c18      	adds	r0, r3, #0
100012fc:	46bd      	mov	sp, r7
100012fe:	b002      	add	sp, #8
10001300:	bd80      	pop	{r7, pc}
10001302:	46c0      	nop			; (mov r8, r8)

10001304 <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
 return -1;
10001308:	2301      	movs	r3, #1
1000130a:	425b      	negs	r3, r3
}
1000130c:	1c18      	adds	r0, r3, #0
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)

10001314 <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
10001314:	b580      	push	{r7, lr}
10001316:	af00      	add	r7, sp, #0
 return -1;
10001318:	2301      	movs	r3, #1
1000131a:	425b      	negs	r3, r3
}
1000131c:	1c18      	adds	r0, r3, #0
1000131e:	46bd      	mov	sp, r7
10001320:	bd80      	pop	{r7, pc}
10001322:	46c0      	nop			; (mov r8, r8)

10001324 <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
10001324:	b580      	push	{r7, lr}
10001326:	b082      	sub	sp, #8
10001328:	af00      	add	r7, sp, #0
1000132a:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
1000132c:	e7fe      	b.n	1000132c <_exit+0x8>
1000132e:	46c0      	nop			; (mov r8, r8)

10001330 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
10001330:	b580      	push	{r7, lr}
10001332:	af00      	add	r7, sp, #0
10001334:	46bd      	mov	sp, r7
10001336:	bd80      	pop	{r7, pc}

10001338 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b082      	sub	sp, #8
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
10001340:	2301      	movs	r3, #1
10001342:	425b      	negs	r3, r3
}
10001344:	1c18      	adds	r0, r3, #0
10001346:	46bd      	mov	sp, r7
10001348:	b002      	add	sp, #8
1000134a:	bd80      	pop	{r7, pc}

1000134c <SPI001_lInit>:
**                      Private Function Definitions                         **
******************************************************************************/
 /* Initializes the App based on User provide configuration. */
 void SPI001_lInit (const SPI001_HandleType* Handle, \
                                        const uint16_t* SPI001_Baud_Values)
{
1000134c:	b590      	push	{r4, r7, lr}
1000134e:	b087      	sub	sp, #28
10001350:	af00      	add	r7, sp, #0
10001352:	6078      	str	r0, [r7, #4]
10001354:	6039      	str	r1, [r7, #0]
  USIC_CH_TypeDef* USICRegs = Handle->USICRegs;
10001356:	687b      	ldr	r3, [r7, #4]
10001358:	681b      	ldr	r3, [r3, #0]
1000135a:	617b      	str	r3, [r7, #20]
  SPI001_PORTS_TypeDef* MTSR_PortRegs = Handle->PinHandle->PinPortRegs[0];
1000135c:	687b      	ldr	r3, [r7, #4]
1000135e:	69db      	ldr	r3, [r3, #28]
10001360:	689b      	ldr	r3, [r3, #8]
10001362:	613b      	str	r3, [r7, #16]
  SPI001_PORTS_TypeDef* MRST_PortRegs = Handle->PinHandle->PinPortRegs[1];
10001364:	687b      	ldr	r3, [r7, #4]
10001366:	69db      	ldr	r3, [r3, #28]
10001368:	68db      	ldr	r3, [r3, #12]
1000136a:	60fb      	str	r3, [r7, #12]
  uint8_t MTSRPin = Handle->PinHandle->Pin_Num[0];
1000136c:	687b      	ldr	r3, [r7, #4]
1000136e:	69da      	ldr	r2, [r3, #28]
10001370:	1c3b      	adds	r3, r7, #0
10001372:	330b      	adds	r3, #11
10001374:	7912      	ldrb	r2, [r2, #4]
10001376:	701a      	strb	r2, [r3, #0]
  uint8_t MRSTPin = Handle->PinHandle->Pin_Num[1];
10001378:	687b      	ldr	r3, [r7, #4]
1000137a:	69da      	ldr	r2, [r3, #28]
1000137c:	1c3b      	adds	r3, r7, #0
1000137e:	330a      	adds	r3, #10
10001380:	7952      	ldrb	r2, [r2, #5]
10001382:	701a      	strb	r2, [r3, #0]
  /* <<<DD_SPI_API_1>>>*/
 
  /** SPI initialization  */
  
  /* Disable SPI mode before configuring all USIC registers to avoid unintended edges */ 
  USICRegs->CCR &= ~(((uint32_t)(USIC_SPI_MODE  & USIC_CH_CCR_MODE_Msk)));
10001384:	697b      	ldr	r3, [r7, #20]
10001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001388:	2201      	movs	r2, #1
1000138a:	1c18      	adds	r0, r3, #0
1000138c:	4390      	bics	r0, r2
1000138e:	1c02      	adds	r2, r0, #0
10001390:	697b      	ldr	r3, [r7, #20]
10001392:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Enable the USIC Channel */
  USICRegs->KSCFG |= ((((uint32_t) 0x01 & USIC_CH_KSCFG_MODEN_Msk)) | \
10001394:	697b      	ldr	r3, [r7, #20]
10001396:	68db      	ldr	r3, [r3, #12]
10001398:	2203      	movs	r2, #3
1000139a:	431a      	orrs	r2, r3
1000139c:	697b      	ldr	r3, [r7, #20]
1000139e:	60da      	str	r2, [r3, #12]
                      (((uint32_t)0x01 << USIC_CH_KSCFG_BPMODEN_Pos) & \
                        USIC_CH_KSCFG_BPMODEN_Msk)); 
 /* Configuration of USIC Channel Fractional Divider */
  /* Fractional divider mode selected */
  USICRegs->FDR |= (((uint32_t)0x02 << USIC_CH_FDR_DM_Pos) \
100013a0:	697b      	ldr	r3, [r7, #20]
100013a2:	691b      	ldr	r3, [r3, #16]
100013a4:	2280      	movs	r2, #128	; 0x80
100013a6:	0212      	lsls	r2, r2, #8
100013a8:	431a      	orrs	r2, r3
100013aa:	697b      	ldr	r3, [r7, #20]
100013ac:	611a      	str	r2, [r3, #16]
                    & USIC_CH_FDR_DM_Msk);
  
  /* Step value loaded */
  USICRegs->FDR |= ( *SPI001_Baud_Values & USIC_CH_FDR_STEP_Msk);
100013ae:	697b      	ldr	r3, [r7, #20]
100013b0:	691a      	ldr	r2, [r3, #16]
100013b2:	683b      	ldr	r3, [r7, #0]
100013b4:	881b      	ldrh	r3, [r3, #0]
100013b6:	059b      	lsls	r3, r3, #22
100013b8:	0d9b      	lsrs	r3, r3, #22
100013ba:	431a      	orrs	r2, r3
100013bc:	697b      	ldr	r3, [r7, #20]
100013be:	611a      	str	r2, [r3, #16]
 
  /* Clock phase & Clock polarity configuration */
  /* PCTQ value is zero */
  USICRegs->BRG |= ((((uint32_t)Handle->Config->LeadTrailDelay << \
100013c0:	697b      	ldr	r3, [r7, #20]
100013c2:	695a      	ldr	r2, [r3, #20]
100013c4:	687b      	ldr	r3, [r7, #4]
100013c6:	689b      	ldr	r3, [r3, #8]
100013c8:	7a1b      	ldrb	r3, [r3, #8]
100013ca:	0299      	lsls	r1, r3, #10
                     USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
100013cc:	23f8      	movs	r3, #248	; 0xf8
100013ce:	01db      	lsls	r3, r3, #7
100013d0:	4019      	ands	r1, r3
                   (((uint32_t)(*(1 + SPI001_Baud_Values)) << \
100013d2:	683b      	ldr	r3, [r7, #0]
100013d4:	3302      	adds	r3, #2
100013d6:	881b      	ldrh	r3, [r3, #0]
100013d8:	0418      	lsls	r0, r3, #16
                     USIC_CH_BRG_PDIV_Pos) & USIC_CH_BRG_PDIV_Msk) | \
100013da:	4b9d      	ldr	r3, [pc, #628]	; (10001650 <SPI001_lInit+0x304>)
100013dc:	4003      	ands	r3, r0
  USICRegs->FDR |= ( *SPI001_Baud_Values & USIC_CH_FDR_STEP_Msk);
 
  /* Clock phase & Clock polarity configuration */
  /* PCTQ value is zero */
  USICRegs->BRG |= ((((uint32_t)Handle->Config->LeadTrailDelay << \
                     USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
100013de:	4319      	orrs	r1, r3
                   (((uint32_t)(*(1 + SPI001_Baud_Values)) << \
                     USIC_CH_BRG_PDIV_Pos) & USIC_CH_BRG_PDIV_Msk) | \
                   (((uint32_t)0x02 << USIC_CH_BRG_CTQSEL_Pos) &  \
                      USIC_CH_BRG_CTQSEL_Msk) | \
                   (((((uint32_t)(Handle->Config->ClkPol) | \
100013e0:	687b      	ldr	r3, [r7, #4]
100013e2:	689b      	ldr	r3, [r3, #8]
100013e4:	789b      	ldrb	r3, [r3, #2]
100013e6:	1c18      	adds	r0, r3, #0
                    ((uint32_t)Handle->Config->ClkPh << (uint32_t) 0x01)) \
100013e8:	687b      	ldr	r3, [r7, #4]
100013ea:	689b      	ldr	r3, [r3, #8]
100013ec:	78db      	ldrb	r3, [r3, #3]
100013ee:	005b      	lsls	r3, r3, #1
                     USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
                   (((uint32_t)(*(1 + SPI001_Baud_Values)) << \
                     USIC_CH_BRG_PDIV_Pos) & USIC_CH_BRG_PDIV_Msk) | \
                   (((uint32_t)0x02 << USIC_CH_BRG_CTQSEL_Pos) &  \
                      USIC_CH_BRG_CTQSEL_Msk) | \
                   (((((uint32_t)(Handle->Config->ClkPol) | \
100013f0:	4303      	orrs	r3, r0
                    ((uint32_t)Handle->Config->ClkPh << (uint32_t) 0x01)) \
                     << USIC_CH_BRG_SCLKCFG_Pos) & USIC_CH_BRG_SCLKCFG_Msk))); 
100013f2:	079b      	lsls	r3, r3, #30
  USICRegs->BRG |= ((((uint32_t)Handle->Config->LeadTrailDelay << \
                     USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
                   (((uint32_t)(*(1 + SPI001_Baud_Values)) << \
                     USIC_CH_BRG_PDIV_Pos) & USIC_CH_BRG_PDIV_Msk) | \
                   (((uint32_t)0x02 << USIC_CH_BRG_CTQSEL_Pos) &  \
                      USIC_CH_BRG_CTQSEL_Msk) | \
100013f4:	430b      	orrs	r3, r1
  /* Step value loaded */
  USICRegs->FDR |= ( *SPI001_Baud_Values & USIC_CH_FDR_STEP_Msk);
 
  /* Clock phase & Clock polarity configuration */
  /* PCTQ value is zero */
  USICRegs->BRG |= ((((uint32_t)Handle->Config->LeadTrailDelay << \
100013f6:	4313      	orrs	r3, r2
100013f8:	2280      	movs	r2, #128	; 0x80
100013fa:	431a      	orrs	r2, r3
100013fc:	697b      	ldr	r3, [r7, #20]
100013fe:	615a      	str	r2, [r3, #20]
                     << USIC_CH_BRG_SCLKCFG_Pos) & USIC_CH_BRG_SCLKCFG_Msk))); 
 
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  USICRegs->SCTR |= \
10001400:	697b      	ldr	r3, [r7, #20]
10001402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
          ((((uint32_t)Handle->Config->HBMode & USIC_CH_SCTR_SDIR_Msk)) | \
10001404:	687b      	ldr	r3, [r7, #4]
10001406:	689b      	ldr	r3, [r3, #8]
10001408:	785b      	ldrb	r3, [r3, #1]
1000140a:	1c19      	adds	r1, r3, #0
1000140c:	2301      	movs	r3, #1
1000140e:	4019      	ands	r1, r3
		      (((uint32_t)0x01  <<  USIC_CH_SCTR_PDL_Pos ) & \
		            		                       USIC_CH_SCTR_PDL_Msk ) | \
		      (((uint32_t)0x01  <<  USIC_CH_SCTR_TRM_Pos ) & \
		                       		               USIC_CH_SCTR_TRM_Msk ) | \
          (((Handle->Config->FrameLen-(uint32_t)0x01) << USIC_CH_SCTR_FLE_Pos)\
10001410:	687b      	ldr	r3, [r7, #4]
10001412:	689b      	ldr	r3, [r3, #8]
10001414:	7adb      	ldrb	r3, [r3, #11]
10001416:	3b01      	subs	r3, #1
10001418:	0418      	lsls	r0, r3, #16
                                                 & USIC_CH_SCTR_FLE_Msk ) | \
1000141a:	23fc      	movs	r3, #252	; 0xfc
1000141c:	039b      	lsls	r3, r3, #14
1000141e:	4003      	ands	r3, r0
  USICRegs->SCTR |= \
          ((((uint32_t)Handle->Config->HBMode & USIC_CH_SCTR_SDIR_Msk)) | \
		      (((uint32_t)0x01  <<  USIC_CH_SCTR_PDL_Pos ) & \
		            		                       USIC_CH_SCTR_PDL_Msk ) | \
		      (((uint32_t)0x01  <<  USIC_CH_SCTR_TRM_Pos ) & \
		                       		               USIC_CH_SCTR_TRM_Msk ) | \
10001420:	4319      	orrs	r1, r3
          (((Handle->Config->FrameLen-(uint32_t)0x01) << USIC_CH_SCTR_FLE_Pos)\
                                                 & USIC_CH_SCTR_FLE_Msk ) | \
          (((Handle->Config->WordLen-(uint32_t)0x01) << USIC_CH_SCTR_WLE_Pos) \
10001422:	687b      	ldr	r3, [r7, #4]
10001424:	689b      	ldr	r3, [r3, #8]
10001426:	7a9b      	ldrb	r3, [r3, #10]
10001428:	3b01      	subs	r3, #1
1000142a:	0618      	lsls	r0, r3, #24
                                                &  USIC_CH_SCTR_WLE_Msk));
1000142c:	23f0      	movs	r3, #240	; 0xf0
1000142e:	051b      	lsls	r3, r3, #20
10001430:	4003      	ands	r3, r0
		      (((uint32_t)0x01  <<  USIC_CH_SCTR_PDL_Pos ) & \
		            		                       USIC_CH_SCTR_PDL_Msk ) | \
		      (((uint32_t)0x01  <<  USIC_CH_SCTR_TRM_Pos ) & \
		                       		               USIC_CH_SCTR_TRM_Msk ) | \
          (((Handle->Config->FrameLen-(uint32_t)0x01) << USIC_CH_SCTR_FLE_Pos)\
                                                 & USIC_CH_SCTR_FLE_Msk ) | \
10001432:	430b      	orrs	r3, r1
                     << USIC_CH_BRG_SCLKCFG_Pos) & USIC_CH_BRG_SCLKCFG_Msk))); 
 
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  USICRegs->SCTR |= \
10001434:	4313      	orrs	r3, r2
10001436:	2281      	movs	r2, #129	; 0x81
10001438:	0052      	lsls	r2, r2, #1
1000143a:	431a      	orrs	r2, r3
1000143c:	697b      	ldr	r3, [r7, #20]
1000143e:	635a      	str	r2, [r3, #52]	; 0x34
		                       		               USIC_CH_SCTR_TRM_Msk ) | \
          (((Handle->Config->FrameLen-(uint32_t)0x01) << USIC_CH_SCTR_FLE_Pos)\
                                                 & USIC_CH_SCTR_FLE_Msk ) | \
          (((Handle->Config->WordLen-(uint32_t)0x01) << USIC_CH_SCTR_WLE_Pos) \
                                                &  USIC_CH_SCTR_WLE_Msk));
  switch(Handle->Config->Mode)
10001440:	687b      	ldr	r3, [r7, #4]
10001442:	689b      	ldr	r3, [r3, #8]
10001444:	781b      	ldrb	r3, [r3, #0]
10001446:	2b01      	cmp	r3, #1
10001448:	d00f      	beq.n	1000146a <SPI001_lInit+0x11e>
1000144a:	dc02      	bgt.n	10001452 <SPI001_lInit+0x106>
1000144c:	2b00      	cmp	r3, #0
1000144e:	d005      	beq.n	1000145c <SPI001_lInit+0x110>
10001450:	e09d      	b.n	1000158e <SPI001_lInit+0x242>
10001452:	2b02      	cmp	r3, #2
10001454:	d029      	beq.n	100014aa <SPI001_lInit+0x15e>
10001456:	2b03      	cmp	r3, #3
10001458:	d05a      	beq.n	10001510 <SPI001_lInit+0x1c4>
1000145a:	e098      	b.n	1000158e <SPI001_lInit+0x242>
  {
    case SPI001_STANDARD_FULLDUPLEX:
      USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
1000145c:	697b      	ldr	r3, [r7, #20]
1000145e:	69db      	ldr	r3, [r3, #28]
10001460:	2210      	movs	r2, #16
10001462:	431a      	orrs	r2, r3
10001464:	697b      	ldr	r3, [r7, #20]
10001466:	61da      	str	r2, [r3, #28]
    	                                            USIC_CH_DX0CR_INSW_Msk));
      break;
10001468:	e091      	b.n	1000158e <SPI001_lInit+0x242>
    case SPI001_STANDARD_HALFDUPLEX:

      /* Enable hardware port control */
      USICRegs->CCR |= ((((uint32_t)0x01 << USIC_CH_CCR_HPCEN_Pos) & \
1000146a:	697b      	ldr	r3, [r7, #20]
1000146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000146e:	2240      	movs	r2, #64	; 0x40
10001470:	431a      	orrs	r2, r3
10001472:	697b      	ldr	r3, [r7, #20]
10001474:	641a      	str	r2, [r3, #64]	; 0x40
                                                       USIC_CH_CCR_HPCEN_Msk));
      USICRegs->TCSR |= (((uint32_t)0x01 << USIC_CH_TCSR_HPCMD_Pos) & \
10001476:	697b      	ldr	r3, [r7, #20]
10001478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000147a:	2210      	movs	r2, #16
1000147c:	431a      	orrs	r2, r3
1000147e:	697b      	ldr	r3, [r7, #20]
10001480:	639a      	str	r2, [r3, #56]	; 0x38
                                                      USIC_CH_TCSR_HPCMD_Msk);
      /* Enable loop back mode in input stages */
      USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
10001482:	697b      	ldr	r3, [r7, #20]
10001484:	69db      	ldr	r3, [r3, #28]
10001486:	2216      	movs	r2, #22
10001488:	431a      	orrs	r2, r3
1000148a:	697b      	ldr	r3, [r7, #20]
1000148c:	61da      	str	r2, [r3, #28]
                                            USIC_CH_DX0CR_INSW_Msk) | \
                          ((((uint32_t)0x06 << USIC_CH_DX0CR_DSEL_Pos) & \
                                            USIC_CH_DX0CR_DSEL_Msk)));                                           
      MTSR_PortRegs->HWSEL  |= ((uint32_t)2 << (MTSRPin * (uint32_t)2));                                                 
1000148e:	693b      	ldr	r3, [r7, #16]
10001490:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001492:	1c3b      	adds	r3, r7, #0
10001494:	330b      	adds	r3, #11
10001496:	781b      	ldrb	r3, [r3, #0]
10001498:	005b      	lsls	r3, r3, #1
1000149a:	2102      	movs	r1, #2
1000149c:	1c0c      	adds	r4, r1, #0
1000149e:	409c      	lsls	r4, r3
100014a0:	1c23      	adds	r3, r4, #0
100014a2:	431a      	orrs	r2, r3
100014a4:	693b      	ldr	r3, [r7, #16]
100014a6:	675a      	str	r2, [r3, #116]	; 0x74
      break;      
100014a8:	e071      	b.n	1000158e <SPI001_lInit+0x242>
    case SPI001_DUAL:
      /* Enable hardware port control */
      USICRegs->CCR |= (((uint32_t)((uint32_t)0x02 << USIC_CH_CCR_HPCEN_Pos) &\
100014aa:	697b      	ldr	r3, [r7, #20]
100014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100014ae:	2280      	movs	r2, #128	; 0x80
100014b0:	431a      	orrs	r2, r3
100014b2:	697b      	ldr	r3, [r7, #20]
100014b4:	641a      	str	r2, [r3, #64]	; 0x40
                                                       USIC_CH_CCR_HPCEN_Msk));
      USICRegs->TCSR |= ((uint32_t)((uint32_t)0x01 << USIC_CH_TCSR_HPCMD_Pos) \
100014b6:	697b      	ldr	r3, [r7, #20]
100014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100014ba:	2210      	movs	r2, #16
100014bc:	431a      	orrs	r2, r3
100014be:	697b      	ldr	r3, [r7, #20]
100014c0:	639a      	str	r2, [r3, #56]	; 0x38
                                                   & (USIC_CH_TCSR_HPCMD_Msk));
       /* Enable loop back mode in input stages */
      USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
100014c2:	697b      	ldr	r3, [r7, #20]
100014c4:	69db      	ldr	r3, [r3, #28]
100014c6:	2216      	movs	r2, #22
100014c8:	431a      	orrs	r2, r3
100014ca:	697b      	ldr	r3, [r7, #20]
100014cc:	61da      	str	r2, [r3, #28]
                                            USIC_CH_DX0CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX0CR_DSEL_Pos) & \
                                            USIC_CH_DX0CR_DSEL_Msk)); 
      USICRegs->DX3CR |= ((((uint32_t)0x01 << USIC_CH_DX3CR_INSW_Pos) & \
100014ce:	697b      	ldr	r3, [r7, #20]
100014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100014d2:	2216      	movs	r2, #22
100014d4:	431a      	orrs	r2, r3
100014d6:	697b      	ldr	r3, [r7, #20]
100014d8:	629a      	str	r2, [r3, #40]	; 0x28
                                            USIC_CH_DX3CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX3CR_DSEL_Pos) & \
                                            USIC_CH_DX3CR_DSEL_Msk));                                            
      MTSR_PortRegs->HWSEL |= ((uint32_t)2 << (MTSRPin * (uint32_t)2));
100014da:	693b      	ldr	r3, [r7, #16]
100014dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100014de:	1c3b      	adds	r3, r7, #0
100014e0:	330b      	adds	r3, #11
100014e2:	781b      	ldrb	r3, [r3, #0]
100014e4:	005b      	lsls	r3, r3, #1
100014e6:	2102      	movs	r1, #2
100014e8:	1c08      	adds	r0, r1, #0
100014ea:	4098      	lsls	r0, r3
100014ec:	1c03      	adds	r3, r0, #0
100014ee:	431a      	orrs	r2, r3
100014f0:	693b      	ldr	r3, [r7, #16]
100014f2:	675a      	str	r2, [r3, #116]	; 0x74
      MRST_PortRegs->HWSEL |= ((uint32_t)2 << (MRSTPin * (uint32_t)2));  
100014f4:	68fb      	ldr	r3, [r7, #12]
100014f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100014f8:	1c3b      	adds	r3, r7, #0
100014fa:	330a      	adds	r3, #10
100014fc:	781b      	ldrb	r3, [r3, #0]
100014fe:	005b      	lsls	r3, r3, #1
10001500:	2102      	movs	r1, #2
10001502:	1c0c      	adds	r4, r1, #0
10001504:	409c      	lsls	r4, r3
10001506:	1c23      	adds	r3, r4, #0
10001508:	431a      	orrs	r2, r3
1000150a:	68fb      	ldr	r3, [r7, #12]
1000150c:	675a      	str	r2, [r3, #116]	; 0x74
     
      break;
1000150e:	e03e      	b.n	1000158e <SPI001_lInit+0x242>
    case SPI001_QUAD:
      /* Enable hardware port control */
      USICRegs->CCR |= (((uint32_t)0x03 << USIC_CH_CCR_HPCEN_Pos) & \
10001510:	697b      	ldr	r3, [r7, #20]
10001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001514:	22c0      	movs	r2, #192	; 0xc0
10001516:	431a      	orrs	r2, r3
10001518:	697b      	ldr	r3, [r7, #20]
1000151a:	641a      	str	r2, [r3, #64]	; 0x40
                                                        USIC_CH_CCR_HPCEN_Msk);
      USICRegs->TCSR |= (((uint32_t)0x01 << USIC_CH_TCSR_HPCMD_Pos) & \
1000151c:	697b      	ldr	r3, [r7, #20]
1000151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001520:	2210      	movs	r2, #16
10001522:	431a      	orrs	r2, r3
10001524:	697b      	ldr	r3, [r7, #20]
10001526:	639a      	str	r2, [r3, #56]	; 0x38
                                                       USIC_CH_TCSR_HPCMD_Msk);
       /* Enable loop back mode in input stages */
      USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
10001528:	697b      	ldr	r3, [r7, #20]
1000152a:	69db      	ldr	r3, [r3, #28]
1000152c:	2216      	movs	r2, #22
1000152e:	431a      	orrs	r2, r3
10001530:	697b      	ldr	r3, [r7, #20]
10001532:	61da      	str	r2, [r3, #28]
                                            USIC_CH_DX0CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX0CR_DSEL_Pos) & \
                                            USIC_CH_DX0CR_DSEL_Msk)); 
      USICRegs->DX3CR |= ((((uint32_t)0x01 << USIC_CH_DX3CR_INSW_Pos) & \
10001534:	697b      	ldr	r3, [r7, #20]
10001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001538:	2216      	movs	r2, #22
1000153a:	431a      	orrs	r2, r3
1000153c:	697b      	ldr	r3, [r7, #20]
1000153e:	629a      	str	r2, [r3, #40]	; 0x28
                                            USIC_CH_DX3CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX3CR_DSEL_Pos) & \
                                            USIC_CH_DX3CR_DSEL_Msk));  
      USICRegs->DX4CR |= ((((uint32_t)0x01 << USIC_CH_DX4CR_INSW_Pos) & \
10001540:	697b      	ldr	r3, [r7, #20]
10001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001544:	2216      	movs	r2, #22
10001546:	431a      	orrs	r2, r3
10001548:	697b      	ldr	r3, [r7, #20]
1000154a:	62da      	str	r2, [r3, #44]	; 0x2c
                                            USIC_CH_DX4CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX4CR_DSEL_Pos) & \
                                            USIC_CH_DX4CR_DSEL_Msk));  
      USICRegs->DX5CR |= ((((uint32_t)0x01 << USIC_CH_DX5CR_INSW_Pos) & \
1000154c:	697b      	ldr	r3, [r7, #20]
1000154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001550:	2216      	movs	r2, #22
10001552:	431a      	orrs	r2, r3
10001554:	697b      	ldr	r3, [r7, #20]
10001556:	631a      	str	r2, [r3, #48]	; 0x30
                                            USIC_CH_DX5CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX5CR_DSEL_Pos) & \
                                            USIC_CH_DX5CR_DSEL_Msk));                                             
      MTSR_PortRegs->HWSEL |= ((uint32_t)2 << (MTSRPin * (uint32_t)2));
10001558:	693b      	ldr	r3, [r7, #16]
1000155a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
1000155c:	1c3b      	adds	r3, r7, #0
1000155e:	330b      	adds	r3, #11
10001560:	781b      	ldrb	r3, [r3, #0]
10001562:	005b      	lsls	r3, r3, #1
10001564:	2102      	movs	r1, #2
10001566:	1c08      	adds	r0, r1, #0
10001568:	4098      	lsls	r0, r3
1000156a:	1c03      	adds	r3, r0, #0
1000156c:	431a      	orrs	r2, r3
1000156e:	693b      	ldr	r3, [r7, #16]
10001570:	675a      	str	r2, [r3, #116]	; 0x74
      MRST_PortRegs->HWSEL |= ((uint32_t)2 << (MRSTPin * (uint32_t)2));   
10001572:	68fb      	ldr	r3, [r7, #12]
10001574:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001576:	1c3b      	adds	r3, r7, #0
10001578:	330a      	adds	r3, #10
1000157a:	781b      	ldrb	r3, [r3, #0]
1000157c:	005b      	lsls	r3, r3, #1
1000157e:	2102      	movs	r1, #2
10001580:	1c0c      	adds	r4, r1, #0
10001582:	409c      	lsls	r4, r3
10001584:	1c23      	adds	r3, r4, #0
10001586:	431a      	orrs	r2, r3
10001588:	68fb      	ldr	r3, [r7, #12]
1000158a:	675a      	str	r2, [r3, #116]	; 0x74

      break;
1000158c:	46c0      	nop			; (mov r8, r8)
  }
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	USICRegs->TCSR |= ((((uint32_t)0x01  << USIC_CH_TCSR_TDEN_Pos) & \
1000158e:	697b      	ldr	r3, [r7, #20]
10001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001592:	22a0      	movs	r2, #160	; 0xa0
10001594:	00d2      	lsls	r2, r2, #3
10001596:	431a      	orrs	r2, r3
10001598:	697b      	ldr	r3, [r7, #20]
1000159a:	639a      	str	r2, [r3, #56]	; 0x38
    (((uint32_t)0x01  << USIC_CH_TCSR_TDSSM_Pos) & USIC_CH_TCSR_TDSSM_Msk));

  /* Configuration of Protocol Control Register */ 
	/* PCTQ1 value is zero */
  /* Parity Error Interrupt generation is disabled*/
  USICRegs->PCR_SSCMode |= 
1000159c:	697b      	ldr	r3, [r7, #20]
1000159e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                                            USIC_CH_PCR_SSCMode_SELCTR_Msk) | \
      (((uint32_t)0x01 << USIC_CH_PCR_SSCMode_SELINV_Pos) & \
                                            USIC_CH_PCR_SSCMode_SELINV_Msk) | \
      (((uint32_t)0x02 << USIC_CH_PCR_SSCMode_CTQSEL1_Pos) & \
                                           USIC_CH_PCR_SSCMode_CTQSEL1_Msk) | \
      (((uint32_t)Handle->Config->NextFrameDelay << \
100015a0:	687b      	ldr	r3, [r7, #4]
100015a2:	689b      	ldr	r3, [r3, #8]
100015a4:	7a5b      	ldrb	r3, [r3, #9]
100015a6:	0219      	lsls	r1, r3, #8
            USIC_CH_PCR_SSCMode_DCTQ1_Pos) & USIC_CH_PCR_SSCMode_DCTQ1_Msk) | \
100015a8:	23f8      	movs	r3, #248	; 0xf8
100015aa:	015b      	lsls	r3, r3, #5
100015ac:	4019      	ands	r1, r3
      (((uint32_t)Handle->MSLSIntrEn << USIC_CH_PCR_SSCMode_MSLSIEN_Pos) & \
100015ae:	687b      	ldr	r3, [r7, #4]
100015b0:	7e5b      	ldrb	r3, [r3, #25]
100015b2:	0398      	lsls	r0, r3, #14
100015b4:	2380      	movs	r3, #128	; 0x80
100015b6:	01db      	lsls	r3, r3, #7
100015b8:	4003      	ands	r3, r0
      (((uint32_t)0x01 << USIC_CH_PCR_SSCMode_SELINV_Pos) & \
                                            USIC_CH_PCR_SSCMode_SELINV_Msk) | \
      (((uint32_t)0x02 << USIC_CH_PCR_SSCMode_CTQSEL1_Pos) & \
                                           USIC_CH_PCR_SSCMode_CTQSEL1_Msk) | \
      (((uint32_t)Handle->Config->NextFrameDelay << \
            USIC_CH_PCR_SSCMode_DCTQ1_Pos) & USIC_CH_PCR_SSCMode_DCTQ1_Msk) | \
100015ba:	4319      	orrs	r1, r3
      (((uint32_t)Handle->MSLSIntrEn << USIC_CH_PCR_SSCMode_MSLSIEN_Pos) & \
                                           USIC_CH_PCR_SSCMode_MSLSIEN_Msk) | \
      ((((uint32_t)0x01 << Handle->ChipSelTable[Handle->Config->CESelected]) \
100015bc:	687b      	ldr	r3, [r7, #4]
100015be:	689b      	ldr	r3, [r3, #8]
100015c0:	7b1b      	ldrb	r3, [r3, #12]
100015c2:	1c18      	adds	r0, r3, #0
100015c4:	687c      	ldr	r4, [r7, #4]
100015c6:	2308      	movs	r3, #8
100015c8:	1820      	adds	r0, r4, r0
100015ca:	18c3      	adds	r3, r0, r3
100015cc:	791b      	ldrb	r3, [r3, #4]
100015ce:	2001      	movs	r0, #1
100015d0:	1c04      	adds	r4, r0, #0
100015d2:	409c      	lsls	r4, r3
100015d4:	1c23      	adds	r3, r4, #0
           << USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk) | \
100015d6:	0418      	lsls	r0, r3, #16
100015d8:	23ff      	movs	r3, #255	; 0xff
100015da:	041b      	lsls	r3, r3, #16
100015dc:	4003      	ands	r3, r0
      (((uint32_t)0x02 << USIC_CH_PCR_SSCMode_CTQSEL1_Pos) & \
                                           USIC_CH_PCR_SSCMode_CTQSEL1_Msk) | \
      (((uint32_t)Handle->Config->NextFrameDelay << \
            USIC_CH_PCR_SSCMode_DCTQ1_Pos) & USIC_CH_PCR_SSCMode_DCTQ1_Msk) | \
      (((uint32_t)Handle->MSLSIntrEn << USIC_CH_PCR_SSCMode_MSLSIEN_Pos) & \
                                           USIC_CH_PCR_SSCMode_MSLSIEN_Msk) | \
100015de:	4319      	orrs	r1, r3
      ((((uint32_t)0x01 << Handle->ChipSelTable[Handle->Config->CESelected]) \
           << USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk) | \
      (((uint32_t)Handle->FrmEndMode << USIC_CH_PCR_SSCMode_FEM_Pos) \
100015e0:	687b      	ldr	r3, [r7, #4]
100015e2:	791b      	ldrb	r3, [r3, #4]
100015e4:	00d8      	lsls	r0, r3, #3
                                             & USIC_CH_PCR_SSCMode_FEM_Msk));
100015e6:	2308      	movs	r3, #8
100015e8:	4003      	ands	r3, r0
      (((uint32_t)Handle->Config->NextFrameDelay << \
            USIC_CH_PCR_SSCMode_DCTQ1_Pos) & USIC_CH_PCR_SSCMode_DCTQ1_Msk) | \
      (((uint32_t)Handle->MSLSIntrEn << USIC_CH_PCR_SSCMode_MSLSIEN_Pos) & \
                                           USIC_CH_PCR_SSCMode_MSLSIEN_Msk) | \
      ((((uint32_t)0x01 << Handle->ChipSelTable[Handle->Config->CESelected]) \
           << USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk) | \
100015ea:	430b      	orrs	r3, r1
    (((uint32_t)0x01  << USIC_CH_TCSR_TDSSM_Pos) & USIC_CH_TCSR_TDSSM_Msk));

  /* Configuration of Protocol Control Register */ 
	/* PCTQ1 value is zero */
  /* Parity Error Interrupt generation is disabled*/
  USICRegs->PCR_SSCMode |= 
100015ec:	4313      	orrs	r3, r2
100015ee:	2227      	movs	r2, #39	; 0x27
100015f0:	431a      	orrs	r2, r3
100015f2:	697b      	ldr	r3, [r7, #20]
100015f4:	63da      	str	r2, [r3, #60]	; 0x3c
      ((((uint32_t)0x01 << Handle->ChipSelTable[Handle->Config->CESelected]) \
           << USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk) | \
      (((uint32_t)Handle->FrmEndMode << USIC_CH_PCR_SSCMode_FEM_Pos) \
                                             & USIC_CH_PCR_SSCMode_FEM_Msk));
  /* Configuration of Transmitter Buffer Control Register */ 
  USICRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
100015f6:	697a      	ldr	r2, [r7, #20]
100015f8:	2384      	movs	r3, #132	; 0x84
100015fa:	005b      	lsls	r3, r3, #1
100015fc:	58d2      	ldr	r2, [r2, r3]
100015fe:	687b      	ldr	r3, [r7, #4]
10001600:	7d5b      	ldrb	r3, [r3, #21]
10001602:	0219      	lsls	r1, r3, #8
                    USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
10001604:	23fc      	movs	r3, #252	; 0xfc
10001606:	019b      	lsls	r3, r3, #6
10001608:	400b      	ands	r3, r1
      ((((uint32_t)0x01 << Handle->ChipSelTable[Handle->Config->CESelected]) \
           << USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk) | \
      (((uint32_t)Handle->FrmEndMode << USIC_CH_PCR_SSCMode_FEM_Pos) \
                                             & USIC_CH_PCR_SSCMode_FEM_Msk));
  /* Configuration of Transmitter Buffer Control Register */ 
  USICRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
1000160a:	1c11      	adds	r1, r2, #0
1000160c:	4319      	orrs	r1, r3
1000160e:	697a      	ldr	r2, [r7, #20]
10001610:	2384      	movs	r3, #132	; 0x84
10001612:	005b      	lsls	r3, r3, #1
10001614:	50d1      	str	r1, [r2, r3]
                    USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
    
  /* Configuration of Receiver Buffer Control Register */ 
  USICRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10001616:	697a      	ldr	r2, [r7, #20]
10001618:	2386      	movs	r3, #134	; 0x86
1000161a:	005b      	lsls	r3, r3, #1
1000161c:	58d2      	ldr	r2, [r2, r3]
1000161e:	687b      	ldr	r3, [r7, #4]
10001620:	7d9b      	ldrb	r3, [r3, #22]
10001622:	0219      	lsls	r1, r3, #8
                USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
10001624:	23fc      	movs	r3, #252	; 0xfc
10001626:	019b      	lsls	r3, r3, #6
10001628:	400b      	ands	r3, r1
  /* Configuration of Transmitter Buffer Control Register */ 
  USICRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
                    USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
    
  /* Configuration of Receiver Buffer Control Register */ 
  USICRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
1000162a:	4313      	orrs	r3, r2
1000162c:	2280      	movs	r2, #128	; 0x80
1000162e:	0552      	lsls	r2, r2, #21
10001630:	1c11      	adds	r1, r2, #0
10001632:	4319      	orrs	r1, r3
10001634:	697a      	ldr	r2, [r7, #20]
10001636:	2386      	movs	r3, #134	; 0x86
10001638:	005b      	lsls	r3, r3, #1
1000163a:	50d1      	str	r1, [r2, r3]
                (((uint32_t)0x01   << USIC_CH_RBCTR_LOF_Pos) & \
                    USIC_CH_RBCTR_LOF_Msk));
   
  /* Configuration of Channel Control Register */ 
  /* parity generation is disabled*/
  USICRegs->CCR |= ( ((uint32_t)(USIC_SPI_MODE  & USIC_CH_CCR_MODE_Msk)));
1000163c:	697b      	ldr	r3, [r7, #20]
1000163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001640:	2201      	movs	r2, #1
10001642:	431a      	orrs	r2, r3
10001644:	697b      	ldr	r3, [r7, #20]
10001646:	641a      	str	r2, [r3, #64]	; 0x40

}
10001648:	46bd      	mov	sp, r7
1000164a:	b007      	add	sp, #28
1000164c:	bd90      	pop	{r4, r7, pc}
1000164e:	46c0      	nop			; (mov r8, r8)
10001650:	03ff0000 	.word	0x03ff0000

10001654 <SPI001_lConfigureBaudRate>:


/* Give optimized PDIV and STEP value for the given baud rate */ 
void SPI001_lConfigureBaudRate(uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
10001654:	b590      	push	{r4, r7, lr}
10001656:	b089      	sub	sp, #36	; 0x24
10001658:	af00      	add	r7, sp, #0
1000165a:	60f8      	str	r0, [r7, #12]
1000165c:	60b9      	str	r1, [r7, #8]
1000165e:	607a      	str	r2, [r7, #4]

	float ratio, TempBaud,TempPdiv, TempStep;
	TempBaud = (float)BaudRate;
10001660:	68f8      	ldr	r0, [r7, #12]
10001662:	f002 fa21 	bl	10003aa8 <__aeabi_ui2f>
10001666:	1c03      	adds	r3, r0, #0
10001668:	617b      	str	r3, [r7, #20]
	ratio = (float)((((SPI001_CLOCK * (float)1000000)/\
1000166a:	4831      	ldr	r0, [pc, #196]	; (10001730 <SPI001_lConfigureBaudRate+0xdc>)
1000166c:	6979      	ldr	r1, [r7, #20]
1000166e:	f001 fcff 	bl	10003070 <__aeabi_fdiv>
10001672:	1c03      	adds	r3, r0, #0
10001674:	613b      	str	r3, [r7, #16]
	                 (float)(SPI001_DCTQ_VALUE * SPI001_MAX_STEPVALUE)) * \
	                 (float)SPI001_IM_STEPVALUE)/(float)TempBaud);
	/* Calculating optimum PDIV value */
	if( ratio <= (float)1)
10001676:	6938      	ldr	r0, [r7, #16]
10001678:	21fe      	movs	r1, #254	; 0xfe
1000167a:	0589      	lsls	r1, r1, #22
1000167c:	f001 faec 	bl	10002c58 <__aeabi_fcmple>
10001680:	1c03      	adds	r3, r0, #0
10001682:	2b00      	cmp	r3, #0
10001684:	d002      	beq.n	1000168c <SPI001_lConfigureBaudRate+0x38>
    {
		TempPdiv = (float)0;
10001686:	2300      	movs	r3, #0
10001688:	61fb      	str	r3, [r7, #28]
1000168a:	e00f      	b.n	100016ac <SPI001_lConfigureBaudRate+0x58>
    }
    else
    {
    	TempPdiv =  ratio -(float)1;
1000168c:	6938      	ldr	r0, [r7, #16]
1000168e:	21fe      	movs	r1, #254	; 0xfe
10001690:	0589      	lsls	r1, r1, #22
10001692:	f002 f80f 	bl	100036b4 <__aeabi_fsub>
10001696:	1c03      	adds	r3, r0, #0
10001698:	61fb      	str	r3, [r7, #28]
      if( TempPdiv > (float)SPI001_MAX_VALUE)
1000169a:	69f8      	ldr	r0, [r7, #28]
1000169c:	4925      	ldr	r1, [pc, #148]	; (10001734 <SPI001_lConfigureBaudRate+0xe0>)
1000169e:	f001 fae5 	bl	10002c6c <__aeabi_fcmpgt>
100016a2:	1c03      	adds	r3, r0, #0
100016a4:	2b00      	cmp	r3, #0
100016a6:	d001      	beq.n	100016ac <SPI001_lConfigureBaudRate+0x58>
      {
    	  TempPdiv = (float)SPI001_MAX_VALUE;
100016a8:	4b22      	ldr	r3, [pc, #136]	; (10001734 <SPI001_lConfigureBaudRate+0xe0>)
100016aa:	61fb      	str	r3, [r7, #28]
      }
    }
	*Pdiv = (uint32_t)TempPdiv;
100016ac:	69f8      	ldr	r0, [r7, #28]
100016ae:	f001 faf1 	bl	10002c94 <__aeabi_f2uiz>
100016b2:	1c02      	adds	r2, r0, #0
100016b4:	68bb      	ldr	r3, [r7, #8]
100016b6:	601a      	str	r2, [r3, #0]
    /* Calculating STEP value */
	TempStep = (float)(((((TempBaud * (float)SPI001_MAX_STEPVALUE)/ \
100016b8:	6978      	ldr	r0, [r7, #20]
100016ba:	2189      	movs	r1, #137	; 0x89
100016bc:	05c9      	lsls	r1, r1, #23
100016be:	f001 fec9 	bl	10003454 <__aeabi_fmul>
100016c2:	1c03      	adds	r3, r0, #0
100016c4:	1c18      	adds	r0, r3, #0
100016c6:	491c      	ldr	r1, [pc, #112]	; (10001738 <SPI001_lConfigureBaudRate+0xe4>)
100016c8:	f001 fcd2 	bl	10003070 <__aeabi_fdiv>
100016cc:	1c03      	adds	r3, r0, #0
	                    (float)1000000) * (float)SPI001_DCTQ_VALUE ) * \
100016ce:	1c18      	adds	r0, r3, #0
100016d0:	1c19      	adds	r1, r3, #0
100016d2:	f001 faf7 	bl	10002cc4 <__aeabi_fadd>
100016d6:	1c03      	adds	r3, r0, #0
100016d8:	1c1c      	adds	r4, r3, #0
                      ((float)1+ (float)(*Pdiv)))/(SPI001_CLOCK));
100016da:	68bb      	ldr	r3, [r7, #8]
100016dc:	681b      	ldr	r3, [r3, #0]
100016de:	1c18      	adds	r0, r3, #0
100016e0:	f002 f9e2 	bl	10003aa8 <__aeabi_ui2f>
100016e4:	1c03      	adds	r3, r0, #0
100016e6:	1c18      	adds	r0, r3, #0
100016e8:	21fe      	movs	r1, #254	; 0xfe
100016ea:	0589      	lsls	r1, r1, #22
100016ec:	f001 faea 	bl	10002cc4 <__aeabi_fadd>
100016f0:	1c03      	adds	r3, r0, #0
      }
    }
	*Pdiv = (uint32_t)TempPdiv;
    /* Calculating STEP value */
	TempStep = (float)(((((TempBaud * (float)SPI001_MAX_STEPVALUE)/ \
	                    (float)1000000) * (float)SPI001_DCTQ_VALUE ) * \
100016f2:	1c20      	adds	r0, r4, #0
100016f4:	1c19      	adds	r1, r3, #0
100016f6:	f001 fead 	bl	10003454 <__aeabi_fmul>
100016fa:	1c03      	adds	r3, r0, #0
    	  TempPdiv = (float)SPI001_MAX_VALUE;
      }
    }
	*Pdiv = (uint32_t)TempPdiv;
    /* Calculating STEP value */
	TempStep = (float)(((((TempBaud * (float)SPI001_MAX_STEPVALUE)/ \
100016fc:	1c18      	adds	r0, r3, #0
100016fe:	2184      	movs	r1, #132	; 0x84
10001700:	05c9      	lsls	r1, r1, #23
10001702:	f001 fcb5 	bl	10003070 <__aeabi_fdiv>
10001706:	1c03      	adds	r3, r0, #0
10001708:	61bb      	str	r3, [r7, #24]
	                    (float)1000000) * (float)SPI001_DCTQ_VALUE ) * \
                      ((float)1+ (float)(*Pdiv)))/(SPI001_CLOCK));

    if(TempStep > (float)SPI001_MAX_VALUE)
1000170a:	69b8      	ldr	r0, [r7, #24]
1000170c:	4909      	ldr	r1, [pc, #36]	; (10001734 <SPI001_lConfigureBaudRate+0xe0>)
1000170e:	f001 faad 	bl	10002c6c <__aeabi_fcmpgt>
10001712:	1c03      	adds	r3, r0, #0
10001714:	2b00      	cmp	r3, #0
10001716:	d001      	beq.n	1000171c <SPI001_lConfigureBaudRate+0xc8>
    {
   	  TempStep = (float)SPI001_MAX_VALUE;
10001718:	4b06      	ldr	r3, [pc, #24]	; (10001734 <SPI001_lConfigureBaudRate+0xe0>)
1000171a:	61bb      	str	r3, [r7, #24]
    }
    *Step = (uint32_t)TempStep;
1000171c:	69b8      	ldr	r0, [r7, #24]
1000171e:	f001 fab9 	bl	10002c94 <__aeabi_f2uiz>
10001722:	1c02      	adds	r2, r0, #0
10001724:	687b      	ldr	r3, [r7, #4]
10001726:	601a      	str	r2, [r3, #0]
}
10001728:	46bd      	mov	sp, r7
1000172a:	b009      	add	sp, #36	; 0x24
1000172c:	bd90      	pop	{r4, r7, pc}
1000172e:	46c0      	nop			; (mov r8, r8)
10001730:	4aee6b28 	.word	0x4aee6b28
10001734:	447fc000 	.word	0x447fc000
10001738:	49742400 	.word	0x49742400

1000173c <SPI001_lClearPortRegs>:

/* Clears the IOCR.PCR value of the Port Register  */
void SPI001_lClearPortRegs(const SPI001_HandleType* Handle)
{
1000173c:	b580      	push	{r7, lr}
1000173e:	b086      	sub	sp, #24
10001740:	af00      	add	r7, sp, #0
10001742:	6078      	str	r0, [r7, #4]
	uint8_t MTSRPin = Handle->PinHandle->Pin_Num[0];
10001744:	687b      	ldr	r3, [r7, #4]
10001746:	69da      	ldr	r2, [r3, #28]
10001748:	1c3b      	adds	r3, r7, #0
1000174a:	3317      	adds	r3, #23
1000174c:	7912      	ldrb	r2, [r2, #4]
1000174e:	701a      	strb	r2, [r3, #0]
	SPI001_PORTS_TypeDef* MTSR_PortRegs = Handle->PinHandle->PinPortRegs[0];
10001750:	687b      	ldr	r3, [r7, #4]
10001752:	69db      	ldr	r3, [r3, #28]
10001754:	689b      	ldr	r3, [r3, #8]
10001756:	613b      	str	r3, [r7, #16]
    uint8_t Msk_IOCR = 0x07U;
10001758:	1c3b      	adds	r3, r7, #0
1000175a:	330f      	adds	r3, #15
1000175c:	2207      	movs	r2, #7
1000175e:	701a      	strb	r2, [r3, #0]

	if(MTSRPin < 0x04U)
10001760:	1c3b      	adds	r3, r7, #0
10001762:	3317      	adds	r3, #23
10001764:	781b      	ldrb	r3, [r3, #0]
10001766:	2b03      	cmp	r3, #3
10001768:	d811      	bhi.n	1000178e <SPI001_lClearPortRegs+0x52>
    {
	  MTSR_PortRegs->IOCR0 &= ~((uint32_t)Msk_IOCR << (3U + (MTSRPin * 8U)));
1000176a:	693b      	ldr	r3, [r7, #16]
1000176c:	691b      	ldr	r3, [r3, #16]
1000176e:	1c3a      	adds	r2, r7, #0
10001770:	320f      	adds	r2, #15
10001772:	7811      	ldrb	r1, [r2, #0]
10001774:	1c3a      	adds	r2, r7, #0
10001776:	3217      	adds	r2, #23
10001778:	7812      	ldrb	r2, [r2, #0]
1000177a:	00d2      	lsls	r2, r2, #3
1000177c:	3203      	adds	r2, #3
1000177e:	1c08      	adds	r0, r1, #0
10001780:	4090      	lsls	r0, r2
10001782:	1c02      	adds	r2, r0, #0
10001784:	43d2      	mvns	r2, r2
10001786:	401a      	ands	r2, r3
10001788:	693b      	ldr	r3, [r7, #16]
1000178a:	611a      	str	r2, [r3, #16]
1000178c:	e067      	b.n	1000185e <SPI001_lClearPortRegs+0x122>
 	}
 	else if ((MTSRPin > 0x03U) && (MTSRPin < 8U))
1000178e:	1c3b      	adds	r3, r7, #0
10001790:	3317      	adds	r3, #23
10001792:	781b      	ldrb	r3, [r3, #0]
10001794:	2b03      	cmp	r3, #3
10001796:	d91d      	bls.n	100017d4 <SPI001_lClearPortRegs+0x98>
10001798:	1c3b      	adds	r3, r7, #0
1000179a:	3317      	adds	r3, #23
1000179c:	781b      	ldrb	r3, [r3, #0]
1000179e:	2b07      	cmp	r3, #7
100017a0:	d818      	bhi.n	100017d4 <SPI001_lClearPortRegs+0x98>
 	{
 	  MTSRPin = MTSRPin - 4U;
100017a2:	1c3b      	adds	r3, r7, #0
100017a4:	3317      	adds	r3, #23
100017a6:	1c3a      	adds	r2, r7, #0
100017a8:	3217      	adds	r2, #23
100017aa:	7812      	ldrb	r2, [r2, #0]
100017ac:	3a04      	subs	r2, #4
100017ae:	701a      	strb	r2, [r3, #0]
	  MTSR_PortRegs->IOCR4 &= ~((uint32_t)Msk_IOCR << (3U + (MTSRPin * 8U)));
100017b0:	693b      	ldr	r3, [r7, #16]
100017b2:	695b      	ldr	r3, [r3, #20]
100017b4:	1c3a      	adds	r2, r7, #0
100017b6:	320f      	adds	r2, #15
100017b8:	7811      	ldrb	r1, [r2, #0]
100017ba:	1c3a      	adds	r2, r7, #0
100017bc:	3217      	adds	r2, #23
100017be:	7812      	ldrb	r2, [r2, #0]
100017c0:	00d2      	lsls	r2, r2, #3
100017c2:	3203      	adds	r2, #3
100017c4:	1c08      	adds	r0, r1, #0
100017c6:	4090      	lsls	r0, r2
100017c8:	1c02      	adds	r2, r0, #0
100017ca:	43d2      	mvns	r2, r2
100017cc:	401a      	ands	r2, r3
100017ce:	693b      	ldr	r3, [r7, #16]
100017d0:	615a      	str	r2, [r3, #20]
100017d2:	e044      	b.n	1000185e <SPI001_lClearPortRegs+0x122>
 	} 
 	else if ((MTSRPin > 7U) && (MTSRPin < 12U)) 
100017d4:	1c3b      	adds	r3, r7, #0
100017d6:	3317      	adds	r3, #23
100017d8:	781b      	ldrb	r3, [r3, #0]
100017da:	2b07      	cmp	r3, #7
100017dc:	d91d      	bls.n	1000181a <SPI001_lClearPortRegs+0xde>
100017de:	1c3b      	adds	r3, r7, #0
100017e0:	3317      	adds	r3, #23
100017e2:	781b      	ldrb	r3, [r3, #0]
100017e4:	2b0b      	cmp	r3, #11
100017e6:	d818      	bhi.n	1000181a <SPI001_lClearPortRegs+0xde>
 	{
 	  MTSRPin = MTSRPin - 8U;
100017e8:	1c3b      	adds	r3, r7, #0
100017ea:	3317      	adds	r3, #23
100017ec:	1c3a      	adds	r2, r7, #0
100017ee:	3217      	adds	r2, #23
100017f0:	7812      	ldrb	r2, [r2, #0]
100017f2:	3a08      	subs	r2, #8
100017f4:	701a      	strb	r2, [r3, #0]
	  MTSR_PortRegs->IOCR8 &= ~((uint32_t)Msk_IOCR << (3U + (MTSRPin * 8U)));
100017f6:	693b      	ldr	r3, [r7, #16]
100017f8:	699b      	ldr	r3, [r3, #24]
100017fa:	1c3a      	adds	r2, r7, #0
100017fc:	320f      	adds	r2, #15
100017fe:	7811      	ldrb	r1, [r2, #0]
10001800:	1c3a      	adds	r2, r7, #0
10001802:	3217      	adds	r2, #23
10001804:	7812      	ldrb	r2, [r2, #0]
10001806:	00d2      	lsls	r2, r2, #3
10001808:	3203      	adds	r2, #3
1000180a:	1c08      	adds	r0, r1, #0
1000180c:	4090      	lsls	r0, r2
1000180e:	1c02      	adds	r2, r0, #0
10001810:	43d2      	mvns	r2, r2
10001812:	401a      	ands	r2, r3
10001814:	693b      	ldr	r3, [r7, #16]
10001816:	619a      	str	r2, [r3, #24]
10001818:	e021      	b.n	1000185e <SPI001_lClearPortRegs+0x122>
 	} 
 	else if ((MTSRPin > 11U) && (MTSRPin < 16U)) 
1000181a:	1c3b      	adds	r3, r7, #0
1000181c:	3317      	adds	r3, #23
1000181e:	781b      	ldrb	r3, [r3, #0]
10001820:	2b0b      	cmp	r3, #11
10001822:	d91c      	bls.n	1000185e <SPI001_lClearPortRegs+0x122>
10001824:	1c3b      	adds	r3, r7, #0
10001826:	3317      	adds	r3, #23
10001828:	781b      	ldrb	r3, [r3, #0]
1000182a:	2b0f      	cmp	r3, #15
1000182c:	d817      	bhi.n	1000185e <SPI001_lClearPortRegs+0x122>
 	{
 	  MTSRPin = MTSRPin - 12U;
1000182e:	1c3b      	adds	r3, r7, #0
10001830:	3317      	adds	r3, #23
10001832:	1c3a      	adds	r2, r7, #0
10001834:	3217      	adds	r2, #23
10001836:	7812      	ldrb	r2, [r2, #0]
10001838:	3a0c      	subs	r2, #12
1000183a:	701a      	strb	r2, [r3, #0]
	  MTSR_PortRegs->IOCR12 &= ~((uint32_t)Msk_IOCR << (3U + (MTSRPin * 8U)));
1000183c:	693b      	ldr	r3, [r7, #16]
1000183e:	69db      	ldr	r3, [r3, #28]
10001840:	1c3a      	adds	r2, r7, #0
10001842:	320f      	adds	r2, #15
10001844:	7811      	ldrb	r1, [r2, #0]
10001846:	1c3a      	adds	r2, r7, #0
10001848:	3217      	adds	r2, #23
1000184a:	7812      	ldrb	r2, [r2, #0]
1000184c:	00d2      	lsls	r2, r2, #3
1000184e:	3203      	adds	r2, #3
10001850:	1c08      	adds	r0, r1, #0
10001852:	4090      	lsls	r0, r2
10001854:	1c02      	adds	r2, r0, #0
10001856:	43d2      	mvns	r2, r2
10001858:	401a      	ands	r2, r3
1000185a:	693b      	ldr	r3, [r7, #16]
1000185c:	61da      	str	r2, [r3, #28]
	}
 	else
 	{
 	  /* Do Nothing */
 	}
}
1000185e:	46bd      	mov	sp, r7
10001860:	b006      	add	sp, #24
10001862:	bd80      	pop	{r7, pc}

10001864 <SPI001_lMTSR2_Modfn>:

/* Modify the MTSR2HW_PortRegs for full duplex operation */
void SPI001_lMTSR2_Modfn(const SPI001_HandleType* Handle)
{
10001864:	b580      	push	{r7, lr}
10001866:	b086      	sub	sp, #24
10001868:	af00      	add	r7, sp, #0
1000186a:	6078      	str	r0, [r7, #4]
	uint8_t MTSR2_HWPin = Handle->PinHandle->Pin_Num[2];
1000186c:	687b      	ldr	r3, [r7, #4]
1000186e:	69da      	ldr	r2, [r3, #28]
10001870:	1c3b      	adds	r3, r7, #0
10001872:	3317      	adds	r3, #23
10001874:	7992      	ldrb	r2, [r2, #6]
10001876:	701a      	strb	r2, [r3, #0]
	SPI001_PORTS_TypeDef* MTSR2HW_PortRegs = Handle->PinHandle->PinPortRegs[2];
10001878:	687b      	ldr	r3, [r7, #4]
1000187a:	69db      	ldr	r3, [r3, #28]
1000187c:	691b      	ldr	r3, [r3, #16]
1000187e:	613b      	str	r3, [r7, #16]
	uint8_t Msk_OE = 0x18U;
10001880:	1c3b      	adds	r3, r7, #0
10001882:	330f      	adds	r3, #15
10001884:	2218      	movs	r2, #24
10001886:	701a      	strb	r2, [r3, #0]

  if(MTSR2_HWPin < 4U) 
10001888:	1c3b      	adds	r3, r7, #0
1000188a:	3317      	adds	r3, #23
1000188c:	781b      	ldrb	r3, [r3, #0]
1000188e:	2b03      	cmp	r3, #3
10001890:	d811      	bhi.n	100018b6 <SPI001_lMTSR2_Modfn+0x52>
  {
    MTSR2HW_PortRegs->IOCR0 &= ~((uint32_t)Msk_OE << (3U+(MTSR2_HWPin*8U)));
10001892:	693b      	ldr	r3, [r7, #16]
10001894:	691b      	ldr	r3, [r3, #16]
10001896:	1c3a      	adds	r2, r7, #0
10001898:	320f      	adds	r2, #15
1000189a:	7811      	ldrb	r1, [r2, #0]
1000189c:	1c3a      	adds	r2, r7, #0
1000189e:	3217      	adds	r2, #23
100018a0:	7812      	ldrb	r2, [r2, #0]
100018a2:	00d2      	lsls	r2, r2, #3
100018a4:	3203      	adds	r2, #3
100018a6:	1c08      	adds	r0, r1, #0
100018a8:	4090      	lsls	r0, r2
100018aa:	1c02      	adds	r2, r0, #0
100018ac:	43d2      	mvns	r2, r2
100018ae:	401a      	ands	r2, r3
100018b0:	693b      	ldr	r3, [r7, #16]
100018b2:	611a      	str	r2, [r3, #16]
100018b4:	e067      	b.n	10001986 <SPI001_lMTSR2_Modfn+0x122>
  }
  else if ((MTSR2_HWPin > 3U) && (MTSR2_HWPin < 8U)) 
100018b6:	1c3b      	adds	r3, r7, #0
100018b8:	3317      	adds	r3, #23
100018ba:	781b      	ldrb	r3, [r3, #0]
100018bc:	2b03      	cmp	r3, #3
100018be:	d91d      	bls.n	100018fc <SPI001_lMTSR2_Modfn+0x98>
100018c0:	1c3b      	adds	r3, r7, #0
100018c2:	3317      	adds	r3, #23
100018c4:	781b      	ldrb	r3, [r3, #0]
100018c6:	2b07      	cmp	r3, #7
100018c8:	d818      	bhi.n	100018fc <SPI001_lMTSR2_Modfn+0x98>
  {
    MTSR2_HWPin = MTSR2_HWPin - 4U;
100018ca:	1c3b      	adds	r3, r7, #0
100018cc:	3317      	adds	r3, #23
100018ce:	1c3a      	adds	r2, r7, #0
100018d0:	3217      	adds	r2, #23
100018d2:	7812      	ldrb	r2, [r2, #0]
100018d4:	3a04      	subs	r2, #4
100018d6:	701a      	strb	r2, [r3, #0]
    MTSR2HW_PortRegs->IOCR4 &= ~((uint32_t)Msk_OE << (3U+(MTSR2_HWPin*8U)));
100018d8:	693b      	ldr	r3, [r7, #16]
100018da:	695b      	ldr	r3, [r3, #20]
100018dc:	1c3a      	adds	r2, r7, #0
100018de:	320f      	adds	r2, #15
100018e0:	7811      	ldrb	r1, [r2, #0]
100018e2:	1c3a      	adds	r2, r7, #0
100018e4:	3217      	adds	r2, #23
100018e6:	7812      	ldrb	r2, [r2, #0]
100018e8:	00d2      	lsls	r2, r2, #3
100018ea:	3203      	adds	r2, #3
100018ec:	1c08      	adds	r0, r1, #0
100018ee:	4090      	lsls	r0, r2
100018f0:	1c02      	adds	r2, r0, #0
100018f2:	43d2      	mvns	r2, r2
100018f4:	401a      	ands	r2, r3
100018f6:	693b      	ldr	r3, [r7, #16]
100018f8:	615a      	str	r2, [r3, #20]
100018fa:	e044      	b.n	10001986 <SPI001_lMTSR2_Modfn+0x122>
  } 
  else if ((MTSR2_HWPin > 7U) && (MTSR2_HWPin < 12U)) 
100018fc:	1c3b      	adds	r3, r7, #0
100018fe:	3317      	adds	r3, #23
10001900:	781b      	ldrb	r3, [r3, #0]
10001902:	2b07      	cmp	r3, #7
10001904:	d91d      	bls.n	10001942 <SPI001_lMTSR2_Modfn+0xde>
10001906:	1c3b      	adds	r3, r7, #0
10001908:	3317      	adds	r3, #23
1000190a:	781b      	ldrb	r3, [r3, #0]
1000190c:	2b0b      	cmp	r3, #11
1000190e:	d818      	bhi.n	10001942 <SPI001_lMTSR2_Modfn+0xde>
  {
    MTSR2_HWPin = MTSR2_HWPin - 8U;
10001910:	1c3b      	adds	r3, r7, #0
10001912:	3317      	adds	r3, #23
10001914:	1c3a      	adds	r2, r7, #0
10001916:	3217      	adds	r2, #23
10001918:	7812      	ldrb	r2, [r2, #0]
1000191a:	3a08      	subs	r2, #8
1000191c:	701a      	strb	r2, [r3, #0]
    MTSR2HW_PortRegs->IOCR8 &= ~((uint32_t)Msk_OE << (3U+(MTSR2_HWPin*8U)));
1000191e:	693b      	ldr	r3, [r7, #16]
10001920:	699b      	ldr	r3, [r3, #24]
10001922:	1c3a      	adds	r2, r7, #0
10001924:	320f      	adds	r2, #15
10001926:	7811      	ldrb	r1, [r2, #0]
10001928:	1c3a      	adds	r2, r7, #0
1000192a:	3217      	adds	r2, #23
1000192c:	7812      	ldrb	r2, [r2, #0]
1000192e:	00d2      	lsls	r2, r2, #3
10001930:	3203      	adds	r2, #3
10001932:	1c08      	adds	r0, r1, #0
10001934:	4090      	lsls	r0, r2
10001936:	1c02      	adds	r2, r0, #0
10001938:	43d2      	mvns	r2, r2
1000193a:	401a      	ands	r2, r3
1000193c:	693b      	ldr	r3, [r7, #16]
1000193e:	619a      	str	r2, [r3, #24]
10001940:	e021      	b.n	10001986 <SPI001_lMTSR2_Modfn+0x122>
  } 
  else if ((MTSR2_HWPin > 11U) && (MTSR2_HWPin < 16U)) 
10001942:	1c3b      	adds	r3, r7, #0
10001944:	3317      	adds	r3, #23
10001946:	781b      	ldrb	r3, [r3, #0]
10001948:	2b0b      	cmp	r3, #11
1000194a:	d91c      	bls.n	10001986 <SPI001_lMTSR2_Modfn+0x122>
1000194c:	1c3b      	adds	r3, r7, #0
1000194e:	3317      	adds	r3, #23
10001950:	781b      	ldrb	r3, [r3, #0]
10001952:	2b0f      	cmp	r3, #15
10001954:	d817      	bhi.n	10001986 <SPI001_lMTSR2_Modfn+0x122>
  {
    MTSR2_HWPin = MTSR2_HWPin - 12U;
10001956:	1c3b      	adds	r3, r7, #0
10001958:	3317      	adds	r3, #23
1000195a:	1c3a      	adds	r2, r7, #0
1000195c:	3217      	adds	r2, #23
1000195e:	7812      	ldrb	r2, [r2, #0]
10001960:	3a0c      	subs	r2, #12
10001962:	701a      	strb	r2, [r3, #0]
    MTSR2HW_PortRegs->IOCR12 &= ~((uint32_t)Msk_OE << (3U+(MTSR2_HWPin*8U)));
10001964:	693b      	ldr	r3, [r7, #16]
10001966:	69db      	ldr	r3, [r3, #28]
10001968:	1c3a      	adds	r2, r7, #0
1000196a:	320f      	adds	r2, #15
1000196c:	7811      	ldrb	r1, [r2, #0]
1000196e:	1c3a      	adds	r2, r7, #0
10001970:	3217      	adds	r2, #23
10001972:	7812      	ldrb	r2, [r2, #0]
10001974:	00d2      	lsls	r2, r2, #3
10001976:	3203      	adds	r2, #3
10001978:	1c08      	adds	r0, r1, #0
1000197a:	4090      	lsls	r0, r2
1000197c:	1c02      	adds	r2, r0, #0
1000197e:	43d2      	mvns	r2, r2
10001980:	401a      	ands	r2, r3
10001982:	693b      	ldr	r3, [r7, #16]
10001984:	61da      	str	r2, [r3, #28]
  }
  else 
  {
    /* Do Nothing */	
  }
}
10001986:	46bd      	mov	sp, r7
10001988:	b006      	add	sp, #24
1000198a:	bd80      	pop	{r7, pc}

1000198c <SPI001_lMTSR3_Modfn>:

/* Modify the MTSR3HW_PortRegs for full duplex operation */
void SPI001_lMTSR3_Modfn(const SPI001_HandleType* Handle)
{
1000198c:	b580      	push	{r7, lr}
1000198e:	b086      	sub	sp, #24
10001990:	af00      	add	r7, sp, #0
10001992:	6078      	str	r0, [r7, #4]
	uint8_t MTSR3_HWPin = Handle->PinHandle->Pin_Num[3];
10001994:	687b      	ldr	r3, [r7, #4]
10001996:	69da      	ldr	r2, [r3, #28]
10001998:	1c3b      	adds	r3, r7, #0
1000199a:	3317      	adds	r3, #23
1000199c:	79d2      	ldrb	r2, [r2, #7]
1000199e:	701a      	strb	r2, [r3, #0]
	SPI001_PORTS_TypeDef* MTSR3HW_PortRegs = Handle->PinHandle->PinPortRegs[3];
100019a0:	687b      	ldr	r3, [r7, #4]
100019a2:	69db      	ldr	r3, [r3, #28]
100019a4:	695b      	ldr	r3, [r3, #20]
100019a6:	613b      	str	r3, [r7, #16]
	uint8_t Msk_OE = 0x18U;
100019a8:	1c3b      	adds	r3, r7, #0
100019aa:	330f      	adds	r3, #15
100019ac:	2218      	movs	r2, #24
100019ae:	701a      	strb	r2, [r3, #0]

  if(MTSR3_HWPin < 4U) 
100019b0:	1c3b      	adds	r3, r7, #0
100019b2:	3317      	adds	r3, #23
100019b4:	781b      	ldrb	r3, [r3, #0]
100019b6:	2b03      	cmp	r3, #3
100019b8:	d811      	bhi.n	100019de <SPI001_lMTSR3_Modfn+0x52>
  {
    MTSR3HW_PortRegs->IOCR0 &= ~((uint32_t)Msk_OE << (3U+(MTSR3_HWPin*8U)));
100019ba:	693b      	ldr	r3, [r7, #16]
100019bc:	691b      	ldr	r3, [r3, #16]
100019be:	1c3a      	adds	r2, r7, #0
100019c0:	320f      	adds	r2, #15
100019c2:	7811      	ldrb	r1, [r2, #0]
100019c4:	1c3a      	adds	r2, r7, #0
100019c6:	3217      	adds	r2, #23
100019c8:	7812      	ldrb	r2, [r2, #0]
100019ca:	00d2      	lsls	r2, r2, #3
100019cc:	3203      	adds	r2, #3
100019ce:	1c08      	adds	r0, r1, #0
100019d0:	4090      	lsls	r0, r2
100019d2:	1c02      	adds	r2, r0, #0
100019d4:	43d2      	mvns	r2, r2
100019d6:	401a      	ands	r2, r3
100019d8:	693b      	ldr	r3, [r7, #16]
100019da:	611a      	str	r2, [r3, #16]
100019dc:	e067      	b.n	10001aae <SPI001_lMTSR3_Modfn+0x122>
  }
  else if ((MTSR3_HWPin > 3U) && (MTSR3_HWPin < 8U)) 
100019de:	1c3b      	adds	r3, r7, #0
100019e0:	3317      	adds	r3, #23
100019e2:	781b      	ldrb	r3, [r3, #0]
100019e4:	2b03      	cmp	r3, #3
100019e6:	d91d      	bls.n	10001a24 <SPI001_lMTSR3_Modfn+0x98>
100019e8:	1c3b      	adds	r3, r7, #0
100019ea:	3317      	adds	r3, #23
100019ec:	781b      	ldrb	r3, [r3, #0]
100019ee:	2b07      	cmp	r3, #7
100019f0:	d818      	bhi.n	10001a24 <SPI001_lMTSR3_Modfn+0x98>
  {
    MTSR3_HWPin = MTSR3_HWPin - 4U;
100019f2:	1c3b      	adds	r3, r7, #0
100019f4:	3317      	adds	r3, #23
100019f6:	1c3a      	adds	r2, r7, #0
100019f8:	3217      	adds	r2, #23
100019fa:	7812      	ldrb	r2, [r2, #0]
100019fc:	3a04      	subs	r2, #4
100019fe:	701a      	strb	r2, [r3, #0]
    MTSR3HW_PortRegs->IOCR4 &= ~((uint32_t)Msk_OE << (3U+(MTSR3_HWPin*8U)));
10001a00:	693b      	ldr	r3, [r7, #16]
10001a02:	695b      	ldr	r3, [r3, #20]
10001a04:	1c3a      	adds	r2, r7, #0
10001a06:	320f      	adds	r2, #15
10001a08:	7811      	ldrb	r1, [r2, #0]
10001a0a:	1c3a      	adds	r2, r7, #0
10001a0c:	3217      	adds	r2, #23
10001a0e:	7812      	ldrb	r2, [r2, #0]
10001a10:	00d2      	lsls	r2, r2, #3
10001a12:	3203      	adds	r2, #3
10001a14:	1c08      	adds	r0, r1, #0
10001a16:	4090      	lsls	r0, r2
10001a18:	1c02      	adds	r2, r0, #0
10001a1a:	43d2      	mvns	r2, r2
10001a1c:	401a      	ands	r2, r3
10001a1e:	693b      	ldr	r3, [r7, #16]
10001a20:	615a      	str	r2, [r3, #20]
10001a22:	e044      	b.n	10001aae <SPI001_lMTSR3_Modfn+0x122>
  } 
  else if ((MTSR3_HWPin > 7U) && (MTSR3_HWPin < 12U))
10001a24:	1c3b      	adds	r3, r7, #0
10001a26:	3317      	adds	r3, #23
10001a28:	781b      	ldrb	r3, [r3, #0]
10001a2a:	2b07      	cmp	r3, #7
10001a2c:	d91d      	bls.n	10001a6a <SPI001_lMTSR3_Modfn+0xde>
10001a2e:	1c3b      	adds	r3, r7, #0
10001a30:	3317      	adds	r3, #23
10001a32:	781b      	ldrb	r3, [r3, #0]
10001a34:	2b0b      	cmp	r3, #11
10001a36:	d818      	bhi.n	10001a6a <SPI001_lMTSR3_Modfn+0xde>
  {
    MTSR3_HWPin = MTSR3_HWPin - 8U;
10001a38:	1c3b      	adds	r3, r7, #0
10001a3a:	3317      	adds	r3, #23
10001a3c:	1c3a      	adds	r2, r7, #0
10001a3e:	3217      	adds	r2, #23
10001a40:	7812      	ldrb	r2, [r2, #0]
10001a42:	3a08      	subs	r2, #8
10001a44:	701a      	strb	r2, [r3, #0]
    MTSR3HW_PortRegs->IOCR8 &= ~((uint32_t)Msk_OE << (3U+(MTSR3_HWPin*8U)));
10001a46:	693b      	ldr	r3, [r7, #16]
10001a48:	699b      	ldr	r3, [r3, #24]
10001a4a:	1c3a      	adds	r2, r7, #0
10001a4c:	320f      	adds	r2, #15
10001a4e:	7811      	ldrb	r1, [r2, #0]
10001a50:	1c3a      	adds	r2, r7, #0
10001a52:	3217      	adds	r2, #23
10001a54:	7812      	ldrb	r2, [r2, #0]
10001a56:	00d2      	lsls	r2, r2, #3
10001a58:	3203      	adds	r2, #3
10001a5a:	1c08      	adds	r0, r1, #0
10001a5c:	4090      	lsls	r0, r2
10001a5e:	1c02      	adds	r2, r0, #0
10001a60:	43d2      	mvns	r2, r2
10001a62:	401a      	ands	r2, r3
10001a64:	693b      	ldr	r3, [r7, #16]
10001a66:	619a      	str	r2, [r3, #24]
10001a68:	e021      	b.n	10001aae <SPI001_lMTSR3_Modfn+0x122>
  } 
  else if ((MTSR3_HWPin > 11U) && (MTSR3_HWPin < 16U)) 
10001a6a:	1c3b      	adds	r3, r7, #0
10001a6c:	3317      	adds	r3, #23
10001a6e:	781b      	ldrb	r3, [r3, #0]
10001a70:	2b0b      	cmp	r3, #11
10001a72:	d91c      	bls.n	10001aae <SPI001_lMTSR3_Modfn+0x122>
10001a74:	1c3b      	adds	r3, r7, #0
10001a76:	3317      	adds	r3, #23
10001a78:	781b      	ldrb	r3, [r3, #0]
10001a7a:	2b0f      	cmp	r3, #15
10001a7c:	d817      	bhi.n	10001aae <SPI001_lMTSR3_Modfn+0x122>
  {
    MTSR3_HWPin = MTSR3_HWPin - 12U;
10001a7e:	1c3b      	adds	r3, r7, #0
10001a80:	3317      	adds	r3, #23
10001a82:	1c3a      	adds	r2, r7, #0
10001a84:	3217      	adds	r2, #23
10001a86:	7812      	ldrb	r2, [r2, #0]
10001a88:	3a0c      	subs	r2, #12
10001a8a:	701a      	strb	r2, [r3, #0]
    MTSR3HW_PortRegs->IOCR12 &= ~((uint32_t)Msk_OE << (3U+(MTSR3_HWPin*8U)));
10001a8c:	693b      	ldr	r3, [r7, #16]
10001a8e:	69db      	ldr	r3, [r3, #28]
10001a90:	1c3a      	adds	r2, r7, #0
10001a92:	320f      	adds	r2, #15
10001a94:	7811      	ldrb	r1, [r2, #0]
10001a96:	1c3a      	adds	r2, r7, #0
10001a98:	3217      	adds	r2, #23
10001a9a:	7812      	ldrb	r2, [r2, #0]
10001a9c:	00d2      	lsls	r2, r2, #3
10001a9e:	3203      	adds	r2, #3
10001aa0:	1c08      	adds	r0, r1, #0
10001aa2:	4090      	lsls	r0, r2
10001aa4:	1c02      	adds	r2, r0, #0
10001aa6:	43d2      	mvns	r2, r2
10001aa8:	401a      	ands	r2, r3
10001aaa:	693b      	ldr	r3, [r7, #16]
10001aac:	61da      	str	r2, [r3, #28]
  }
  else 
  {
    /* Do Nothing */
  }
}
10001aae:	46bd      	mov	sp, r7
10001ab0:	b006      	add	sp, #24
10001ab2:	bd80      	pop	{r7, pc}

10001ab4 <SPI001_lPinModfn_Fullduplex>:

/* Modify the MTSR/MRST Pin PortRegs for full duplex operation */
void SPI001_lPinModfn_Fullduplex(const SPI001_HandleType* Handle)
{
10001ab4:	b580      	push	{r7, lr}
10001ab6:	b088      	sub	sp, #32
10001ab8:	af00      	add	r7, sp, #0
10001aba:	6078      	str	r0, [r7, #4]
	USIC_CH_TypeDef* USICRegs = Handle->USICRegs;
10001abc:	687b      	ldr	r3, [r7, #4]
10001abe:	681b      	ldr	r3, [r3, #0]
10001ac0:	61fb      	str	r3, [r7, #28]
	SPI001_PORTS_TypeDef* MTSR_PortRegs = Handle->PinHandle->PinPortRegs[0];
10001ac2:	687b      	ldr	r3, [r7, #4]
10001ac4:	69db      	ldr	r3, [r3, #28]
10001ac6:	689b      	ldr	r3, [r3, #8]
10001ac8:	61bb      	str	r3, [r7, #24]
	SPI001_PORTS_TypeDef* MRST_PortRegs = Handle->PinHandle->PinPortRegs[1];
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	69db      	ldr	r3, [r3, #28]
10001ace:	68db      	ldr	r3, [r3, #12]
10001ad0:	617b      	str	r3, [r7, #20]
	uint8_t MRSTPin_DSEL = Handle->PinHandle->MRST_DSEL;
10001ad2:	687b      	ldr	r3, [r7, #4]
10001ad4:	69da      	ldr	r2, [r3, #28]
10001ad6:	1c3b      	adds	r3, r7, #0
10001ad8:	3313      	adds	r3, #19
10001ada:	7e12      	ldrb	r2, [r2, #24]
10001adc:	701a      	strb	r2, [r3, #0]
	uint8_t MTSRPin_IOCR = Handle->PinHandle->MTSR_IOCR;
10001ade:	687b      	ldr	r3, [r7, #4]
10001ae0:	69da      	ldr	r2, [r3, #28]
10001ae2:	1c3b      	adds	r3, r7, #0
10001ae4:	3312      	adds	r3, #18
10001ae6:	7e52      	ldrb	r2, [r2, #25]
10001ae8:	701a      	strb	r2, [r3, #0]
	uint8_t MTSRPin = Handle->PinHandle->Pin_Num[0];
10001aea:	687b      	ldr	r3, [r7, #4]
10001aec:	69da      	ldr	r2, [r3, #28]
10001aee:	1c3b      	adds	r3, r7, #0
10001af0:	3311      	adds	r3, #17
10001af2:	7912      	ldrb	r2, [r2, #4]
10001af4:	701a      	strb	r2, [r3, #0]
	uint8_t MRSTPin = Handle->PinHandle->Pin_Num[1];
10001af6:	687b      	ldr	r3, [r7, #4]
10001af8:	69da      	ldr	r2, [r3, #28]
10001afa:	1c3b      	adds	r3, r7, #0
10001afc:	3310      	adds	r3, #16
10001afe:	7952      	ldrb	r2, [r2, #5]
10001b00:	701a      	strb	r2, [r3, #0]
	uint8_t MTSR2_HWPin = Handle->PinHandle->Pin_Num[2];
10001b02:	687b      	ldr	r3, [r7, #4]
10001b04:	69da      	ldr	r2, [r3, #28]
10001b06:	1c3b      	adds	r3, r7, #0
10001b08:	330f      	adds	r3, #15
10001b0a:	7992      	ldrb	r2, [r2, #6]
10001b0c:	701a      	strb	r2, [r3, #0]
	uint8_t MTSR2_HWPort = Handle->PinHandle->Port_Num[2];
10001b0e:	687b      	ldr	r3, [r7, #4]
10001b10:	69da      	ldr	r2, [r3, #28]
10001b12:	1c3b      	adds	r3, r7, #0
10001b14:	330e      	adds	r3, #14
10001b16:	7892      	ldrb	r2, [r2, #2]
10001b18:	701a      	strb	r2, [r3, #0]
	uint8_t Pin0 = 0x00U;
10001b1a:	1c3b      	adds	r3, r7, #0
10001b1c:	330d      	adds	r3, #13
10001b1e:	2200      	movs	r2, #0
10001b20:	701a      	strb	r2, [r3, #0]
	uint8_t Msk_HWSEL = 0x03U;
10001b22:	1c3b      	adds	r3, r7, #0
10001b24:	330c      	adds	r3, #12
10001b26:	2203      	movs	r2, #3
10001b28:	701a      	strb	r2, [r3, #0]

	Pin0 = MTSRPin;
10001b2a:	1c3b      	adds	r3, r7, #0
10001b2c:	330d      	adds	r3, #13
10001b2e:	1c3a      	adds	r2, r7, #0
10001b30:	3211      	adds	r2, #17
10001b32:	7812      	ldrb	r2, [r2, #0]
10001b34:	701a      	strb	r2, [r3, #0]
  if(!((MTSR2_HWPin == 0x00U) && (MTSR2_HWPort == 0x00U)))
10001b36:	1c3b      	adds	r3, r7, #0
10001b38:	330f      	adds	r3, #15
10001b3a:	781b      	ldrb	r3, [r3, #0]
10001b3c:	2b00      	cmp	r3, #0
10001b3e:	d104      	bne.n	10001b4a <SPI001_lPinModfn_Fullduplex+0x96>
10001b40:	1c3b      	adds	r3, r7, #0
10001b42:	330e      	adds	r3, #14
10001b44:	781b      	ldrb	r3, [r3, #0]
10001b46:	2b00      	cmp	r3, #0
10001b48:	d007      	beq.n	10001b5a <SPI001_lPinModfn_Fullduplex+0xa6>
	{
    	SPI001_lMTSR2_Modfn(Handle);
10001b4a:	687b      	ldr	r3, [r7, #4]
10001b4c:	1c18      	adds	r0, r3, #0
10001b4e:	f7ff fe89 	bl	10001864 <SPI001_lMTSR2_Modfn>
    	SPI001_lMTSR3_Modfn(Handle);
10001b52:	687b      	ldr	r3, [r7, #4]
10001b54:	1c18      	adds	r0, r3, #0
10001b56:	f7ff ff19 	bl	1000198c <SPI001_lMTSR3_Modfn>
	}
  else
  {
    /* Do Nothing */
  }
  MTSR_PortRegs->HWSEL &= ~((uint32_t)Msk_HWSEL << (MTSRPin * 2U));
10001b5a:	69bb      	ldr	r3, [r7, #24]
10001b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001b5e:	1c3a      	adds	r2, r7, #0
10001b60:	320c      	adds	r2, #12
10001b62:	7811      	ldrb	r1, [r2, #0]
10001b64:	1c3a      	adds	r2, r7, #0
10001b66:	3211      	adds	r2, #17
10001b68:	7812      	ldrb	r2, [r2, #0]
10001b6a:	0052      	lsls	r2, r2, #1
10001b6c:	1c08      	adds	r0, r1, #0
10001b6e:	4090      	lsls	r0, r2
10001b70:	1c02      	adds	r2, r0, #0
10001b72:	43d2      	mvns	r2, r2
10001b74:	401a      	ands	r2, r3
10001b76:	69bb      	ldr	r3, [r7, #24]
10001b78:	675a      	str	r2, [r3, #116]	; 0x74
  MRST_PortRegs->HWSEL &= ~((uint32_t)Msk_HWSEL << (MRSTPin * 2U));
10001b7a:	697b      	ldr	r3, [r7, #20]
10001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001b7e:	1c3a      	adds	r2, r7, #0
10001b80:	320c      	adds	r2, #12
10001b82:	7811      	ldrb	r1, [r2, #0]
10001b84:	1c3a      	adds	r2, r7, #0
10001b86:	3210      	adds	r2, #16
10001b88:	7812      	ldrb	r2, [r2, #0]
10001b8a:	0052      	lsls	r2, r2, #1
10001b8c:	1c08      	adds	r0, r1, #0
10001b8e:	4090      	lsls	r0, r2
10001b90:	1c02      	adds	r2, r0, #0
10001b92:	43d2      	mvns	r2, r2
10001b94:	401a      	ands	r2, r3
10001b96:	697b      	ldr	r3, [r7, #20]
10001b98:	675a      	str	r2, [r3, #116]	; 0x74
  WR_REG(USICRegs->DX0CR, (uint32_t)USIC_CH_DX0CR_DSEL_Msk, \
10001b9a:	1c3b      	adds	r3, r7, #0
10001b9c:	3313      	adds	r3, #19
10001b9e:	781a      	ldrb	r2, [r3, #0]
10001ba0:	2307      	movs	r3, #7
10001ba2:	401a      	ands	r2, r3
10001ba4:	69fb      	ldr	r3, [r7, #28]
10001ba6:	69db      	ldr	r3, [r3, #28]
10001ba8:	2107      	movs	r1, #7
10001baa:	438b      	bics	r3, r1
10001bac:	431a      	orrs	r2, r3
10001bae:	69fb      	ldr	r3, [r7, #28]
10001bb0:	61da      	str	r2, [r3, #28]
                         USIC_CH_DX0CR_DSEL_Pos,(uint32_t)MRSTPin_DSEL);
  if(Pin0 < 4U) 
10001bb2:	1c3b      	adds	r3, r7, #0
10001bb4:	330d      	adds	r3, #13
10001bb6:	781b      	ldrb	r3, [r3, #0]
10001bb8:	2b03      	cmp	r3, #3
10001bba:	d810      	bhi.n	10001bde <SPI001_lPinModfn_Fullduplex+0x12a>
  {
    MTSR_PortRegs->IOCR0 |= ((uint32_t)MTSRPin_IOCR << (3U + (Pin0 * 8U)));
10001bbc:	69bb      	ldr	r3, [r7, #24]
10001bbe:	691a      	ldr	r2, [r3, #16]
10001bc0:	1c3b      	adds	r3, r7, #0
10001bc2:	3312      	adds	r3, #18
10001bc4:	7819      	ldrb	r1, [r3, #0]
10001bc6:	1c3b      	adds	r3, r7, #0
10001bc8:	330d      	adds	r3, #13
10001bca:	781b      	ldrb	r3, [r3, #0]
10001bcc:	00db      	lsls	r3, r3, #3
10001bce:	3303      	adds	r3, #3
10001bd0:	1c08      	adds	r0, r1, #0
10001bd2:	4098      	lsls	r0, r3
10001bd4:	1c03      	adds	r3, r0, #0
10001bd6:	431a      	orrs	r2, r3
10001bd8:	69bb      	ldr	r3, [r7, #24]
10001bda:	611a      	str	r2, [r3, #16]
10001bdc:	e064      	b.n	10001ca8 <SPI001_lPinModfn_Fullduplex+0x1f4>
  }
  else if ((Pin0 > 3U) && (Pin0 < 8U)) 
10001bde:	1c3b      	adds	r3, r7, #0
10001be0:	330d      	adds	r3, #13
10001be2:	781b      	ldrb	r3, [r3, #0]
10001be4:	2b03      	cmp	r3, #3
10001be6:	d91c      	bls.n	10001c22 <SPI001_lPinModfn_Fullduplex+0x16e>
10001be8:	1c3b      	adds	r3, r7, #0
10001bea:	330d      	adds	r3, #13
10001bec:	781b      	ldrb	r3, [r3, #0]
10001bee:	2b07      	cmp	r3, #7
10001bf0:	d817      	bhi.n	10001c22 <SPI001_lPinModfn_Fullduplex+0x16e>
  {
    Pin0 = Pin0 - 4U;
10001bf2:	1c3b      	adds	r3, r7, #0
10001bf4:	330d      	adds	r3, #13
10001bf6:	1c3a      	adds	r2, r7, #0
10001bf8:	320d      	adds	r2, #13
10001bfa:	7812      	ldrb	r2, [r2, #0]
10001bfc:	3a04      	subs	r2, #4
10001bfe:	701a      	strb	r2, [r3, #0]
    MTSR_PortRegs->IOCR4 |= ((uint32_t)MTSRPin_IOCR << (3U + (Pin0 * 8U)));
10001c00:	69bb      	ldr	r3, [r7, #24]
10001c02:	695a      	ldr	r2, [r3, #20]
10001c04:	1c3b      	adds	r3, r7, #0
10001c06:	3312      	adds	r3, #18
10001c08:	7819      	ldrb	r1, [r3, #0]
10001c0a:	1c3b      	adds	r3, r7, #0
10001c0c:	330d      	adds	r3, #13
10001c0e:	781b      	ldrb	r3, [r3, #0]
10001c10:	00db      	lsls	r3, r3, #3
10001c12:	3303      	adds	r3, #3
10001c14:	1c08      	adds	r0, r1, #0
10001c16:	4098      	lsls	r0, r3
10001c18:	1c03      	adds	r3, r0, #0
10001c1a:	431a      	orrs	r2, r3
10001c1c:	69bb      	ldr	r3, [r7, #24]
10001c1e:	615a      	str	r2, [r3, #20]
10001c20:	e042      	b.n	10001ca8 <SPI001_lPinModfn_Fullduplex+0x1f4>
  } 
  else if ((Pin0 > 7U) && (Pin0 < 12U)) 
10001c22:	1c3b      	adds	r3, r7, #0
10001c24:	330d      	adds	r3, #13
10001c26:	781b      	ldrb	r3, [r3, #0]
10001c28:	2b07      	cmp	r3, #7
10001c2a:	d91c      	bls.n	10001c66 <SPI001_lPinModfn_Fullduplex+0x1b2>
10001c2c:	1c3b      	adds	r3, r7, #0
10001c2e:	330d      	adds	r3, #13
10001c30:	781b      	ldrb	r3, [r3, #0]
10001c32:	2b0b      	cmp	r3, #11
10001c34:	d817      	bhi.n	10001c66 <SPI001_lPinModfn_Fullduplex+0x1b2>
  {
    Pin0 = Pin0 - 8U;
10001c36:	1c3b      	adds	r3, r7, #0
10001c38:	330d      	adds	r3, #13
10001c3a:	1c3a      	adds	r2, r7, #0
10001c3c:	320d      	adds	r2, #13
10001c3e:	7812      	ldrb	r2, [r2, #0]
10001c40:	3a08      	subs	r2, #8
10001c42:	701a      	strb	r2, [r3, #0]
    MTSR_PortRegs->IOCR8 |= ((uint32_t)MTSRPin_IOCR << (3U + (Pin0 * 8U)));
10001c44:	69bb      	ldr	r3, [r7, #24]
10001c46:	699a      	ldr	r2, [r3, #24]
10001c48:	1c3b      	adds	r3, r7, #0
10001c4a:	3312      	adds	r3, #18
10001c4c:	7819      	ldrb	r1, [r3, #0]
10001c4e:	1c3b      	adds	r3, r7, #0
10001c50:	330d      	adds	r3, #13
10001c52:	781b      	ldrb	r3, [r3, #0]
10001c54:	00db      	lsls	r3, r3, #3
10001c56:	3303      	adds	r3, #3
10001c58:	1c08      	adds	r0, r1, #0
10001c5a:	4098      	lsls	r0, r3
10001c5c:	1c03      	adds	r3, r0, #0
10001c5e:	431a      	orrs	r2, r3
10001c60:	69bb      	ldr	r3, [r7, #24]
10001c62:	619a      	str	r2, [r3, #24]
10001c64:	e020      	b.n	10001ca8 <SPI001_lPinModfn_Fullduplex+0x1f4>
  } 
  else if ((Pin0 > 11U) && (Pin0 < 16U)) 
10001c66:	1c3b      	adds	r3, r7, #0
10001c68:	330d      	adds	r3, #13
10001c6a:	781b      	ldrb	r3, [r3, #0]
10001c6c:	2b0b      	cmp	r3, #11
10001c6e:	d91b      	bls.n	10001ca8 <SPI001_lPinModfn_Fullduplex+0x1f4>
10001c70:	1c3b      	adds	r3, r7, #0
10001c72:	330d      	adds	r3, #13
10001c74:	781b      	ldrb	r3, [r3, #0]
10001c76:	2b0f      	cmp	r3, #15
10001c78:	d816      	bhi.n	10001ca8 <SPI001_lPinModfn_Fullduplex+0x1f4>
  {
    Pin0 = Pin0 - 12U;
10001c7a:	1c3b      	adds	r3, r7, #0
10001c7c:	330d      	adds	r3, #13
10001c7e:	1c3a      	adds	r2, r7, #0
10001c80:	320d      	adds	r2, #13
10001c82:	7812      	ldrb	r2, [r2, #0]
10001c84:	3a0c      	subs	r2, #12
10001c86:	701a      	strb	r2, [r3, #0]
    MTSR_PortRegs->IOCR12 |= ((uint32_t)MTSRPin_IOCR << (3U + (Pin0 * 8U)));
10001c88:	69bb      	ldr	r3, [r7, #24]
10001c8a:	69da      	ldr	r2, [r3, #28]
10001c8c:	1c3b      	adds	r3, r7, #0
10001c8e:	3312      	adds	r3, #18
10001c90:	7819      	ldrb	r1, [r3, #0]
10001c92:	1c3b      	adds	r3, r7, #0
10001c94:	330d      	adds	r3, #13
10001c96:	781b      	ldrb	r3, [r3, #0]
10001c98:	00db      	lsls	r3, r3, #3
10001c9a:	3303      	adds	r3, #3
10001c9c:	1c08      	adds	r0, r1, #0
10001c9e:	4098      	lsls	r0, r3
10001ca0:	1c03      	adds	r3, r0, #0
10001ca2:	431a      	orrs	r2, r3
10001ca4:	69bb      	ldr	r3, [r7, #24]
10001ca6:	61da      	str	r2, [r3, #28]
  }
  else 
  {
  	/* Do Nothing */
  }
}
10001ca8:	46bd      	mov	sp, r7
10001caa:	b008      	add	sp, #32
10001cac:	bd80      	pop	{r7, pc}
10001cae:	46c0      	nop			; (mov r8, r8)

10001cb0 <SPI001_Init>:
/******************************************************************************
**                      Public Function Definitions                          **
******************************************************************************/
/* Function to initialize SPI app instances configured through UI */
void SPI001_Init(void)
{
10001cb0:	b580      	push	{r7, lr}
10001cb2:	af00      	add	r7, sp, #0
  /* Disable the USIC0 clock gating */
  /* 
   * The disabling of the clock gating is applicable only for
   * XMC4400, XMC4200 and XMC1000 devices.
   */
  SCU_GENERAL->PASSWD = 0x000000C0UL;
10001cb4:	4b12      	ldr	r3, [pc, #72]	; (10001d00 <SPI001_Init+0x50>)
10001cb6:	22c0      	movs	r2, #192	; 0xc0
10001cb8:	625a      	str	r2, [r3, #36]	; 0x24
  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10001cba:	4b12      	ldr	r3, [pc, #72]	; (10001d04 <SPI001_Init+0x54>)
10001cbc:	4a11      	ldr	r2, [pc, #68]	; (10001d04 <SPI001_Init+0x54>)
10001cbe:	6812      	ldr	r2, [r2, #0]
10001cc0:	4911      	ldr	r1, [pc, #68]	; (10001d08 <SPI001_Init+0x58>)
10001cc2:	430a      	orrs	r2, r1
10001cc4:	601a      	str	r2, [r3, #0]
                                    SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10001cc6:	4b0f      	ldr	r3, [pc, #60]	; (10001d04 <SPI001_Init+0x54>)
10001cc8:	4a0e      	ldr	r2, [pc, #56]	; (10001d04 <SPI001_Init+0x54>)
10001cca:	6912      	ldr	r2, [r2, #16]
10001ccc:	2108      	movs	r1, #8
10001cce:	430a      	orrs	r2, r1
10001cd0:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10001cd2:	46c0      	nop			; (mov r8, r8)
10001cd4:	4b0b      	ldr	r3, [pc, #44]	; (10001d04 <SPI001_Init+0x54>)
10001cd6:	681a      	ldr	r2, [r3, #0]
10001cd8:	2380      	movs	r3, #128	; 0x80
10001cda:	05db      	lsls	r3, r3, #23
10001cdc:	4013      	ands	r3, r2
10001cde:	d1f9      	bne.n	10001cd4 <SPI001_Init+0x24>
  {
   ;
  }
  SCU_GENERAL->PASSWD = 0x000000C3UL;       
10001ce0:	4b07      	ldr	r3, [pc, #28]	; (10001d00 <SPI001_Init+0x50>)
10001ce2:	22c3      	movs	r2, #195	; 0xc3
10001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  SPI001_lInit(&SPI001_Handle0, SPI001_Baud_Parameter_Values0);    
10001ce6:	4a09      	ldr	r2, [pc, #36]	; (10001d0c <SPI001_Init+0x5c>)
10001ce8:	4b09      	ldr	r3, [pc, #36]	; (10001d10 <SPI001_Init+0x60>)
10001cea:	1c10      	adds	r0, r2, #0
10001cec:	1c19      	adds	r1, r3, #0
10001cee:	f7ff fb2d 	bl	1000134c <SPI001_lInit>
  /* Configuration of MTSR Pin 2.1 based on User configuration */    
    /* Configuration of MRST Pin 0.15 based on User configuration */
  PORT0->IOCR12 |= ((uint32_t)0 << 27);
10001cf2:	4b08      	ldr	r3, [pc, #32]	; (10001d14 <SPI001_Init+0x64>)
10001cf4:	4a07      	ldr	r2, [pc, #28]	; (10001d14 <SPI001_Init+0x64>)
10001cf6:	69d2      	ldr	r2, [r2, #28]
10001cf8:	61da      	str	r2, [r3, #28]
	     	  
  /* MTSR HW pin not mapped */        
   /* Configuration of Clock Out Pin 2.0 based on User configuration */         
  /* Configuration of ChipSelectA Pin 0.12 based on User configuration */                
}
10001cfa:	46bd      	mov	sp, r7
10001cfc:	bd80      	pop	{r7, pc}
10001cfe:	46c0      	nop			; (mov r8, r8)
10001d00:	40010000 	.word	0x40010000
10001d04:	40010300 	.word	0x40010300
10001d08:	3ff00000 	.word	0x3ff00000
10001d0c:	10003ba0 	.word	0x10003ba0
10001d10:	10003b9c 	.word	0x10003b9c
10001d14:	40040000 	.word	0x40040000

10001d18 <SPI001_DeInit>:

 /* Function provide to reset the App to default values. */
 
void  SPI001_DeInit (const SPI001_HandleType* Handle)
{
10001d18:	b580      	push	{r7, lr}
10001d1a:	b082      	sub	sp, #8
10001d1c:	af00      	add	r7, sp, #0
10001d1e:	6078      	str	r0, [r7, #4]
  /* <<<DD_SPI_API_2>>>*/

  /* Place holder function */      

}
10001d20:	46bd      	mov	sp, r7
10001d22:	b002      	add	sp, #8
10001d24:	bd80      	pop	{r7, pc}
10001d26:	46c0      	nop			; (mov r8, r8)

10001d28 <SPI001_Configure>:
status_t SPI001_Configure
( 
 const SPI001_HandleType* Handle, 
 const SPI001_ConfigType* Config
)
{
10001d28:	b590      	push	{r4, r7, lr}
10001d2a:	b08b      	sub	sp, #44	; 0x2c
10001d2c:	af00      	add	r7, sp, #0
10001d2e:	6078      	str	r0, [r7, #4]
10001d30:	6039      	str	r1, [r7, #0]
	
	uint32_t Brg_PDiv = 0x00U;
10001d32:	2300      	movs	r3, #0
10001d34:	613b      	str	r3, [r7, #16]
	uint32_t Fdr_Step = 0x00U;
10001d36:	2300      	movs	r3, #0
10001d38:	60fb      	str	r3, [r7, #12]
	USIC_CH_TypeDef* USICRegs = Handle->USICRegs;
10001d3a:	687b      	ldr	r3, [r7, #4]
10001d3c:	681b      	ldr	r3, [r3, #0]
10001d3e:	623b      	str	r3, [r7, #32]
	SPI001_PORTS_TypeDef* MTSR_PortRegs = Handle->PinHandle->PinPortRegs[0];
10001d40:	687b      	ldr	r3, [r7, #4]
10001d42:	69db      	ldr	r3, [r3, #28]
10001d44:	689b      	ldr	r3, [r3, #8]
10001d46:	61fb      	str	r3, [r7, #28]
	SPI001_PORTS_TypeDef* MRST_PortRegs = Handle->PinHandle->PinPortRegs[1];
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	69db      	ldr	r3, [r3, #28]
10001d4c:	68db      	ldr	r3, [r3, #12]
10001d4e:	61bb      	str	r3, [r7, #24]
	uint8_t MTSRPin = Handle->PinHandle->Pin_Num[0];
10001d50:	687b      	ldr	r3, [r7, #4]
10001d52:	69da      	ldr	r2, [r3, #28]
10001d54:	1c3b      	adds	r3, r7, #0
10001d56:	3317      	adds	r3, #23
10001d58:	7912      	ldrb	r2, [r2, #4]
10001d5a:	701a      	strb	r2, [r3, #0]
	uint8_t MRSTPin = Handle->PinHandle->Pin_Num[1];
10001d5c:	687b      	ldr	r3, [r7, #4]
10001d5e:	69da      	ldr	r2, [r3, #28]
10001d60:	1c3b      	adds	r3, r7, #0
10001d62:	3316      	adds	r3, #22
10001d64:	7952      	ldrb	r2, [r2, #5]
10001d66:	701a      	strb	r2, [r3, #0]
	status_t Status = (status_t)SPI001_ERROR;
10001d68:	2304      	movs	r3, #4
10001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  do
  {
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
10001d6c:	683b      	ldr	r3, [r7, #0]
10001d6e:	781b      	ldrb	r3, [r3, #0]
10001d70:	2b03      	cmp	r3, #3
10001d72:	d81f      	bhi.n	10001db4 <SPI001_Configure+0x8c>
10001d74:	683b      	ldr	r3, [r7, #0]
10001d76:	785b      	ldrb	r3, [r3, #1]
10001d78:	2b01      	cmp	r3, #1
10001d7a:	d81b      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
10001d7c:	683b      	ldr	r3, [r7, #0]
10001d7e:	789b      	ldrb	r3, [r3, #2]
	uint8_t MTSRPin = Handle->PinHandle->Pin_Num[0];
	uint8_t MRSTPin = Handle->PinHandle->Pin_Num[1];
	status_t Status = (status_t)SPI001_ERROR;
  do
  {
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
10001d80:	2b01      	cmp	r3, #1
10001d82:	d817      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
      (Config->ClkPh > (SPI001_ClkPhType)SPI001_CLK_PHASE1) || \
10001d84:	683b      	ldr	r3, [r7, #0]
10001d86:	78db      	ldrb	r3, [r3, #3]
	uint8_t MRSTPin = Handle->PinHandle->Pin_Num[1];
	status_t Status = (status_t)SPI001_ERROR;
  do
  {
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
10001d88:	2b01      	cmp	r3, #1
10001d8a:	d813      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Config->ClkPh > (SPI001_ClkPhType)SPI001_CLK_PHASE1) || \
      (Config->LeadTrailDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
10001d8c:	683b      	ldr	r3, [r7, #0]
10001d8e:	7a1b      	ldrb	r3, [r3, #8]
	status_t Status = (status_t)SPI001_ERROR;
  do
  {
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
      (Config->ClkPh > (SPI001_ClkPhType)SPI001_CLK_PHASE1) || \
10001d90:	2b02      	cmp	r3, #2
10001d92:	d80f      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Config->LeadTrailDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
      (Config->NextFrameDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
10001d94:	683b      	ldr	r3, [r7, #0]
10001d96:	7a5b      	ldrb	r3, [r3, #9]
  do
  {
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
      (Config->ClkPh > (SPI001_ClkPhType)SPI001_CLK_PHASE1) || \
      (Config->LeadTrailDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
10001d98:	2b02      	cmp	r3, #2
10001d9a:	d80b      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Config->NextFrameDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
      (Config->WordLen > (uint8_t)16) ||(Config->FrameLen >(uint8_t)64) || \
10001d9c:	683b      	ldr	r3, [r7, #0]
10001d9e:	7a9b      	ldrb	r3, [r3, #10]
  {
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
      (Config->ClkPh > (SPI001_ClkPhType)SPI001_CLK_PHASE1) || \
      (Config->LeadTrailDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
      (Config->NextFrameDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
10001da0:	2b10      	cmp	r3, #16
10001da2:	d807      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Config->WordLen > (uint8_t)16) ||(Config->FrameLen >(uint8_t)64) || \
10001da4:	683b      	ldr	r3, [r7, #0]
10001da6:	7adb      	ldrb	r3, [r3, #11]
10001da8:	2b40      	cmp	r3, #64	; 0x40
10001daa:	d803      	bhi.n	10001db4 <SPI001_Configure+0x8c>
      (Handle->NoOfCS > (uint32_t)7))                            
10001dac:	687b      	ldr	r3, [r7, #4]
10001dae:	7d1b      	ldrb	r3, [r3, #20]
   if((Config->Mode > SPI001_QUAD) || (Config->HBMode > SPI001_MSB) || \
      (Config->ClkPol > (SPI001_ClkPolType)SPI001_CLK_POL1) || \
      (Config->ClkPh > (SPI001_ClkPhType)SPI001_CLK_PHASE1) || \
      (Config->LeadTrailDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
      (Config->NextFrameDelay > (SPI001_DelayType)SPI001_THREE_SCLK_PERIOD) ||\
      (Config->WordLen > (uint8_t)16) ||(Config->FrameLen >(uint8_t)64) || \
10001db0:	2b07      	cmp	r3, #7
10001db2:	d902      	bls.n	10001dba <SPI001_Configure+0x92>
      (Handle->NoOfCS > (uint32_t)7))                            
   {                                                                   
      Status = (status_t) SPI001_INVALID_PARAM;                          
10001db4:	2303      	movs	r3, #3
10001db6:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);                                 
      break;
10001db8:	e1e7      	b.n	1000218a <SPI001_Configure+0x462>
   }                                                                   
                                                                         
   /* <<<DD_SPI_API_3>>>*/                                             

   /* Disable SPI mode before configuring all USIC registers to avoid unintended edges */ 
   USICRegs->CCR &= ~( ((uint32_t)(USIC_SPI_MODE  & USIC_CH_CCR_MODE_Msk)));
10001dba:	6a3b      	ldr	r3, [r7, #32]
10001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001dbe:	2201      	movs	r2, #1
10001dc0:	1c18      	adds	r0, r3, #0
10001dc2:	4390      	bics	r0, r2
10001dc4:	1c02      	adds	r2, r0, #0
10001dc6:	6a3b      	ldr	r3, [r7, #32]
10001dc8:	641a      	str	r2, [r3, #64]	; 0x40
   
   /* Get the optimum PDIV and STEP value for the given baudrate */    
   SPI001_lConfigureBaudRate(Config->BaudRate,&Brg_PDiv,&Fdr_Step);    
10001dca:	683b      	ldr	r3, [r7, #0]
10001dcc:	6859      	ldr	r1, [r3, #4]
10001dce:	1c3a      	adds	r2, r7, #0
10001dd0:	3210      	adds	r2, #16
10001dd2:	1c3b      	adds	r3, r7, #0
10001dd4:	330c      	adds	r3, #12
10001dd6:	1c08      	adds	r0, r1, #0
10001dd8:	1c11      	adds	r1, r2, #0
10001dda:	1c1a      	adds	r2, r3, #0
10001ddc:	f7ff fc3a 	bl	10001654 <SPI001_lConfigureBaudRate>
                                                                        
   /* Configuration of USIC Channel Fractional Divider */                                                                         
   /* Step value */                                                    
   USICRegs->FDR |= (Fdr_Step & USIC_CH_FDR_STEP_Msk);                
10001de0:	6a3b      	ldr	r3, [r7, #32]
10001de2:	691a      	ldr	r2, [r3, #16]
10001de4:	68fb      	ldr	r3, [r7, #12]
10001de6:	059b      	lsls	r3, r3, #22
10001de8:	0d9b      	lsrs	r3, r3, #22
10001dea:	431a      	orrs	r2, r3
10001dec:	6a3b      	ldr	r3, [r7, #32]
10001dee:	611a      	str	r2, [r3, #16]

   /* PCTQ value is zero */                                                                         
   USICRegs->BRG = ((((uint32_t)Config->LeadTrailDelay << \
10001df0:	683b      	ldr	r3, [r7, #0]
10001df2:	7a1b      	ldrb	r3, [r3, #8]
10001df4:	029a      	lsls	r2, r3, #10
                       USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
10001df6:	23f8      	movs	r3, #248	; 0xf8
10001df8:	01db      	lsls	r3, r3, #7
10001dfa:	401a      	ands	r2, r3
                      (((uint32_t)Brg_PDiv  << USIC_CH_BRG_PDIV_Pos) &  \
10001dfc:	693b      	ldr	r3, [r7, #16]
10001dfe:	0419      	lsls	r1, r3, #16
10001e00:	4be4      	ldr	r3, [pc, #912]	; (10002194 <SPI001_Configure+0x46c>)
10001e02:	400b      	ands	r3, r1
   /* Step value */                                                    
   USICRegs->FDR |= (Fdr_Step & USIC_CH_FDR_STEP_Msk);                

   /* PCTQ value is zero */                                                                         
   USICRegs->BRG = ((((uint32_t)Config->LeadTrailDelay << \
                       USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
10001e04:	431a      	orrs	r2, r3
                      (((uint32_t)Brg_PDiv  << USIC_CH_BRG_PDIV_Pos) &  \
                                                USIC_CH_BRG_PDIV_Msk) | \
                      (((uint32_t)0x02  << USIC_CH_BRG_CTQSEL_Pos) &  \
                                          USIC_CH_BRG_CTQSEL_Msk) | \
                      (((uint32_t)(((uint32_t)Config->ClkPol) |  \
10001e06:	683b      	ldr	r3, [r7, #0]
10001e08:	789b      	ldrb	r3, [r3, #2]
10001e0a:	1c19      	adds	r1, r3, #0
                       ((uint32_t)Config->ClkPh << (uint32_t)0x01)) << \
10001e0c:	683b      	ldr	r3, [r7, #0]
10001e0e:	78db      	ldrb	r3, [r3, #3]
10001e10:	005b      	lsls	r3, r3, #1
                       USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
                      (((uint32_t)Brg_PDiv  << USIC_CH_BRG_PDIV_Pos) &  \
                                                USIC_CH_BRG_PDIV_Msk) | \
                      (((uint32_t)0x02  << USIC_CH_BRG_CTQSEL_Pos) &  \
                                          USIC_CH_BRG_CTQSEL_Msk) | \
                      (((uint32_t)(((uint32_t)Config->ClkPol) |  \
10001e12:	430b      	orrs	r3, r1
                       ((uint32_t)Config->ClkPh << (uint32_t)0x01)) << \
                       USIC_CH_BRG_SCLKCFG_Pos) & USIC_CH_BRG_SCLKCFG_Msk));   
10001e14:	079b      	lsls	r3, r3, #30
   USICRegs->BRG = ((((uint32_t)Config->LeadTrailDelay << \
                       USIC_CH_BRG_DCTQ_Pos) & USIC_CH_BRG_DCTQ_Msk) | \
                      (((uint32_t)Brg_PDiv  << USIC_CH_BRG_PDIV_Pos) &  \
                                                USIC_CH_BRG_PDIV_Msk) | \
                      (((uint32_t)0x02  << USIC_CH_BRG_CTQSEL_Pos) &  \
                                          USIC_CH_BRG_CTQSEL_Msk) | \
10001e16:	4313      	orrs	r3, r2
10001e18:	2280      	movs	r2, #128	; 0x80
10001e1a:	431a      	orrs	r2, r3
   /* Configuration of USIC Channel Fractional Divider */                                                                         
   /* Step value */                                                    
   USICRegs->FDR |= (Fdr_Step & USIC_CH_FDR_STEP_Msk);                

   /* PCTQ value is zero */                                                                         
   USICRegs->BRG = ((((uint32_t)Config->LeadTrailDelay << \
10001e1c:	6a3b      	ldr	r3, [r7, #32]
10001e1e:	615a      	str	r2, [r3, #20]
                      (((uint32_t)(((uint32_t)Config->ClkPol) |  \
                       ((uint32_t)Config->ClkPh << (uint32_t)0x01)) << \
                       USIC_CH_BRG_SCLKCFG_Pos) & USIC_CH_BRG_SCLKCFG_Msk));   
                                                                         
   /* Configuration of USIC Shift Control */                             
   USICRegs->SCTR &= \
10001e20:	6a3b      	ldr	r3, [r7, #32]
10001e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001e24:	4bdc      	ldr	r3, [pc, #880]	; (10002198 <SPI001_Configure+0x470>)
10001e26:	401a      	ands	r2, r3
10001e28:	6a3b      	ldr	r3, [r7, #32]
10001e2a:	635a      	str	r2, [r3, #52]	; 0x34
                  (~(uint32_t)(USIC_CH_SCTR_SDIR_Msk | USIC_CH_SCTR_FLE_Msk | \
                     USIC_CH_SCTR_WLE_Msk | USIC_CH_SCTR_HPCDIR_Msk | \
                     USIC_CH_SCTR_DSM_Msk));                          
   USICRegs->SCTR |= \
10001e2c:	6a3b      	ldr	r3, [r7, #32]
10001e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                      ((((uint32_t)Config->HBMode & USIC_CH_SCTR_SDIR_Msk)) | \
10001e30:	683b      	ldr	r3, [r7, #0]
10001e32:	785b      	ldrb	r3, [r3, #1]
10001e34:	1c19      	adds	r1, r3, #0
10001e36:	2301      	movs	r3, #1
10001e38:	4019      	ands	r1, r3
                      (((uint32_t)((uint32_t)Config->FrameLen - (uint32_t) 1)\
10001e3a:	683b      	ldr	r3, [r7, #0]
10001e3c:	7adb      	ldrb	r3, [r3, #11]
10001e3e:	3b01      	subs	r3, #1
                         << USIC_CH_SCTR_FLE_Pos) & USIC_CH_SCTR_FLE_Msk ) | \
10001e40:	0418      	lsls	r0, r3, #16
10001e42:	23fc      	movs	r3, #252	; 0xfc
10001e44:	039b      	lsls	r3, r3, #14
10001e46:	4003      	ands	r3, r0
   USICRegs->SCTR &= \
                  (~(uint32_t)(USIC_CH_SCTR_SDIR_Msk | USIC_CH_SCTR_FLE_Msk | \
                     USIC_CH_SCTR_WLE_Msk | USIC_CH_SCTR_HPCDIR_Msk | \
                     USIC_CH_SCTR_DSM_Msk));                          
   USICRegs->SCTR |= \
                      ((((uint32_t)Config->HBMode & USIC_CH_SCTR_SDIR_Msk)) | \
10001e48:	4319      	orrs	r1, r3
                      (((uint32_t)((uint32_t)Config->FrameLen - (uint32_t) 1)\
                         << USIC_CH_SCTR_FLE_Pos) & USIC_CH_SCTR_FLE_Msk ) | \
                        (((uint32_t)((uint32_t)Config->WordLen - (uint32_t)1)\
10001e4a:	683b      	ldr	r3, [r7, #0]
10001e4c:	7a9b      	ldrb	r3, [r3, #10]
10001e4e:	3b01      	subs	r3, #1
                          << USIC_CH_SCTR_WLE_Pos) & USIC_CH_SCTR_WLE_Msk)); 
10001e50:	0618      	lsls	r0, r3, #24
10001e52:	23f0      	movs	r3, #240	; 0xf0
10001e54:	051b      	lsls	r3, r3, #20
10001e56:	4003      	ands	r3, r0
                     USIC_CH_SCTR_WLE_Msk | USIC_CH_SCTR_HPCDIR_Msk | \
                     USIC_CH_SCTR_DSM_Msk));                          
   USICRegs->SCTR |= \
                      ((((uint32_t)Config->HBMode & USIC_CH_SCTR_SDIR_Msk)) | \
                      (((uint32_t)((uint32_t)Config->FrameLen - (uint32_t) 1)\
                         << USIC_CH_SCTR_FLE_Pos) & USIC_CH_SCTR_FLE_Msk ) | \
10001e58:	430b      	orrs	r3, r1
   /* Configuration of USIC Shift Control */                             
   USICRegs->SCTR &= \
                  (~(uint32_t)(USIC_CH_SCTR_SDIR_Msk | USIC_CH_SCTR_FLE_Msk | \
                     USIC_CH_SCTR_WLE_Msk | USIC_CH_SCTR_HPCDIR_Msk | \
                     USIC_CH_SCTR_DSM_Msk));                          
   USICRegs->SCTR |= \
10001e5a:	431a      	orrs	r2, r3
10001e5c:	6a3b      	ldr	r3, [r7, #32]
10001e5e:	635a      	str	r2, [r3, #52]	; 0x34
                      ((((uint32_t)Config->HBMode & USIC_CH_SCTR_SDIR_Msk)) | \
                      (((uint32_t)((uint32_t)Config->FrameLen - (uint32_t) 1)\
                         << USIC_CH_SCTR_FLE_Pos) & USIC_CH_SCTR_FLE_Msk ) | \
                        (((uint32_t)((uint32_t)Config->WordLen - (uint32_t)1)\
                          << USIC_CH_SCTR_WLE_Pos) & USIC_CH_SCTR_WLE_Msk)); 
   switch((uint8_t)Config->Mode)                                        
10001e60:	683b      	ldr	r3, [r7, #0]
10001e62:	781b      	ldrb	r3, [r3, #0]
10001e64:	2b01      	cmp	r3, #1
10001e66:	d037      	beq.n	10001ed8 <SPI001_Configure+0x1b0>
10001e68:	dc02      	bgt.n	10001e70 <SPI001_Configure+0x148>
10001e6a:	2b00      	cmp	r3, #0
10001e6c:	d007      	beq.n	10001e7e <SPI001_Configure+0x156>
10001e6e:	e161      	b.n	10002134 <SPI001_Configure+0x40c>
10001e70:	2b02      	cmp	r3, #2
10001e72:	d100      	bne.n	10001e76 <SPI001_Configure+0x14e>
10001e74:	e084      	b.n	10001f80 <SPI001_Configure+0x258>
10001e76:	2b03      	cmp	r3, #3
10001e78:	d100      	bne.n	10001e7c <SPI001_Configure+0x154>
10001e7a:	e0e8      	b.n	1000204e <SPI001_Configure+0x326>
10001e7c:	e15a      	b.n	10002134 <SPI001_Configure+0x40c>
   {                                                                    
     case SPI001_STANDARD_FULLDUPLEX:                                   
       USICRegs->CCR &= (((uint32_t)~USIC_CH_CCR_HPCEN_Msk));           
10001e7e:	6a3b      	ldr	r3, [r7, #32]
10001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001e82:	22c0      	movs	r2, #192	; 0xc0
10001e84:	1c19      	adds	r1, r3, #0
10001e86:	4391      	bics	r1, r2
10001e88:	1c0a      	adds	r2, r1, #0
10001e8a:	6a3b      	ldr	r3, [r7, #32]
10001e8c:	641a      	str	r2, [r3, #64]	; 0x40
       USICRegs->TCSR &= ((uint32_t)~(USIC_CH_TCSR_HPCMD_Msk));         
10001e8e:	6a3b      	ldr	r3, [r7, #32]
10001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001e92:	2210      	movs	r2, #16
10001e94:	1c1c      	adds	r4, r3, #0
10001e96:	4394      	bics	r4, r2
10001e98:	1c22      	adds	r2, r4, #0
10001e9a:	6a3b      	ldr	r3, [r7, #32]
10001e9c:	639a      	str	r2, [r3, #56]	; 0x38
       /* Clear the Input stages */                                     
       USICRegs->DX3CR &= (~(uint32_t)(USIC_CH_DX3CR_INSW_Msk | \
10001e9e:	6a3b      	ldr	r3, [r7, #32]
10001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001ea2:	2217      	movs	r2, #23
10001ea4:	1c18      	adds	r0, r3, #0
10001ea6:	4390      	bics	r0, r2
10001ea8:	1c02      	adds	r2, r0, #0
10001eaa:	6a3b      	ldr	r3, [r7, #32]
10001eac:	629a      	str	r2, [r3, #40]	; 0x28
                                             USIC_CH_DX3CR_DSEL_Msk )); 
       USICRegs->DX4CR &= (~(uint32_t)(USIC_CH_DX4CR_INSW_Msk | \
10001eae:	6a3b      	ldr	r3, [r7, #32]
10001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001eb2:	2217      	movs	r2, #23
10001eb4:	1c19      	adds	r1, r3, #0
10001eb6:	4391      	bics	r1, r2
10001eb8:	1c0a      	adds	r2, r1, #0
10001eba:	6a3b      	ldr	r3, [r7, #32]
10001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
                                             USIC_CH_DX4CR_DSEL_Msk )); 
       USICRegs->DX5CR &= (~(uint32_t)(USIC_CH_DX5CR_INSW_Msk | \
10001ebe:	6a3b      	ldr	r3, [r7, #32]
10001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001ec2:	2217      	movs	r2, #23
10001ec4:	1c1c      	adds	r4, r3, #0
10001ec6:	4394      	bics	r4, r2
10001ec8:	1c22      	adds	r2, r4, #0
10001eca:	6a3b      	ldr	r3, [r7, #32]
10001ecc:	631a      	str	r2, [r3, #48]	; 0x30
                                              USIC_CH_DX5CR_DSEL_Msk )); 
       SPI001_lPinModfn_Fullduplex(Handle);
10001ece:	687b      	ldr	r3, [r7, #4]
10001ed0:	1c18      	adds	r0, r3, #0
10001ed2:	f7ff fdef 	bl	10001ab4 <SPI001_lPinModfn_Fullduplex>

     break;                                                           
10001ed6:	e12e      	b.n	10002136 <SPI001_Configure+0x40e>
     case SPI001_STANDARD_HALFDUPLEX:                                   
        USICRegs->CCR &= (~(USIC_CH_CCR_HPCEN_Msk));                      
10001ed8:	6a3b      	ldr	r3, [r7, #32]
10001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001edc:	22c0      	movs	r2, #192	; 0xc0
10001ede:	1c18      	adds	r0, r3, #0
10001ee0:	4390      	bics	r0, r2
10001ee2:	1c02      	adds	r2, r0, #0
10001ee4:	6a3b      	ldr	r3, [r7, #32]
10001ee6:	641a      	str	r2, [r3, #64]	; 0x40
        /* Enable hardware port control */                               
        USICRegs->CCR |= ((((uint32_t)0x01 << USIC_CH_CCR_HPCEN_Pos) & \
10001ee8:	6a3b      	ldr	r3, [r7, #32]
10001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001eec:	2240      	movs	r2, #64	; 0x40
10001eee:	431a      	orrs	r2, r3
10001ef0:	6a3b      	ldr	r3, [r7, #32]
10001ef2:	641a      	str	r2, [r3, #64]	; 0x40
                                                       USIC_CH_CCR_HPCEN_Msk));
        USICRegs->TCSR &= (~(USIC_CH_TCSR_HPCMD_Msk));                    
10001ef4:	6a3b      	ldr	r3, [r7, #32]
10001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001ef8:	2210      	movs	r2, #16
10001efa:	1c19      	adds	r1, r3, #0
10001efc:	4391      	bics	r1, r2
10001efe:	1c0a      	adds	r2, r1, #0
10001f00:	6a3b      	ldr	r3, [r7, #32]
10001f02:	639a      	str	r2, [r3, #56]	; 0x38
        /* Enable automatic update of SCTR.HPCDIR & SCTR.DSM bit fields */
        USICRegs->TCSR |= (((uint32_t)0x01 << USIC_CH_TCSR_HPCMD_Pos) & \
10001f04:	6a3b      	ldr	r3, [r7, #32]
10001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001f08:	2210      	movs	r2, #16
10001f0a:	431a      	orrs	r2, r3
10001f0c:	6a3b      	ldr	r3, [r7, #32]
10001f0e:	639a      	str	r2, [r3, #56]	; 0x38
                                                       USIC_CH_TCSR_HPCMD_Msk);
        USICRegs->DX0CR &= (~(uint32_t)(USIC_CH_DX0CR_INSW_Msk | \
10001f10:	6a3b      	ldr	r3, [r7, #32]
10001f12:	69db      	ldr	r3, [r3, #28]
10001f14:	2217      	movs	r2, #23
10001f16:	1c1c      	adds	r4, r3, #0
10001f18:	4394      	bics	r4, r2
10001f1a:	1c22      	adds	r2, r4, #0
10001f1c:	6a3b      	ldr	r3, [r7, #32]
10001f1e:	61da      	str	r2, [r3, #28]
                                              USIC_CH_DX0CR_DSEL_Msk )); 
        USICRegs->DX3CR &= (~(uint32_t)(USIC_CH_DX3CR_INSW_Msk | \
10001f20:	6a3b      	ldr	r3, [r7, #32]
10001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f24:	2217      	movs	r2, #23
10001f26:	1c18      	adds	r0, r3, #0
10001f28:	4390      	bics	r0, r2
10001f2a:	1c02      	adds	r2, r0, #0
10001f2c:	6a3b      	ldr	r3, [r7, #32]
10001f2e:	629a      	str	r2, [r3, #40]	; 0x28
                                              USIC_CH_DX3CR_DSEL_Msk )); 
        USICRegs->DX4CR &= (~(uint32_t)(USIC_CH_DX4CR_INSW_Msk | \
10001f30:	6a3b      	ldr	r3, [r7, #32]
10001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001f34:	2217      	movs	r2, #23
10001f36:	1c19      	adds	r1, r3, #0
10001f38:	4391      	bics	r1, r2
10001f3a:	1c0a      	adds	r2, r1, #0
10001f3c:	6a3b      	ldr	r3, [r7, #32]
10001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
                                              USIC_CH_DX4CR_DSEL_Msk )); 
        USICRegs->DX5CR &= (~(uint32_t)(USIC_CH_DX5CR_INSW_Msk | \
10001f40:	6a3b      	ldr	r3, [r7, #32]
10001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001f44:	2217      	movs	r2, #23
10001f46:	1c1c      	adds	r4, r3, #0
10001f48:	4394      	bics	r4, r2
10001f4a:	1c22      	adds	r2, r4, #0
10001f4c:	6a3b      	ldr	r3, [r7, #32]
10001f4e:	631a      	str	r2, [r3, #48]	; 0x30
                                              USIC_CH_DX5CR_DSEL_Msk )); 
                                                                         
        SPI001_lClearPortRegs(Handle);                                            
10001f50:	687b      	ldr	r3, [r7, #4]
10001f52:	1c18      	adds	r0, r3, #0
10001f54:	f7ff fbf2 	bl	1000173c <SPI001_lClearPortRegs>
        MTSR_PortRegs->HWSEL |= ((uint32_t)2 << (MTSRPin * (uint32_t)2));                                           
10001f58:	69fb      	ldr	r3, [r7, #28]
10001f5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001f5c:	1c3b      	adds	r3, r7, #0
10001f5e:	3317      	adds	r3, #23
10001f60:	781b      	ldrb	r3, [r3, #0]
10001f62:	005b      	lsls	r3, r3, #1
10001f64:	2102      	movs	r1, #2
10001f66:	1c08      	adds	r0, r1, #0
10001f68:	4098      	lsls	r0, r3
10001f6a:	1c03      	adds	r3, r0, #0
10001f6c:	431a      	orrs	r2, r3
10001f6e:	69fb      	ldr	r3, [r7, #28]
10001f70:	675a      	str	r2, [r3, #116]	; 0x74
        /* Enable loop back mode */                                      
        USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
10001f72:	6a3b      	ldr	r3, [r7, #32]
10001f74:	69db      	ldr	r3, [r3, #28]
10001f76:	2216      	movs	r2, #22
10001f78:	431a      	orrs	r2, r3
10001f7a:	6a3b      	ldr	r3, [r7, #32]
10001f7c:	61da      	str	r2, [r3, #28]
                                            USIC_CH_DX0CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX0CR_DSEL_Pos) & \
                                            USIC_CH_DX0CR_DSEL_Msk));    
     break;                                                           
10001f7e:	e0da      	b.n	10002136 <SPI001_Configure+0x40e>
     case SPI001_DUAL:                                                  
    	  USICRegs->CCR &= (((uint32_t)~USIC_CH_CCR_HPCEN_Msk));             
10001f80:	6a3b      	ldr	r3, [r7, #32]
10001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001f84:	22c0      	movs	r2, #192	; 0xc0
10001f86:	1c19      	adds	r1, r3, #0
10001f88:	4391      	bics	r1, r2
10001f8a:	1c0a      	adds	r2, r1, #0
10001f8c:	6a3b      	ldr	r3, [r7, #32]
10001f8e:	641a      	str	r2, [r3, #64]	; 0x40
        USICRegs->CCR |= ( (((uint32_t)0x02 << USIC_CH_CCR_HPCEN_Pos) & \
10001f90:	6a3b      	ldr	r3, [r7, #32]
10001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001f94:	2280      	movs	r2, #128	; 0x80
10001f96:	431a      	orrs	r2, r3
10001f98:	6a3b      	ldr	r3, [r7, #32]
10001f9a:	641a      	str	r2, [r3, #64]	; 0x40
                                                       USIC_CH_CCR_HPCEN_Msk));
        USICRegs->TCSR &= ((uint32_t)~(USIC_CH_TCSR_HPCMD_Msk));
10001f9c:	6a3b      	ldr	r3, [r7, #32]
10001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001fa0:	2210      	movs	r2, #16
10001fa2:	1c1c      	adds	r4, r3, #0
10001fa4:	4394      	bics	r4, r2
10001fa6:	1c22      	adds	r2, r4, #0
10001fa8:	6a3b      	ldr	r3, [r7, #32]
10001faa:	639a      	str	r2, [r3, #56]	; 0x38
        USICRegs->TCSR |= (((uint32_t)0x01 << USIC_CH_TCSR_HPCMD_Pos) & \
10001fac:	6a3b      	ldr	r3, [r7, #32]
10001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001fb0:	2210      	movs	r2, #16
10001fb2:	431a      	orrs	r2, r3
10001fb4:	6a3b      	ldr	r3, [r7, #32]
10001fb6:	639a      	str	r2, [r3, #56]	; 0x38
                                                       USIC_CH_TCSR_HPCMD_Msk);
        USICRegs->DX0CR &= (~(uint32_t)(USIC_CH_DX0CR_INSW_Msk | \
10001fb8:	6a3b      	ldr	r3, [r7, #32]
10001fba:	69db      	ldr	r3, [r3, #28]
10001fbc:	2217      	movs	r2, #23
10001fbe:	1c18      	adds	r0, r3, #0
10001fc0:	4390      	bics	r0, r2
10001fc2:	1c02      	adds	r2, r0, #0
10001fc4:	6a3b      	ldr	r3, [r7, #32]
10001fc6:	61da      	str	r2, [r3, #28]
                                              USIC_CH_DX0CR_DSEL_Msk )); 
        USICRegs->DX3CR &= (~(uint32_t)(USIC_CH_DX3CR_INSW_Msk | \
10001fc8:	6a3b      	ldr	r3, [r7, #32]
10001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001fcc:	2217      	movs	r2, #23
10001fce:	1c19      	adds	r1, r3, #0
10001fd0:	4391      	bics	r1, r2
10001fd2:	1c0a      	adds	r2, r1, #0
10001fd4:	6a3b      	ldr	r3, [r7, #32]
10001fd6:	629a      	str	r2, [r3, #40]	; 0x28
                                              USIC_CH_DX3CR_DSEL_Msk )); 
        USICRegs->DX4CR &= (~(uint32_t)(USIC_CH_DX4CR_INSW_Msk | \
10001fd8:	6a3b      	ldr	r3, [r7, #32]
10001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001fdc:	2217      	movs	r2, #23
10001fde:	1c1c      	adds	r4, r3, #0
10001fe0:	4394      	bics	r4, r2
10001fe2:	1c22      	adds	r2, r4, #0
10001fe4:	6a3b      	ldr	r3, [r7, #32]
10001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
                                              USIC_CH_DX4CR_DSEL_Msk )); 
        USICRegs->DX5CR &= (~(uint32_t)(USIC_CH_DX5CR_INSW_Msk | \
10001fe8:	6a3b      	ldr	r3, [r7, #32]
10001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001fec:	2217      	movs	r2, #23
10001fee:	1c18      	adds	r0, r3, #0
10001ff0:	4390      	bics	r0, r2
10001ff2:	1c02      	adds	r2, r0, #0
10001ff4:	6a3b      	ldr	r3, [r7, #32]
10001ff6:	631a      	str	r2, [r3, #48]	; 0x30
                                              USIC_CH_DX5CR_DSEL_Msk )); 
        SPI001_lClearPortRegs(Handle);                                           
10001ff8:	687b      	ldr	r3, [r7, #4]
10001ffa:	1c18      	adds	r0, r3, #0
10001ffc:	f7ff fb9e 	bl	1000173c <SPI001_lClearPortRegs>
        MTSR_PortRegs->HWSEL |= ((uint32_t)2 << (MTSRPin * (uint32_t)2));
10002000:	69fb      	ldr	r3, [r7, #28]
10002002:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10002004:	1c3b      	adds	r3, r7, #0
10002006:	3317      	adds	r3, #23
10002008:	781b      	ldrb	r3, [r3, #0]
1000200a:	005b      	lsls	r3, r3, #1
1000200c:	2102      	movs	r1, #2
1000200e:	1c0c      	adds	r4, r1, #0
10002010:	409c      	lsls	r4, r3
10002012:	1c23      	adds	r3, r4, #0
10002014:	431a      	orrs	r2, r3
10002016:	69fb      	ldr	r3, [r7, #28]
10002018:	675a      	str	r2, [r3, #116]	; 0x74
        MRST_PortRegs->HWSEL |= ((uint32_t)2 << (MRSTPin * (uint32_t)2));                                             
1000201a:	69bb      	ldr	r3, [r7, #24]
1000201c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
1000201e:	1c3b      	adds	r3, r7, #0
10002020:	3316      	adds	r3, #22
10002022:	781b      	ldrb	r3, [r3, #0]
10002024:	005b      	lsls	r3, r3, #1
10002026:	2102      	movs	r1, #2
10002028:	1c08      	adds	r0, r1, #0
1000202a:	4098      	lsls	r0, r3
1000202c:	1c03      	adds	r3, r0, #0
1000202e:	431a      	orrs	r2, r3
10002030:	69bb      	ldr	r3, [r7, #24]
10002032:	675a      	str	r2, [r3, #116]	; 0x74
        /* Enable loop back mode for input stages */                     
        USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
10002034:	6a3b      	ldr	r3, [r7, #32]
10002036:	69db      	ldr	r3, [r3, #28]
10002038:	2216      	movs	r2, #22
1000203a:	431a      	orrs	r2, r3
1000203c:	6a3b      	ldr	r3, [r7, #32]
1000203e:	61da      	str	r2, [r3, #28]
                                            USIC_CH_DX0CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX0CR_DSEL_Pos) & \
                                            USIC_CH_DX0CR_DSEL_Msk));    
        USICRegs->DX3CR |= ((((uint32_t)0x01 << USIC_CH_DX3CR_INSW_Pos) & \
10002040:	6a3b      	ldr	r3, [r7, #32]
10002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002044:	2216      	movs	r2, #22
10002046:	431a      	orrs	r2, r3
10002048:	6a3b      	ldr	r3, [r7, #32]
1000204a:	629a      	str	r2, [r3, #40]	; 0x28
                                            USIC_CH_DX3CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX3CR_DSEL_Pos) & \
                                            USIC_CH_DX3CR_DSEL_Msk));    
     break;                                                           
1000204c:	e073      	b.n	10002136 <SPI001_Configure+0x40e>
     case SPI001_QUAD:                                                  
    	  USICRegs->CCR &= (((uint32_t)~USIC_CH_CCR_HPCEN_Msk));             
1000204e:	6a3b      	ldr	r3, [r7, #32]
10002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002052:	22c0      	movs	r2, #192	; 0xc0
10002054:	1c19      	adds	r1, r3, #0
10002056:	4391      	bics	r1, r2
10002058:	1c0a      	adds	r2, r1, #0
1000205a:	6a3b      	ldr	r3, [r7, #32]
1000205c:	641a      	str	r2, [r3, #64]	; 0x40
        USICRegs->CCR |= ((((uint32_t)0x03 << USIC_CH_CCR_HPCEN_Pos) & \
1000205e:	6a3b      	ldr	r3, [r7, #32]
10002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002062:	22c0      	movs	r2, #192	; 0xc0
10002064:	431a      	orrs	r2, r3
10002066:	6a3b      	ldr	r3, [r7, #32]
10002068:	641a      	str	r2, [r3, #64]	; 0x40
                                                       USIC_CH_CCR_HPCEN_Msk));
        USICRegs->TCSR &= ((uint32_t)~(USIC_CH_TCSR_HPCMD_Msk));         
1000206a:	6a3b      	ldr	r3, [r7, #32]
1000206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000206e:	2210      	movs	r2, #16
10002070:	1c1c      	adds	r4, r3, #0
10002072:	4394      	bics	r4, r2
10002074:	1c22      	adds	r2, r4, #0
10002076:	6a3b      	ldr	r3, [r7, #32]
10002078:	639a      	str	r2, [r3, #56]	; 0x38
        USICRegs->TCSR |= (((uint32_t)0x01 << USIC_CH_TCSR_HPCMD_Pos) & \
1000207a:	6a3b      	ldr	r3, [r7, #32]
1000207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000207e:	2210      	movs	r2, #16
10002080:	431a      	orrs	r2, r3
10002082:	6a3b      	ldr	r3, [r7, #32]
10002084:	639a      	str	r2, [r3, #56]	; 0x38
                                                       USIC_CH_TCSR_HPCMD_Msk);
        USICRegs->DX0CR &= (~(uint32_t)(USIC_CH_DX0CR_INSW_Msk | \
10002086:	6a3b      	ldr	r3, [r7, #32]
10002088:	69db      	ldr	r3, [r3, #28]
1000208a:	2217      	movs	r2, #23
1000208c:	1c18      	adds	r0, r3, #0
1000208e:	4390      	bics	r0, r2
10002090:	1c02      	adds	r2, r0, #0
10002092:	6a3b      	ldr	r3, [r7, #32]
10002094:	61da      	str	r2, [r3, #28]
                                              USIC_CH_DX0CR_DSEL_Msk )); 
        USICRegs->DX3CR &= (~(uint32_t)(USIC_CH_DX3CR_INSW_Msk | \
10002096:	6a3b      	ldr	r3, [r7, #32]
10002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000209a:	2217      	movs	r2, #23
1000209c:	1c19      	adds	r1, r3, #0
1000209e:	4391      	bics	r1, r2
100020a0:	1c0a      	adds	r2, r1, #0
100020a2:	6a3b      	ldr	r3, [r7, #32]
100020a4:	629a      	str	r2, [r3, #40]	; 0x28
                                              USIC_CH_DX3CR_DSEL_Msk )); 
        USICRegs->DX4CR &= (~(uint32_t)(USIC_CH_DX4CR_INSW_Msk | \
100020a6:	6a3b      	ldr	r3, [r7, #32]
100020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100020aa:	2217      	movs	r2, #23
100020ac:	1c1c      	adds	r4, r3, #0
100020ae:	4394      	bics	r4, r2
100020b0:	1c22      	adds	r2, r4, #0
100020b2:	6a3b      	ldr	r3, [r7, #32]
100020b4:	62da      	str	r2, [r3, #44]	; 0x2c
                                              USIC_CH_DX4CR_DSEL_Msk )); 
        USICRegs->DX5CR &= (~(uint32_t)(USIC_CH_DX5CR_INSW_Msk | \
100020b6:	6a3b      	ldr	r3, [r7, #32]
100020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100020ba:	2217      	movs	r2, #23
100020bc:	1c18      	adds	r0, r3, #0
100020be:	4390      	bics	r0, r2
100020c0:	1c02      	adds	r2, r0, #0
100020c2:	6a3b      	ldr	r3, [r7, #32]
100020c4:	631a      	str	r2, [r3, #48]	; 0x30
                                              USIC_CH_DX5CR_DSEL_Msk )); 
        SPI001_lClearPortRegs(Handle);                                           
100020c6:	687b      	ldr	r3, [r7, #4]
100020c8:	1c18      	adds	r0, r3, #0
100020ca:	f7ff fb37 	bl	1000173c <SPI001_lClearPortRegs>
        MTSR_PortRegs->HWSEL |= ((uint32_t)2 << (MTSRPin * (uint32_t)2));
100020ce:	69fb      	ldr	r3, [r7, #28]
100020d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100020d2:	1c3b      	adds	r3, r7, #0
100020d4:	3317      	adds	r3, #23
100020d6:	781b      	ldrb	r3, [r3, #0]
100020d8:	005b      	lsls	r3, r3, #1
100020da:	2102      	movs	r1, #2
100020dc:	1c0c      	adds	r4, r1, #0
100020de:	409c      	lsls	r4, r3
100020e0:	1c23      	adds	r3, r4, #0
100020e2:	431a      	orrs	r2, r3
100020e4:	69fb      	ldr	r3, [r7, #28]
100020e6:	675a      	str	r2, [r3, #116]	; 0x74
        MRST_PortRegs->HWSEL |= ((uint32_t)2 << (MRSTPin * (uint32_t)2));                                               
100020e8:	69bb      	ldr	r3, [r7, #24]
100020ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100020ec:	1c3b      	adds	r3, r7, #0
100020ee:	3316      	adds	r3, #22
100020f0:	781b      	ldrb	r3, [r3, #0]
100020f2:	005b      	lsls	r3, r3, #1
100020f4:	2102      	movs	r1, #2
100020f6:	1c08      	adds	r0, r1, #0
100020f8:	4098      	lsls	r0, r3
100020fa:	1c03      	adds	r3, r0, #0
100020fc:	431a      	orrs	r2, r3
100020fe:	69bb      	ldr	r3, [r7, #24]
10002100:	675a      	str	r2, [r3, #116]	; 0x74
        /* Enable loop back mode for input stages */                     
        USICRegs->DX0CR |= ((((uint32_t)0x01 << USIC_CH_DX0CR_INSW_Pos) & \
10002102:	6a3b      	ldr	r3, [r7, #32]
10002104:	69db      	ldr	r3, [r3, #28]
10002106:	2216      	movs	r2, #22
10002108:	431a      	orrs	r2, r3
1000210a:	6a3b      	ldr	r3, [r7, #32]
1000210c:	61da      	str	r2, [r3, #28]
                                            USIC_CH_DX0CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX0CR_DSEL_Pos) & \
                                            USIC_CH_DX0CR_DSEL_Msk));    
        USICRegs->DX3CR |= ((((uint32_t)0x01 << USIC_CH_DX3CR_INSW_Pos) & \
1000210e:	6a3b      	ldr	r3, [r7, #32]
10002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002112:	2216      	movs	r2, #22
10002114:	431a      	orrs	r2, r3
10002116:	6a3b      	ldr	r3, [r7, #32]
10002118:	629a      	str	r2, [r3, #40]	; 0x28
                                            USIC_CH_DX3CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX3CR_DSEL_Pos) & \
                                            USIC_CH_DX3CR_DSEL_Msk));    
        USICRegs->DX4CR |= ((((uint32_t)0x01 << USIC_CH_DX4CR_INSW_Pos) & \
1000211a:	6a3b      	ldr	r3, [r7, #32]
1000211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000211e:	2216      	movs	r2, #22
10002120:	431a      	orrs	r2, r3
10002122:	6a3b      	ldr	r3, [r7, #32]
10002124:	62da      	str	r2, [r3, #44]	; 0x2c
                                            USIC_CH_DX4CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX4CR_DSEL_Pos) & \
                                            USIC_CH_DX4CR_DSEL_Msk));    
        USICRegs->DX5CR |= ((((uint32_t)0x01 << USIC_CH_DX5CR_INSW_Pos) & \
10002126:	6a3b      	ldr	r3, [r7, #32]
10002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000212a:	2216      	movs	r2, #22
1000212c:	431a      	orrs	r2, r3
1000212e:	6a3b      	ldr	r3, [r7, #32]
10002130:	631a      	str	r2, [r3, #48]	; 0x30
                                            USIC_CH_DX5CR_INSW_Msk) | \
                          (((uint32_t)0x06 << USIC_CH_DX5CR_DSEL_Pos) & \
                                            USIC_CH_DX5CR_DSEL_Msk));    
     break;
10002132:	e000      	b.n	10002136 <SPI001_Configure+0x40e>
        
     default:
            /* Do nothing */	
     break;
10002134:	46c0      	nop			; (mov r8, r8)
   }                                                                    
   /* Configuration of Protocol Control Register */                     
   USICRegs->PCR_SSCMode &= (~(uint32_t)(USIC_CH_PCR_SSCMode_DCTQ1_Msk | \
10002136:	6a3b      	ldr	r3, [r7, #32]
10002138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000213a:	4b18      	ldr	r3, [pc, #96]	; (1000219c <SPI001_Configure+0x474>)
1000213c:	401a      	ands	r2, r3
1000213e:	6a3b      	ldr	r3, [r7, #32]
10002140:	63da      	str	r2, [r3, #60]	; 0x3c
                  USIC_CH_PCR_SSCMode_SELO_Msk));                        
   USICRegs->PCR_SSCMode |= ((((uint32_t)Config->NextFrameDelay << \
10002142:	6a3b      	ldr	r3, [r7, #32]
10002144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10002146:	683b      	ldr	r3, [r7, #0]
10002148:	7a5b      	ldrb	r3, [r3, #9]
1000214a:	0219      	lsls	r1, r3, #8
            USIC_CH_PCR_SSCMode_DCTQ1_Pos) & USIC_CH_PCR_SSCMode_DCTQ1_Msk) | \
1000214c:	23f8      	movs	r3, #248	; 0xf8
1000214e:	015b      	lsls	r3, r3, #5
10002150:	4019      	ands	r1, r3
            ((((uint32_t)0x01 << Handle->ChipSelTable[Config->CESelected]) << \
10002152:	683b      	ldr	r3, [r7, #0]
10002154:	7b1b      	ldrb	r3, [r3, #12]
10002156:	1c18      	adds	r0, r3, #0
10002158:	687c      	ldr	r4, [r7, #4]
1000215a:	2308      	movs	r3, #8
1000215c:	1820      	adds	r0, r4, r0
1000215e:	18c3      	adds	r3, r0, r3
10002160:	791b      	ldrb	r3, [r3, #4]
10002162:	2001      	movs	r0, #1
10002164:	1c04      	adds	r4, r0, #0
10002166:	409c      	lsls	r4, r3
10002168:	1c23      	adds	r3, r4, #0
1000216a:	0418      	lsls	r0, r3, #16
               USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk)); 
1000216c:	23ff      	movs	r3, #255	; 0xff
1000216e:	041b      	lsls	r3, r3, #16
10002170:	4003      	ands	r3, r0
   }                                                                    
   /* Configuration of Protocol Control Register */                     
   USICRegs->PCR_SSCMode &= (~(uint32_t)(USIC_CH_PCR_SSCMode_DCTQ1_Msk | \
                  USIC_CH_PCR_SSCMode_SELO_Msk));                        
   USICRegs->PCR_SSCMode |= ((((uint32_t)Config->NextFrameDelay << \
            USIC_CH_PCR_SSCMode_DCTQ1_Pos) & USIC_CH_PCR_SSCMode_DCTQ1_Msk) | \
10002172:	430b      	orrs	r3, r1
     break;
   }                                                                    
   /* Configuration of Protocol Control Register */                     
   USICRegs->PCR_SSCMode &= (~(uint32_t)(USIC_CH_PCR_SSCMode_DCTQ1_Msk | \
                  USIC_CH_PCR_SSCMode_SELO_Msk));                        
   USICRegs->PCR_SSCMode |= ((((uint32_t)Config->NextFrameDelay << \
10002174:	431a      	orrs	r2, r3
10002176:	6a3b      	ldr	r3, [r7, #32]
10002178:	63da      	str	r2, [r3, #60]	; 0x3c
            ((((uint32_t)0x01 << Handle->ChipSelTable[Config->CESelected]) << \
               USIC_CH_PCR_SSCMode_SELO_Pos) & USIC_CH_PCR_SSCMode_SELO_Msk)); 
 
   /* Configuration of Channel Control Register */ 
   /* parity generation is disabled*/
   USICRegs->CCR |= ( ((uint32_t)(USIC_SPI_MODE  & USIC_CH_CCR_MODE_Msk)));
1000217a:	6a3b      	ldr	r3, [r7, #32]
1000217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000217e:	2201      	movs	r2, #1
10002180:	431a      	orrs	r2, r3
10002182:	6a3b      	ldr	r3, [r7, #32]
10002184:	641a      	str	r2, [r3, #64]	; 0x40
   Status = (status_t) DAVEApp_SUCCESS;                                                                      
10002186:	2300      	movs	r3, #0
10002188:	627b      	str	r3, [r7, #36]	; 0x24
  }while(0);                                                             
                  
  return Status;                                                         
1000218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}                                                                        
1000218c:	1c18      	adds	r0, r3, #0
1000218e:	46bd      	mov	sp, r7
10002190:	b00b      	add	sp, #44	; 0x2c
10002192:	bd90      	pop	{r4, r7, pc}
10002194:	03ff0000 	.word	0x03ff0000
10002198:	f0c0ffe2 	.word	0xf0c0ffe2
1000219c:	ff00e0ff 	.word	0xff00e0ff

100021a0 <SPI001_ReadData>:
/* This function reads out  the content of the USIC receive FIFO Buffer. 
 * Returns true in case FIFO is not empty.else  otherwise.               
 *                                                                       
 */                                                                      
bool SPI001_ReadData(const SPI001_HandleType* Handle, uint16_t* DataPtr)
{                                                                        
100021a0:	b580      	push	{r7, lr}
100021a2:	b084      	sub	sp, #16
100021a4:	af00      	add	r7, sp, #0
100021a6:	6078      	str	r0, [r7, #4]
100021a8:	6039      	str	r1, [r7, #0]
  bool Result = (bool)FALSE;                                               
100021aa:	1c3b      	adds	r3, r7, #0
100021ac:	330f      	adds	r3, #15
100021ae:	2200      	movs	r2, #0
100021b0:	701a      	strb	r2, [r3, #0]
  USIC_CH_TypeDef* USICRegs = Handle->USICRegs;                                                  
100021b2:	687b      	ldr	r3, [r7, #4]
100021b4:	681b      	ldr	r3, [r3, #0]
100021b6:	60bb      	str	r3, [r7, #8]
  /* <<<DD_SPI_API_4>>>*/                                                
  if(USIC_ubIsRxFIFOempty(USICRegs))                                     
100021b8:	68ba      	ldr	r2, [r7, #8]
100021ba:	238a      	movs	r3, #138	; 0x8a
100021bc:	005b      	lsls	r3, r3, #1
100021be:	58d2      	ldr	r2, [r2, r3]
100021c0:	2308      	movs	r3, #8
100021c2:	4013      	ands	r3, r2
100021c4:	08db      	lsrs	r3, r3, #3
100021c6:	d004      	beq.n	100021d2 <SPI001_ReadData+0x32>
  {                                                                      
    Result = (bool)FALSE;                                                      
100021c8:	1c3b      	adds	r3, r7, #0
100021ca:	330f      	adds	r3, #15
100021cc:	2200      	movs	r2, #0
100021ce:	701a      	strb	r2, [r3, #0]
100021d0:	e00a      	b.n	100021e8 <SPI001_ReadData+0x48>
  }                                                                      
  else                                                                   
  {                                                                      
     *DataPtr = (uint16_t)USICRegs->OUTR;                                
100021d2:	68ba      	ldr	r2, [r7, #8]
100021d4:	238e      	movs	r3, #142	; 0x8e
100021d6:	005b      	lsls	r3, r3, #1
100021d8:	58d3      	ldr	r3, [r2, r3]
100021da:	b29a      	uxth	r2, r3
100021dc:	683b      	ldr	r3, [r7, #0]
100021de:	801a      	strh	r2, [r3, #0]
     Result = (bool)TRUE;                                                
100021e0:	1c3b      	adds	r3, r7, #0
100021e2:	330f      	adds	r3, #15
100021e4:	2201      	movs	r2, #1
100021e6:	701a      	strb	r2, [r3, #0]
  }                                                                                            
                                                                         
  return Result;                                                         
100021e8:	1c3b      	adds	r3, r7, #0
100021ea:	330f      	adds	r3, #15
100021ec:	781b      	ldrb	r3, [r3, #0]
}                                                                        
100021ee:	1c18      	adds	r0, r3, #0
100021f0:	46bd      	mov	sp, r7
100021f2:	b004      	add	sp, #16
100021f4:	bd80      	pop	{r7, pc}
100021f6:	46c0      	nop			; (mov r8, r8)

100021f8 <SPI001_WriteData>:
(                                                                        
  const SPI001_HandleType* Handle,                                       
  const uint16_t* DataPtr,                                               
  SPI001_TransmitMode TrMode                                             
)                                                                        
{                                                                        
100021f8:	b580      	push	{r7, lr}
100021fa:	b088      	sub	sp, #32
100021fc:	af00      	add	r7, sp, #0
100021fe:	60f8      	str	r0, [r7, #12]
10002200:	60b9      	str	r1, [r7, #8]
10002202:	1dfb      	adds	r3, r7, #7
10002204:	701a      	strb	r2, [r3, #0]
  bool Result = (bool)FALSE;                                               
10002206:	1c3b      	adds	r3, r7, #0
10002208:	331f      	adds	r3, #31
1000220a:	2200      	movs	r2, #0
1000220c:	701a      	strb	r2, [r3, #0]
  uint32_t HpcenNew = 0x00U;                                                     
1000220e:	2300      	movs	r3, #0
10002210:	61bb      	str	r3, [r7, #24]
  uint8_t TbufIndex = 0x00U;                                                 
10002212:	1c3b      	adds	r3, r7, #0
10002214:	3317      	adds	r3, #23
10002216:	2200      	movs	r2, #0
10002218:	701a      	strb	r2, [r3, #0]
  USIC_CH_TypeDef* USICRegs = Handle->USICRegs;                                                
1000221a:	68fb      	ldr	r3, [r7, #12]
1000221c:	681b      	ldr	r3, [r3, #0]
1000221e:	613b      	str	r3, [r7, #16]
  /* <<<DD_SPI_API_5>>>*/                                                
  HpcenNew = ((uint32_t)((uint32_t)TrMode & SPI001_TRMODE_Msk) >> (uint32_t)3);
10002220:	1dfb      	adds	r3, r7, #7
10002222:	781a      	ldrb	r2, [r3, #0]
10002224:	2318      	movs	r3, #24
10002226:	4013      	ands	r3, r2
10002228:	08db      	lsrs	r3, r3, #3
1000222a:	61bb      	str	r3, [r7, #24]
                                                                   
  if(USIC_IsTxFIFOfull(USICRegs))                                       
1000222c:	693a      	ldr	r2, [r7, #16]
1000222e:	238a      	movs	r3, #138	; 0x8a
10002230:	005b      	lsls	r3, r3, #1
10002232:	58d2      	ldr	r2, [r2, r3]
10002234:	2380      	movs	r3, #128	; 0x80
10002236:	015b      	lsls	r3, r3, #5
10002238:	4013      	ands	r3, r2
1000223a:	0b1b      	lsrs	r3, r3, #12
1000223c:	d004      	beq.n	10002248 <SPI001_WriteData+0x50>
  {                                                                    
     Result = (bool)FALSE;                                                    
1000223e:	1c3b      	adds	r3, r7, #0
10002240:	331f      	adds	r3, #31
10002242:	2200      	movs	r2, #0
10002244:	701a      	strb	r2, [r3, #0]
10002246:	e025      	b.n	10002294 <SPI001_WriteData+0x9c>
  }                                                                    
  else                                                                 
  { 
	 USICRegs->CCR &= (~USIC_CH_CCR_HPCEN_Msk);
10002248:	693b      	ldr	r3, [r7, #16]
1000224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000224c:	22c0      	movs	r2, #192	; 0xc0
1000224e:	1c19      	adds	r1, r3, #0
10002250:	4391      	bics	r1, r2
10002252:	1c0a      	adds	r2, r1, #0
10002254:	693b      	ldr	r3, [r7, #16]
10002256:	641a      	str	r2, [r3, #64]	; 0x40
	 USICRegs->CCR |= ((HpcenNew << USIC_CH_CCR_HPCEN_Pos) & \
10002258:	693b      	ldr	r3, [r7, #16]
1000225a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000225c:	69bb      	ldr	r3, [r7, #24]
1000225e:	0199      	lsls	r1, r3, #6
10002260:	23ff      	movs	r3, #255	; 0xff
10002262:	400b      	ands	r3, r1
10002264:	431a      	orrs	r2, r3
10002266:	693b      	ldr	r3, [r7, #16]
10002268:	641a      	str	r2, [r3, #64]	; 0x40
	                                                 USIC_CH_CCR_HPCEN_Msk);
     TbufIndex = (uint8_t)((uint8_t)TrMode & (uint8_t)SPI001_TBUFINDEX_Msk); 
1000226a:	1c3b      	adds	r3, r7, #0
1000226c:	3317      	adds	r3, #23
1000226e:	1dfa      	adds	r2, r7, #7
10002270:	7811      	ldrb	r1, [r2, #0]
10002272:	2207      	movs	r2, #7
10002274:	400a      	ands	r2, r1
10002276:	701a      	strb	r2, [r3, #0]
     USICRegs->IN[TbufIndex] = *DataPtr;                                
10002278:	1c3b      	adds	r3, r7, #0
1000227a:	3317      	adds	r3, #23
1000227c:	781a      	ldrb	r2, [r3, #0]
1000227e:	68bb      	ldr	r3, [r7, #8]
10002280:	881b      	ldrh	r3, [r3, #0]
10002282:	1c19      	adds	r1, r3, #0
10002284:	693b      	ldr	r3, [r7, #16]
10002286:	3260      	adds	r2, #96	; 0x60
10002288:	0092      	lsls	r2, r2, #2
1000228a:	50d1      	str	r1, [r2, r3]
     Result = (bool)TRUE;                                                     
1000228c:	1c3b      	adds	r3, r7, #0
1000228e:	331f      	adds	r3, #31
10002290:	2201      	movs	r2, #1
10002292:	701a      	strb	r2, [r3, #0]
  }                                                                                                                                          
                                                                                            
  return Result;                                                         
10002294:	1c3b      	adds	r3, r7, #0
10002296:	331f      	adds	r3, #31
10002298:	781b      	ldrb	r3, [r3, #0]
}                                                                        
1000229a:	1c18      	adds	r0, r3, #0
1000229c:	46bd      	mov	sp, r7
1000229e:	b008      	add	sp, #32
100022a0:	bd80      	pop	{r7, pc}
100022a2:	46c0      	nop			; (mov r8, r8)

100022a4 <SPI001_GetFlagStatus>:
status_t SPI001_GetFlagStatus                                            
(                                                                        
  const SPI001_HandleType* Handle,                                       
  SPI001_FlagStatusType Flag                                             
)                                                                        
{                                                                        
100022a4:	b580      	push	{r7, lr}
100022a6:	b086      	sub	sp, #24
100022a8:	af00      	add	r7, sp, #0
100022aa:	6078      	str	r0, [r7, #4]
100022ac:	1c0a      	adds	r2, r1, #0
100022ae:	1cfb      	adds	r3, r7, #3
100022b0:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)SPI001_RESET;                                        
100022b2:	2301      	movs	r3, #1
100022b4:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;                                               
100022b6:	2300      	movs	r3, #0
100022b8:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* USICRegs = Handle->USICRegs;                          
100022ba:	687b      	ldr	r3, [r7, #4]
100022bc:	681b      	ldr	r3, [r3, #0]
100022be:	60fb      	str	r3, [r7, #12]
                                                                                             
  /* <<<DD_SPI_API_6>>>*/                                                
  if((((uint32_t)Flag & SPI001_FLAG_REG_Msk) >> 5) == (uint32_t)1)                 
100022c0:	1cfb      	adds	r3, r7, #3
100022c2:	781b      	ldrb	r3, [r3, #0]
100022c4:	095b      	lsrs	r3, r3, #5
100022c6:	b2db      	uxtb	r3, r3
100022c8:	2b01      	cmp	r3, #1
100022ca:	d10c      	bne.n	100022e6 <SPI001_GetFlagStatus+0x42>
  {                                                                      
    TempValue = USICRegs->PSR_SSCMode;                                   
100022cc:	68fb      	ldr	r3, [r7, #12]
100022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100022d0:	613b      	str	r3, [r7, #16]
    TempValue &= ((uint32_t)0x01 << ((uint32_t)Flag & SPI001_FLAG_STATUS_Msk));  
100022d2:	1cfb      	adds	r3, r7, #3
100022d4:	781a      	ldrb	r2, [r3, #0]
100022d6:	231f      	movs	r3, #31
100022d8:	4013      	ands	r3, r2
100022da:	2201      	movs	r2, #1
100022dc:	409a      	lsls	r2, r3
100022de:	693b      	ldr	r3, [r7, #16]
100022e0:	4013      	ands	r3, r2
100022e2:	613b      	str	r3, [r7, #16]
100022e4:	e013      	b.n	1000230e <SPI001_GetFlagStatus+0x6a>
  }                                                                      
  else if((((uint32_t)Flag & SPI001_FLAG_REG_Msk) >> 5) == (uint32_t) 2)            
100022e6:	1cfb      	adds	r3, r7, #3
100022e8:	781b      	ldrb	r3, [r3, #0]
100022ea:	095b      	lsrs	r3, r3, #5
100022ec:	b2db      	uxtb	r3, r3
100022ee:	2b02      	cmp	r3, #2
100022f0:	d10d      	bne.n	1000230e <SPI001_GetFlagStatus+0x6a>
  {                                                                      
    TempValue = USICRegs->TRBSR;                                         
100022f2:	68fa      	ldr	r2, [r7, #12]
100022f4:	238a      	movs	r3, #138	; 0x8a
100022f6:	005b      	lsls	r3, r3, #1
100022f8:	58d3      	ldr	r3, [r2, r3]
100022fa:	613b      	str	r3, [r7, #16]
    TempValue &= ((uint32_t)0x01 << ((uint32_t)Flag & SPI001_FLAG_STATUS_Msk));  
100022fc:	1cfb      	adds	r3, r7, #3
100022fe:	781a      	ldrb	r2, [r3, #0]
10002300:	231f      	movs	r3, #31
10002302:	4013      	ands	r3, r2
10002304:	2201      	movs	r2, #1
10002306:	409a      	lsls	r2, r3
10002308:	693b      	ldr	r3, [r7, #16]
1000230a:	4013      	ands	r3, r2
1000230c:	613b      	str	r3, [r7, #16]
  else
  {
  	/* Do Nothing */
  }
  	                                                                       
  if(TempValue != (uint32_t)0x00)                                                    
1000230e:	693b      	ldr	r3, [r7, #16]
10002310:	2b00      	cmp	r3, #0
10002312:	d001      	beq.n	10002318 <SPI001_GetFlagStatus+0x74>
  {                                                                      
    Status = (status_t)SPI001_SET;                                                 
10002314:	2302      	movs	r3, #2
10002316:	617b      	str	r3, [r7, #20]
  }                                                                                              
  return Status;                                                         
10002318:	697b      	ldr	r3, [r7, #20]
}                                                                        
1000231a:	1c18      	adds	r0, r3, #0
1000231c:	46bd      	mov	sp, r7
1000231e:	b006      	add	sp, #24
10002320:	bd80      	pop	{r7, pc}
10002322:	46c0      	nop			; (mov r8, r8)

10002324 <SPI001_ClearFlag>:
void SPI001_ClearFlag                                                    
(                                                                        
  const SPI001_HandleType* Handle,                                       
  SPI001_FlagStatusType Flag                                             
)                                                                        
{                                                                        
10002324:	b580      	push	{r7, lr}
10002326:	b084      	sub	sp, #16
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
1000232c:	1c0a      	adds	r2, r1, #0
1000232e:	1cfb      	adds	r3, r7, #3
10002330:	701a      	strb	r2, [r3, #0]
  USIC_CH_TypeDef* USICRegs = Handle->USICRegs;                          
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	681b      	ldr	r3, [r3, #0]
10002336:	60fb      	str	r3, [r7, #12]
                                                                 
  /* <<<DD_SPI_API_7>>>*/                                                
  if((((uint32_t)Flag & SPI001_FLAG_REG_Msk) >> 5) == (uint32_t) 1)
10002338:	1cfb      	adds	r3, r7, #3
1000233a:	781b      	ldrb	r3, [r3, #0]
1000233c:	095b      	lsrs	r3, r3, #5
1000233e:	b2db      	uxtb	r3, r3
10002340:	2b01      	cmp	r3, #1
10002342:	d10d      	bne.n	10002360 <SPI001_ClearFlag+0x3c>
  {                                                                      
    USICRegs->PSCR  |= ((uint32_t)0x01 << \
10002344:	68fb      	ldr	r3, [r7, #12]
10002346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10002348:	1cfb      	adds	r3, r7, #3
1000234a:	7819      	ldrb	r1, [r3, #0]
1000234c:	231f      	movs	r3, #31
1000234e:	400b      	ands	r3, r1
10002350:	2101      	movs	r1, #1
10002352:	1c08      	adds	r0, r1, #0
10002354:	4098      	lsls	r0, r3
10002356:	1c03      	adds	r3, r0, #0
10002358:	431a      	orrs	r2, r3
1000235a:	68fb      	ldr	r3, [r7, #12]
1000235c:	64da      	str	r2, [r3, #76]	; 0x4c
1000235e:	e017      	b.n	10002390 <SPI001_ClearFlag+0x6c>
                        ((uint32_t)Flag & SPI001_FLAG_STATUS_Msk));
  }                                                                      
  else if((((uint32_t)Flag & SPI001_FLAG_REG_Msk) >> 5) == (uint32_t) 2)            
10002360:	1cfb      	adds	r3, r7, #3
10002362:	781b      	ldrb	r3, [r3, #0]
10002364:	095b      	lsrs	r3, r3, #5
10002366:	b2db      	uxtb	r3, r3
10002368:	2b02      	cmp	r3, #2
1000236a:	d111      	bne.n	10002390 <SPI001_ClearFlag+0x6c>
  {                                                                      
    USICRegs->TRBSCR |= ((uint32_t)0x01 << \
1000236c:	68fa      	ldr	r2, [r7, #12]
1000236e:	238c      	movs	r3, #140	; 0x8c
10002370:	005b      	lsls	r3, r3, #1
10002372:	58d2      	ldr	r2, [r2, r3]
10002374:	1cfb      	adds	r3, r7, #3
10002376:	7819      	ldrb	r1, [r3, #0]
10002378:	231f      	movs	r3, #31
1000237a:	400b      	ands	r3, r1
1000237c:	2101      	movs	r1, #1
1000237e:	1c08      	adds	r0, r1, #0
10002380:	4098      	lsls	r0, r3
10002382:	1c03      	adds	r3, r0, #0
10002384:	1c11      	adds	r1, r2, #0
10002386:	4319      	orrs	r1, r3
10002388:	68fa      	ldr	r2, [r7, #12]
1000238a:	238c      	movs	r3, #140	; 0x8c
1000238c:	005b      	lsls	r3, r3, #1
1000238e:	50d1      	str	r1, [r2, r3]
  else
  {
  	 /* Do Nothing */
  }                                                                     
                                                                                                
}                                                                        
10002390:	46bd      	mov	sp, r7
10002392:	b004      	add	sp, #16
10002394:	bd80      	pop	{r7, pc}
10002396:	46c0      	nop			; (mov r8, r8)

10002398 <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10002398:	b580      	push	{r7, lr}
1000239a:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 4 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 4;
1000239c:	4b05      	ldr	r3, [pc, #20]	; (100023b4 <IO004_Init+0x1c>)
1000239e:	685b      	ldr	r3, [r3, #4]
100023a0:	2200      	movs	r2, #0
100023a2:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR4 |= (0U << 3);
100023a4:	4b03      	ldr	r3, [pc, #12]	; (100023b4 <IO004_Init+0x1c>)
100023a6:	685b      	ldr	r3, [r3, #4]
100023a8:	4a02      	ldr	r2, [pc, #8]	; (100023b4 <IO004_Init+0x1c>)
100023aa:	6852      	ldr	r2, [r2, #4]
100023ac:	6952      	ldr	r2, [r2, #20]
100023ae:	615a      	str	r2, [r3, #20]
}
100023b0:	46bd      	mov	sp, r7
100023b2:	bd80      	pop	{r7, pc}
100023b4:	10003bc0 	.word	0x10003bc0

100023b8 <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
100023b8:	b590      	push	{r4, r7, lr}
100023ba:	b085      	sub	sp, #20
100023bc:	af00      	add	r7, sp, #0
100023be:	6078      	str	r0, [r7, #4]
100023c0:	1c0a      	adds	r2, r1, #0
100023c2:	1cfb      	adds	r3, r7, #3
100023c4:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
100023c6:	1c3b      	adds	r3, r7, #0
100023c8:	330f      	adds	r3, #15
100023ca:	687a      	ldr	r2, [r7, #4]
100023cc:	7852      	ldrb	r2, [r2, #1]
100023ce:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
100023d0:	1c3b      	adds	r3, r7, #0
100023d2:	330f      	adds	r3, #15
100023d4:	781b      	ldrb	r3, [r3, #0]
100023d6:	2b03      	cmp	r3, #3
100023d8:	d824      	bhi.n	10002424 <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
100023da:	687b      	ldr	r3, [r7, #4]
100023dc:	685b      	ldr	r3, [r3, #4]
100023de:	687a      	ldr	r2, [r7, #4]
100023e0:	6852      	ldr	r2, [r2, #4]
100023e2:	6912      	ldr	r2, [r2, #16]
100023e4:	1c39      	adds	r1, r7, #0
100023e6:	310f      	adds	r1, #15
100023e8:	7809      	ldrb	r1, [r1, #0]
100023ea:	00c9      	lsls	r1, r1, #3
100023ec:	3103      	adds	r1, #3
100023ee:	201f      	movs	r0, #31
100023f0:	1c04      	adds	r4, r0, #0
100023f2:	408c      	lsls	r4, r1
100023f4:	1c21      	adds	r1, r4, #0
100023f6:	43c9      	mvns	r1, r1
100023f8:	400a      	ands	r2, r1
100023fa:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100023fc:	687b      	ldr	r3, [r7, #4]
100023fe:	685b      	ldr	r3, [r3, #4]
10002400:	687a      	ldr	r2, [r7, #4]
10002402:	6852      	ldr	r2, [r2, #4]
10002404:	6911      	ldr	r1, [r2, #16]
10002406:	1cfa      	adds	r2, r7, #3
10002408:	7810      	ldrb	r0, [r2, #0]
1000240a:	221f      	movs	r2, #31
1000240c:	4010      	ands	r0, r2
1000240e:	1c3a      	adds	r2, r7, #0
10002410:	320f      	adds	r2, #15
10002412:	7812      	ldrb	r2, [r2, #0]
10002414:	00d2      	lsls	r2, r2, #3
10002416:	3203      	adds	r2, #3
10002418:	1c04      	adds	r4, r0, #0
1000241a:	4094      	lsls	r4, r2
1000241c:	1c22      	adds	r2, r4, #0
1000241e:	430a      	orrs	r2, r1
10002420:	611a      	str	r2, [r3, #16]
10002422:	e0a0      	b.n	10002566 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002424:	1c3b      	adds	r3, r7, #0
10002426:	330f      	adds	r3, #15
10002428:	781b      	ldrb	r3, [r3, #0]
1000242a:	2b03      	cmp	r3, #3
1000242c:	d930      	bls.n	10002490 <IO004_DisableOutputDriver+0xd8>
1000242e:	1c3b      	adds	r3, r7, #0
10002430:	330f      	adds	r3, #15
10002432:	781b      	ldrb	r3, [r3, #0]
10002434:	2b07      	cmp	r3, #7
10002436:	d82b      	bhi.n	10002490 <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002438:	1c3b      	adds	r3, r7, #0
1000243a:	330f      	adds	r3, #15
1000243c:	1c3a      	adds	r2, r7, #0
1000243e:	320f      	adds	r2, #15
10002440:	7812      	ldrb	r2, [r2, #0]
10002442:	3a04      	subs	r2, #4
10002444:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002446:	687b      	ldr	r3, [r7, #4]
10002448:	685b      	ldr	r3, [r3, #4]
1000244a:	687a      	ldr	r2, [r7, #4]
1000244c:	6852      	ldr	r2, [r2, #4]
1000244e:	6952      	ldr	r2, [r2, #20]
10002450:	1c39      	adds	r1, r7, #0
10002452:	310f      	adds	r1, #15
10002454:	7809      	ldrb	r1, [r1, #0]
10002456:	00c9      	lsls	r1, r1, #3
10002458:	3103      	adds	r1, #3
1000245a:	201f      	movs	r0, #31
1000245c:	1c04      	adds	r4, r0, #0
1000245e:	408c      	lsls	r4, r1
10002460:	1c21      	adds	r1, r4, #0
10002462:	43c9      	mvns	r1, r1
10002464:	400a      	ands	r2, r1
10002466:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002468:	687b      	ldr	r3, [r7, #4]
1000246a:	685b      	ldr	r3, [r3, #4]
1000246c:	687a      	ldr	r2, [r7, #4]
1000246e:	6852      	ldr	r2, [r2, #4]
10002470:	6951      	ldr	r1, [r2, #20]
10002472:	1cfa      	adds	r2, r7, #3
10002474:	7810      	ldrb	r0, [r2, #0]
10002476:	221f      	movs	r2, #31
10002478:	4010      	ands	r0, r2
1000247a:	1c3a      	adds	r2, r7, #0
1000247c:	320f      	adds	r2, #15
1000247e:	7812      	ldrb	r2, [r2, #0]
10002480:	00d2      	lsls	r2, r2, #3
10002482:	3203      	adds	r2, #3
10002484:	1c04      	adds	r4, r0, #0
10002486:	4094      	lsls	r4, r2
10002488:	1c22      	adds	r2, r4, #0
1000248a:	430a      	orrs	r2, r1
1000248c:	615a      	str	r2, [r3, #20]
1000248e:	e06a      	b.n	10002566 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002490:	1c3b      	adds	r3, r7, #0
10002492:	330f      	adds	r3, #15
10002494:	781b      	ldrb	r3, [r3, #0]
10002496:	2b07      	cmp	r3, #7
10002498:	d930      	bls.n	100024fc <IO004_DisableOutputDriver+0x144>
1000249a:	1c3b      	adds	r3, r7, #0
1000249c:	330f      	adds	r3, #15
1000249e:	781b      	ldrb	r3, [r3, #0]
100024a0:	2b0b      	cmp	r3, #11
100024a2:	d82b      	bhi.n	100024fc <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
100024a4:	1c3b      	adds	r3, r7, #0
100024a6:	330f      	adds	r3, #15
100024a8:	1c3a      	adds	r2, r7, #0
100024aa:	320f      	adds	r2, #15
100024ac:	7812      	ldrb	r2, [r2, #0]
100024ae:	3a08      	subs	r2, #8
100024b0:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
100024b2:	687b      	ldr	r3, [r7, #4]
100024b4:	685b      	ldr	r3, [r3, #4]
100024b6:	687a      	ldr	r2, [r7, #4]
100024b8:	6852      	ldr	r2, [r2, #4]
100024ba:	6992      	ldr	r2, [r2, #24]
100024bc:	1c39      	adds	r1, r7, #0
100024be:	310f      	adds	r1, #15
100024c0:	7809      	ldrb	r1, [r1, #0]
100024c2:	00c9      	lsls	r1, r1, #3
100024c4:	3103      	adds	r1, #3
100024c6:	201f      	movs	r0, #31
100024c8:	1c04      	adds	r4, r0, #0
100024ca:	408c      	lsls	r4, r1
100024cc:	1c21      	adds	r1, r4, #0
100024ce:	43c9      	mvns	r1, r1
100024d0:	400a      	ands	r2, r1
100024d2:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100024d4:	687b      	ldr	r3, [r7, #4]
100024d6:	685b      	ldr	r3, [r3, #4]
100024d8:	687a      	ldr	r2, [r7, #4]
100024da:	6852      	ldr	r2, [r2, #4]
100024dc:	6991      	ldr	r1, [r2, #24]
100024de:	1cfa      	adds	r2, r7, #3
100024e0:	7810      	ldrb	r0, [r2, #0]
100024e2:	221f      	movs	r2, #31
100024e4:	4010      	ands	r0, r2
100024e6:	1c3a      	adds	r2, r7, #0
100024e8:	320f      	adds	r2, #15
100024ea:	7812      	ldrb	r2, [r2, #0]
100024ec:	00d2      	lsls	r2, r2, #3
100024ee:	3203      	adds	r2, #3
100024f0:	1c04      	adds	r4, r0, #0
100024f2:	4094      	lsls	r4, r2
100024f4:	1c22      	adds	r2, r4, #0
100024f6:	430a      	orrs	r2, r1
100024f8:	619a      	str	r2, [r3, #24]
100024fa:	e034      	b.n	10002566 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
100024fc:	1c3b      	adds	r3, r7, #0
100024fe:	330f      	adds	r3, #15
10002500:	781b      	ldrb	r3, [r3, #0]
10002502:	2b0b      	cmp	r3, #11
10002504:	d92f      	bls.n	10002566 <IO004_DisableOutputDriver+0x1ae>
10002506:	1c3b      	adds	r3, r7, #0
10002508:	330f      	adds	r3, #15
1000250a:	781b      	ldrb	r3, [r3, #0]
1000250c:	2b0f      	cmp	r3, #15
1000250e:	d82a      	bhi.n	10002566 <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002510:	1c3b      	adds	r3, r7, #0
10002512:	330f      	adds	r3, #15
10002514:	1c3a      	adds	r2, r7, #0
10002516:	320f      	adds	r2, #15
10002518:	7812      	ldrb	r2, [r2, #0]
1000251a:	3a0c      	subs	r2, #12
1000251c:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000251e:	687b      	ldr	r3, [r7, #4]
10002520:	685b      	ldr	r3, [r3, #4]
10002522:	687a      	ldr	r2, [r7, #4]
10002524:	6852      	ldr	r2, [r2, #4]
10002526:	69d2      	ldr	r2, [r2, #28]
10002528:	1c39      	adds	r1, r7, #0
1000252a:	310f      	adds	r1, #15
1000252c:	7809      	ldrb	r1, [r1, #0]
1000252e:	00c9      	lsls	r1, r1, #3
10002530:	3103      	adds	r1, #3
10002532:	201f      	movs	r0, #31
10002534:	1c04      	adds	r4, r0, #0
10002536:	408c      	lsls	r4, r1
10002538:	1c21      	adds	r1, r4, #0
1000253a:	43c9      	mvns	r1, r1
1000253c:	400a      	ands	r2, r1
1000253e:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002540:	687b      	ldr	r3, [r7, #4]
10002542:	685b      	ldr	r3, [r3, #4]
10002544:	687a      	ldr	r2, [r7, #4]
10002546:	6852      	ldr	r2, [r2, #4]
10002548:	69d1      	ldr	r1, [r2, #28]
1000254a:	1cfa      	adds	r2, r7, #3
1000254c:	7810      	ldrb	r0, [r2, #0]
1000254e:	221f      	movs	r2, #31
10002550:	4010      	ands	r0, r2
10002552:	1c3a      	adds	r2, r7, #0
10002554:	320f      	adds	r2, #15
10002556:	7812      	ldrb	r2, [r2, #0]
10002558:	00d2      	lsls	r2, r2, #3
1000255a:	3203      	adds	r2, #3
1000255c:	1c04      	adds	r4, r0, #0
1000255e:	4094      	lsls	r4, r2
10002560:	1c22      	adds	r2, r4, #0
10002562:	430a      	orrs	r2, r1
10002564:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
10002566:	46bd      	mov	sp, r7
10002568:	b005      	add	sp, #20
1000256a:	bd90      	pop	{r4, r7, pc}

1000256c <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
1000256c:	b590      	push	{r4, r7, lr}
1000256e:	b085      	sub	sp, #20
10002570:	af00      	add	r7, sp, #0
10002572:	6078      	str	r0, [r7, #4]
10002574:	1c0a      	adds	r2, r1, #0
10002576:	1cfb      	adds	r3, r7, #3
10002578:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
1000257a:	1c3b      	adds	r3, r7, #0
1000257c:	330f      	adds	r3, #15
1000257e:	687a      	ldr	r2, [r7, #4]
10002580:	7852      	ldrb	r2, [r2, #1]
10002582:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002584:	1c3b      	adds	r3, r7, #0
10002586:	330f      	adds	r3, #15
10002588:	781b      	ldrb	r3, [r3, #0]
1000258a:	2b03      	cmp	r3, #3
1000258c:	d824      	bhi.n	100025d8 <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000258e:	687b      	ldr	r3, [r7, #4]
10002590:	685b      	ldr	r3, [r3, #4]
10002592:	687a      	ldr	r2, [r7, #4]
10002594:	6852      	ldr	r2, [r2, #4]
10002596:	6912      	ldr	r2, [r2, #16]
10002598:	1c39      	adds	r1, r7, #0
1000259a:	310f      	adds	r1, #15
1000259c:	7809      	ldrb	r1, [r1, #0]
1000259e:	00c9      	lsls	r1, r1, #3
100025a0:	3103      	adds	r1, #3
100025a2:	201f      	movs	r0, #31
100025a4:	1c04      	adds	r4, r0, #0
100025a6:	408c      	lsls	r4, r1
100025a8:	1c21      	adds	r1, r4, #0
100025aa:	43c9      	mvns	r1, r1
100025ac:	400a      	ands	r2, r1
100025ae:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100025b0:	687b      	ldr	r3, [r7, #4]
100025b2:	685b      	ldr	r3, [r3, #4]
100025b4:	687a      	ldr	r2, [r7, #4]
100025b6:	6852      	ldr	r2, [r2, #4]
100025b8:	6911      	ldr	r1, [r2, #16]
100025ba:	1cfa      	adds	r2, r7, #3
100025bc:	7810      	ldrb	r0, [r2, #0]
100025be:	221f      	movs	r2, #31
100025c0:	4010      	ands	r0, r2
100025c2:	1c3a      	adds	r2, r7, #0
100025c4:	320f      	adds	r2, #15
100025c6:	7812      	ldrb	r2, [r2, #0]
100025c8:	00d2      	lsls	r2, r2, #3
100025ca:	3203      	adds	r2, #3
100025cc:	1c04      	adds	r4, r0, #0
100025ce:	4094      	lsls	r4, r2
100025d0:	1c22      	adds	r2, r4, #0
100025d2:	430a      	orrs	r2, r1
100025d4:	611a      	str	r2, [r3, #16]
100025d6:	e0a0      	b.n	1000271a <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
100025d8:	1c3b      	adds	r3, r7, #0
100025da:	330f      	adds	r3, #15
100025dc:	781b      	ldrb	r3, [r3, #0]
100025de:	2b03      	cmp	r3, #3
100025e0:	d930      	bls.n	10002644 <IO004_EnableOutputDriver+0xd8>
100025e2:	1c3b      	adds	r3, r7, #0
100025e4:	330f      	adds	r3, #15
100025e6:	781b      	ldrb	r3, [r3, #0]
100025e8:	2b07      	cmp	r3, #7
100025ea:	d82b      	bhi.n	10002644 <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
100025ec:	1c3b      	adds	r3, r7, #0
100025ee:	330f      	adds	r3, #15
100025f0:	1c3a      	adds	r2, r7, #0
100025f2:	320f      	adds	r2, #15
100025f4:	7812      	ldrb	r2, [r2, #0]
100025f6:	3a04      	subs	r2, #4
100025f8:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
100025fa:	687b      	ldr	r3, [r7, #4]
100025fc:	685b      	ldr	r3, [r3, #4]
100025fe:	687a      	ldr	r2, [r7, #4]
10002600:	6852      	ldr	r2, [r2, #4]
10002602:	6952      	ldr	r2, [r2, #20]
10002604:	1c39      	adds	r1, r7, #0
10002606:	310f      	adds	r1, #15
10002608:	7809      	ldrb	r1, [r1, #0]
1000260a:	00c9      	lsls	r1, r1, #3
1000260c:	3103      	adds	r1, #3
1000260e:	201f      	movs	r0, #31
10002610:	1c04      	adds	r4, r0, #0
10002612:	408c      	lsls	r4, r1
10002614:	1c21      	adds	r1, r4, #0
10002616:	43c9      	mvns	r1, r1
10002618:	400a      	ands	r2, r1
1000261a:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
1000261c:	687b      	ldr	r3, [r7, #4]
1000261e:	685b      	ldr	r3, [r3, #4]
10002620:	687a      	ldr	r2, [r7, #4]
10002622:	6852      	ldr	r2, [r2, #4]
10002624:	6951      	ldr	r1, [r2, #20]
10002626:	1cfa      	adds	r2, r7, #3
10002628:	7810      	ldrb	r0, [r2, #0]
1000262a:	221f      	movs	r2, #31
1000262c:	4010      	ands	r0, r2
1000262e:	1c3a      	adds	r2, r7, #0
10002630:	320f      	adds	r2, #15
10002632:	7812      	ldrb	r2, [r2, #0]
10002634:	00d2      	lsls	r2, r2, #3
10002636:	3203      	adds	r2, #3
10002638:	1c04      	adds	r4, r0, #0
1000263a:	4094      	lsls	r4, r2
1000263c:	1c22      	adds	r2, r4, #0
1000263e:	430a      	orrs	r2, r1
10002640:	615a      	str	r2, [r3, #20]
10002642:	e06a      	b.n	1000271a <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002644:	1c3b      	adds	r3, r7, #0
10002646:	330f      	adds	r3, #15
10002648:	781b      	ldrb	r3, [r3, #0]
1000264a:	2b07      	cmp	r3, #7
1000264c:	d930      	bls.n	100026b0 <IO004_EnableOutputDriver+0x144>
1000264e:	1c3b      	adds	r3, r7, #0
10002650:	330f      	adds	r3, #15
10002652:	781b      	ldrb	r3, [r3, #0]
10002654:	2b0b      	cmp	r3, #11
10002656:	d82b      	bhi.n	100026b0 <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002658:	1c3b      	adds	r3, r7, #0
1000265a:	330f      	adds	r3, #15
1000265c:	1c3a      	adds	r2, r7, #0
1000265e:	320f      	adds	r2, #15
10002660:	7812      	ldrb	r2, [r2, #0]
10002662:	3a08      	subs	r2, #8
10002664:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002666:	687b      	ldr	r3, [r7, #4]
10002668:	685b      	ldr	r3, [r3, #4]
1000266a:	687a      	ldr	r2, [r7, #4]
1000266c:	6852      	ldr	r2, [r2, #4]
1000266e:	6992      	ldr	r2, [r2, #24]
10002670:	1c39      	adds	r1, r7, #0
10002672:	310f      	adds	r1, #15
10002674:	7809      	ldrb	r1, [r1, #0]
10002676:	00c9      	lsls	r1, r1, #3
10002678:	3103      	adds	r1, #3
1000267a:	201f      	movs	r0, #31
1000267c:	1c04      	adds	r4, r0, #0
1000267e:	408c      	lsls	r4, r1
10002680:	1c21      	adds	r1, r4, #0
10002682:	43c9      	mvns	r1, r1
10002684:	400a      	ands	r2, r1
10002686:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002688:	687b      	ldr	r3, [r7, #4]
1000268a:	685b      	ldr	r3, [r3, #4]
1000268c:	687a      	ldr	r2, [r7, #4]
1000268e:	6852      	ldr	r2, [r2, #4]
10002690:	6991      	ldr	r1, [r2, #24]
10002692:	1cfa      	adds	r2, r7, #3
10002694:	7810      	ldrb	r0, [r2, #0]
10002696:	221f      	movs	r2, #31
10002698:	4010      	ands	r0, r2
1000269a:	1c3a      	adds	r2, r7, #0
1000269c:	320f      	adds	r2, #15
1000269e:	7812      	ldrb	r2, [r2, #0]
100026a0:	00d2      	lsls	r2, r2, #3
100026a2:	3203      	adds	r2, #3
100026a4:	1c04      	adds	r4, r0, #0
100026a6:	4094      	lsls	r4, r2
100026a8:	1c22      	adds	r2, r4, #0
100026aa:	430a      	orrs	r2, r1
100026ac:	619a      	str	r2, [r3, #24]
100026ae:	e034      	b.n	1000271a <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
100026b0:	1c3b      	adds	r3, r7, #0
100026b2:	330f      	adds	r3, #15
100026b4:	781b      	ldrb	r3, [r3, #0]
100026b6:	2b0b      	cmp	r3, #11
100026b8:	d92f      	bls.n	1000271a <IO004_EnableOutputDriver+0x1ae>
100026ba:	1c3b      	adds	r3, r7, #0
100026bc:	330f      	adds	r3, #15
100026be:	781b      	ldrb	r3, [r3, #0]
100026c0:	2b0f      	cmp	r3, #15
100026c2:	d82a      	bhi.n	1000271a <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
100026c4:	1c3b      	adds	r3, r7, #0
100026c6:	330f      	adds	r3, #15
100026c8:	1c3a      	adds	r2, r7, #0
100026ca:	320f      	adds	r2, #15
100026cc:	7812      	ldrb	r2, [r2, #0]
100026ce:	3a0c      	subs	r2, #12
100026d0:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
100026d2:	687b      	ldr	r3, [r7, #4]
100026d4:	685b      	ldr	r3, [r3, #4]
100026d6:	687a      	ldr	r2, [r7, #4]
100026d8:	6852      	ldr	r2, [r2, #4]
100026da:	69d2      	ldr	r2, [r2, #28]
100026dc:	1c39      	adds	r1, r7, #0
100026de:	310f      	adds	r1, #15
100026e0:	7809      	ldrb	r1, [r1, #0]
100026e2:	00c9      	lsls	r1, r1, #3
100026e4:	3103      	adds	r1, #3
100026e6:	201f      	movs	r0, #31
100026e8:	1c04      	adds	r4, r0, #0
100026ea:	408c      	lsls	r4, r1
100026ec:	1c21      	adds	r1, r4, #0
100026ee:	43c9      	mvns	r1, r1
100026f0:	400a      	ands	r2, r1
100026f2:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100026f4:	687b      	ldr	r3, [r7, #4]
100026f6:	685b      	ldr	r3, [r3, #4]
100026f8:	687a      	ldr	r2, [r7, #4]
100026fa:	6852      	ldr	r2, [r2, #4]
100026fc:	69d1      	ldr	r1, [r2, #28]
100026fe:	1cfa      	adds	r2, r7, #3
10002700:	7810      	ldrb	r0, [r2, #0]
10002702:	221f      	movs	r2, #31
10002704:	4010      	ands	r0, r2
10002706:	1c3a      	adds	r2, r7, #0
10002708:	320f      	adds	r2, #15
1000270a:	7812      	ldrb	r2, [r2, #0]
1000270c:	00d2      	lsls	r2, r2, #3
1000270e:	3203      	adds	r2, #3
10002710:	1c04      	adds	r4, r0, #0
10002712:	4094      	lsls	r4, r2
10002714:	1c22      	adds	r2, r4, #0
10002716:	430a      	orrs	r2, r1
10002718:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
1000271a:	46bd      	mov	sp, r7
1000271c:	b005      	add	sp, #20
1000271e:	bd90      	pop	{r4, r7, pc}

10002720 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10002720:	b580      	push	{r7, lr}
10002722:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10002724:	f000 f89e 	bl	10002864 <DAVE_MUX_PreInit>
	//  Initialization of app 'IO004'		     
	IO004_Init();
10002728:	f7ff fe36 	bl	10002398 <IO004_Init>
	 
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
1000272c:	f000 f89e 	bl	1000286c <CLK002_Init>
	 
	//  Initialization of app 'SPI001'		     
	SPI001_Init();
10002730:	f7ff fabe 	bl	10001cb0 <SPI001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10002734:	f000 f802 	bl	1000273c <DAVE_MUX_Init>
} //  End of function DAVE_Init
10002738:	46bd      	mov	sp, r7
1000273a:	bd80      	pop	{r7, pc}

1000273c <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
1000273c:	b580      	push	{r7, lr}
1000273e:	b086      	sub	sp, #24
10002740:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
10002742:	1c3b      	adds	r3, r7, #0
10002744:	2200      	movs	r2, #0
10002746:	601a      	str	r2, [r3, #0]
10002748:	3304      	adds	r3, #4
1000274a:	2200      	movs	r2, #0
1000274c:	601a      	str	r2, [r3, #0]
1000274e:	3304      	adds	r3, #4
10002750:	2200      	movs	r2, #0
10002752:	601a      	str	r2, [r3, #0]
10002754:	3304      	adds	r3, #4
10002756:	2200      	movs	r2, #0
10002758:	601a      	str	r2, [r3, #0]
1000275a:	3304      	adds	r3, #4
1000275c:	2200      	movs	r2, #0
1000275e:	601a      	str	r2, [r3, #0]
10002760:	3304      	adds	r3, #4
10002762:	2200      	movs	r2, #0
10002764:	601a      	str	r2, [r3, #0]
10002766:	3304      	adds	r3, #4
           
    UsicCcrMode[0] |= (uint32_t) RD_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos);
10002768:	1c3b      	adds	r3, r7, #0
1000276a:	681a      	ldr	r2, [r3, #0]
1000276c:	2390      	movs	r3, #144	; 0x90
1000276e:	05db      	lsls	r3, r3, #23
10002770:	6c19      	ldr	r1, [r3, #64]	; 0x40
10002772:	230f      	movs	r3, #15
10002774:	400b      	ands	r3, r1
10002776:	431a      	orrs	r2, r3
10002778:	1c3b      	adds	r3, r7, #0
1000277a:	601a      	str	r2, [r3, #0]
    WR_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);  
1000277c:	2390      	movs	r3, #144	; 0x90
1000277e:	05db      	lsls	r3, r3, #23
10002780:	2290      	movs	r2, #144	; 0x90
10002782:	05d2      	lsls	r2, r2, #23
10002784:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002786:	210f      	movs	r1, #15
10002788:	438a      	bics	r2, r1
1000278a:	641a      	str	r2, [r3, #64]	; 0x40
                        
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH0->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,1); 
1000278c:	2390      	movs	r3, #144	; 0x90
1000278e:	05db      	lsls	r3, r3, #23
10002790:	2290      	movs	r2, #144	; 0x90
10002792:	05d2      	lsls	r2, r2, #23
10002794:	69d2      	ldr	r2, [r2, #28]
10002796:	2107      	movs	r1, #7
10002798:	438a      	bics	r2, r1
1000279a:	2101      	movs	r1, #1
1000279c:	430a      	orrs	r2, r1
1000279e:	61da      	str	r2, [r3, #28]
  			  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
          
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x03000000);		/*    DPTR = 0,  SIZE = 3 */ 
100027a0:	2390      	movs	r3, #144	; 0x90
100027a2:	05da      	lsls	r2, r3, #23
100027a4:	2390      	movs	r3, #144	; 0x90
100027a6:	05d9      	lsls	r1, r3, #23
100027a8:	2384      	movs	r3, #132	; 0x84
100027aa:	005b      	lsls	r3, r3, #1
100027ac:	58c9      	ldr	r1, [r1, r3]
100027ae:	4b27      	ldr	r3, [pc, #156]	; (1000284c <DAVE_MUX_Init+0x110>)
100027b0:	400b      	ands	r3, r1
100027b2:	21c0      	movs	r1, #192	; 0xc0
100027b4:	0489      	lsls	r1, r1, #18
100027b6:	4319      	orrs	r1, r3
100027b8:	2384      	movs	r3, #132	; 0x84
100027ba:	005b      	lsls	r3, r3, #1
100027bc:	50d1      	str	r1, [r2, r3]
           
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH0->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x01000008);		/*    DPTR = 8,  SIZE = 1 */ 
100027be:	2390      	movs	r3, #144	; 0x90
100027c0:	05da      	lsls	r2, r3, #23
100027c2:	2390      	movs	r3, #144	; 0x90
100027c4:	05d9      	lsls	r1, r3, #23
100027c6:	2386      	movs	r3, #134	; 0x86
100027c8:	005b      	lsls	r3, r3, #1
100027ca:	58c9      	ldr	r1, [r1, r3]
100027cc:	4b1f      	ldr	r3, [pc, #124]	; (1000284c <DAVE_MUX_Init+0x110>)
100027ce:	400b      	ands	r3, r1
100027d0:	491f      	ldr	r1, [pc, #124]	; (10002850 <DAVE_MUX_Init+0x114>)
100027d2:	4319      	orrs	r1, r3
100027d4:	2386      	movs	r3, #134	; 0x86
100027d6:	005b      	lsls	r3, r3, #1
100027d8:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
            
   WR_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[0]); 
100027da:	2390      	movs	r3, #144	; 0x90
100027dc:	05db      	lsls	r3, r3, #23
100027de:	1c3a      	adds	r2, r7, #0
100027e0:	6811      	ldr	r1, [r2, #0]
100027e2:	220f      	movs	r2, #15
100027e4:	4011      	ands	r1, r2
100027e6:	2290      	movs	r2, #144	; 0x90
100027e8:	05d2      	lsls	r2, r2, #23
100027ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
100027ec:	200f      	movs	r0, #15
100027ee:	4382      	bics	r2, r0
100027f0:	430a      	orrs	r2, r1
100027f2:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT0->IOCR12, 0xb8U, PORT_IOCR_PC0_PCR_Pos, 0x16U);                /*P0.12 : PORT0_IOCR12_PC12_PCR and PORT0_IOCR12_PC12_OE */					   
100027f4:	4b17      	ldr	r3, [pc, #92]	; (10002854 <DAVE_MUX_Init+0x118>)
100027f6:	4a17      	ldr	r2, [pc, #92]	; (10002854 <DAVE_MUX_Init+0x118>)
100027f8:	69d2      	ldr	r2, [r2, #28]
100027fa:	21b8      	movs	r1, #184	; 0xb8
100027fc:	438a      	bics	r2, r1
100027fe:	21b0      	movs	r1, #176	; 0xb0
10002800:	430a      	orrs	r2, r1
10002802:	61da      	str	r2, [r3, #28]
					                         
  WR_REG(PORT1->IOCR4, PORT_IOCR_PC0_OE_Msk, PORT_IOCR_PC0_OE_Pos, PORT_IOCR_OE1);                /*    P1.4 : PORT1_IOCR4_PC4_OE */					   
10002804:	4b14      	ldr	r3, [pc, #80]	; (10002858 <DAVE_MUX_Init+0x11c>)
10002806:	4a14      	ldr	r2, [pc, #80]	; (10002858 <DAVE_MUX_Init+0x11c>)
10002808:	6952      	ldr	r2, [r2, #20]
1000280a:	2180      	movs	r1, #128	; 0x80
1000280c:	430a      	orrs	r2, r1
1000280e:	615a      	str	r2, [r3, #20]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS0_Msk, PORT2_PDISC_PDIS0_Pos, PORT_PDISC_PDIS0);            /*    P2.0 : PORT2_PDISC_PDIS0 */                       
10002810:	4b12      	ldr	r3, [pc, #72]	; (1000285c <DAVE_MUX_Init+0x120>)
10002812:	4a12      	ldr	r2, [pc, #72]	; (1000285c <DAVE_MUX_Init+0x120>)
10002814:	6e12      	ldr	r2, [r2, #96]	; 0x60
10002816:	2101      	movs	r1, #1
10002818:	438a      	bics	r2, r1
1000281a:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR0, 0xb8U, PORT_IOCR_PC0_PCR_Pos, 0x17U);                /*P2.0 : PORT2_IOCR0_PC0_PCR and PORT2_IOCR0_PC0_OE */					   
1000281c:	4b0f      	ldr	r3, [pc, #60]	; (1000285c <DAVE_MUX_Init+0x120>)
1000281e:	4a0f      	ldr	r2, [pc, #60]	; (1000285c <DAVE_MUX_Init+0x120>)
10002820:	6912      	ldr	r2, [r2, #16]
10002822:	21b8      	movs	r1, #184	; 0xb8
10002824:	430a      	orrs	r2, r1
10002826:	611a      	str	r2, [r3, #16]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS1_Msk, PORT2_PDISC_PDIS1_Pos, PORT_PDISC_PDIS0);            /*    P2.1 : PORT2_PDISC_PDIS1 */                       
10002828:	4b0c      	ldr	r3, [pc, #48]	; (1000285c <DAVE_MUX_Init+0x120>)
1000282a:	4a0c      	ldr	r2, [pc, #48]	; (1000285c <DAVE_MUX_Init+0x120>)
1000282c:	6e12      	ldr	r2, [r2, #96]	; 0x60
1000282e:	2102      	movs	r1, #2
10002830:	438a      	bics	r2, r1
10002832:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR0, 0xb800U, PORT_IOCR_PC1_PCR_Pos, 0x16U);                /*P2.1 : PORT2_IOCR0_PC1_PCR and PORT2_IOCR0_PC1_OE */					   
10002834:	4b09      	ldr	r3, [pc, #36]	; (1000285c <DAVE_MUX_Init+0x120>)
10002836:	4a09      	ldr	r2, [pc, #36]	; (1000285c <DAVE_MUX_Init+0x120>)
10002838:	6911      	ldr	r1, [r2, #16]
1000283a:	4a09      	ldr	r2, [pc, #36]	; (10002860 <DAVE_MUX_Init+0x124>)
1000283c:	400a      	ands	r2, r1
1000283e:	21b0      	movs	r1, #176	; 0xb0
10002840:	0209      	lsls	r1, r1, #8
10002842:	430a      	orrs	r2, r1
10002844:	611a      	str	r2, [r3, #16]
					      
}
10002846:	46bd      	mov	sp, r7
10002848:	b006      	add	sp, #24
1000284a:	bd80      	pop	{r7, pc}
1000284c:	f8ffffc0 	.word	0xf8ffffc0
10002850:	01000008 	.word	0x01000008
10002854:	40040000 	.word	0x40040000
10002858:	40040100 	.word	0x40040100
1000285c:	40040200 	.word	0x40040200
10002860:	ffff47ff 	.word	0xffff47ff

10002864 <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{        
10002864:	b580      	push	{r7, lr}
10002866:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                   
}
10002868:	46bd      	mov	sp, r7
1000286a:	bd80      	pop	{r7, pc}

1000286c <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
1000286c:	b580      	push	{r7, lr}
1000286e:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10002870:	4b0a      	ldr	r3, [pc, #40]	; (1000289c <CLK002_Init+0x30>)
10002872:	22c0      	movs	r2, #192	; 0xc0
10002874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
10002876:	46c0      	nop			; (mov r8, r8)
10002878:	4b08      	ldr	r3, [pc, #32]	; (1000289c <CLK002_Init+0x30>)
1000287a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000287c:	2304      	movs	r3, #4
1000287e:	4013      	ands	r3, r2
10002880:	d1fa      	bne.n	10002878 <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
10002882:	4b07      	ldr	r3, [pc, #28]	; (100028a0 <CLK002_Init+0x34>)
10002884:	4a06      	ldr	r2, [pc, #24]	; (100028a0 <CLK002_Init+0x34>)
10002886:	6812      	ldr	r2, [r2, #0]
10002888:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
1000288a:	f000 f811 	bl	100028b0 <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
1000288e:	4b03      	ldr	r3, [pc, #12]	; (1000289c <CLK002_Init+0x30>)
10002890:	22c3      	movs	r2, #195	; 0xc3
10002892:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
10002894:	f7fe fc3c 	bl	10001110 <SystemCoreClockUpdate>
}
10002898:	46bd      	mov	sp, r7
1000289a:	bd80      	pop	{r7, pc}
1000289c:	40010000 	.word	0x40010000
100028a0:	40010300 	.word	0x40010300

100028a4 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
100028a4:	b580      	push	{r7, lr}
100028a6:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
100028a8:	2300      	movs	r3, #0
}
100028aa:	1c18      	adds	r0, r3, #0
100028ac:	46bd      	mov	sp, r7
100028ae:	bd80      	pop	{r7, pc}

100028b0 <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
100028b0:	b580      	push	{r7, lr}
100028b2:	b084      	sub	sp, #16
100028b4:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
100028b6:	2300      	movs	r3, #0
100028b8:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
100028ba:	2300      	movs	r3, #0
100028bc:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
100028be:	4b18      	ldr	r3, [pc, #96]	; (10002920 <CLK002_lDivUpdate+0x70>)
100028c0:	681a      	ldr	r2, [r3, #0]
100028c2:	23ff      	movs	r3, #255	; 0xff
100028c4:	021b      	lsls	r3, r3, #8
100028c6:	4013      	ands	r3, r2
100028c8:	0a1b      	lsrs	r3, r3, #8
100028ca:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
100028cc:	2301      	movs	r3, #1
100028ce:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
100028d0:	4b13      	ldr	r3, [pc, #76]	; (10002920 <CLK002_lDivUpdate+0x70>)
100028d2:	681b      	ldr	r3, [r3, #0]
100028d4:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
100028d6:	687b      	ldr	r3, [r7, #4]
100028d8:	22ff      	movs	r2, #255	; 0xff
100028da:	4393      	bics	r3, r2
100028dc:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
100028de:	4b10      	ldr	r3, [pc, #64]	; (10002920 <CLK002_lDivUpdate+0x70>)
100028e0:	687a      	ldr	r2, [r7, #4]
100028e2:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100028e4:	4b0e      	ldr	r3, [pc, #56]	; (10002920 <CLK002_lDivUpdate+0x70>)
100028e6:	4a0e      	ldr	r2, [pc, #56]	; (10002920 <CLK002_lDivUpdate+0x70>)
100028e8:	6812      	ldr	r2, [r2, #0]
100028ea:	490e      	ldr	r1, [pc, #56]	; (10002924 <CLK002_lDivUpdate+0x74>)
100028ec:	430a      	orrs	r2, r1
100028ee:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100028f0:	46c0      	nop			; (mov r8, r8)
100028f2:	4b0b      	ldr	r3, [pc, #44]	; (10002920 <CLK002_lDivUpdate+0x70>)
100028f4:	681a      	ldr	r2, [r3, #0]
100028f6:	2380      	movs	r3, #128	; 0x80
100028f8:	05db      	lsls	r3, r3, #23
100028fa:	4013      	ands	r3, r2
100028fc:	d1f9      	bne.n	100028f2 <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
100028fe:	68fa      	ldr	r2, [r7, #12]
10002900:	68bb      	ldr	r3, [r7, #8]
10002902:	429a      	cmp	r2, r3
10002904:	d008      	beq.n	10002918 <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10002906:	68fa      	ldr	r2, [r7, #12]
10002908:	68bb      	ldr	r3, [r7, #8]
1000290a:	429a      	cmp	r2, r3
1000290c:	d202      	bcs.n	10002914 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
1000290e:	f000 f869 	bl	100029e4 <CLK002_lFrequencyDownScaling>
10002912:	e001      	b.n	10002918 <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10002914:	f000 f808 	bl	10002928 <CLK002_lFrequencyUpScaling>
   }

}
10002918:	46bd      	mov	sp, r7
1000291a:	b004      	add	sp, #16
1000291c:	bd80      	pop	{r7, pc}
1000291e:	46c0      	nop			; (mov r8, r8)
10002920:	40010300 	.word	0x40010300
10002924:	3ff00000 	.word	0x3ff00000

10002928 <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10002928:	b580      	push	{r7, lr}
1000292a:	b084      	sub	sp, #16
1000292c:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
1000292e:	4b2a      	ldr	r3, [pc, #168]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
10002930:	681a      	ldr	r2, [r3, #0]
10002932:	23ff      	movs	r3, #255	; 0xff
10002934:	021b      	lsls	r3, r3, #8
10002936:	4013      	ands	r3, r2
10002938:	0a1b      	lsrs	r3, r3, #8
1000293a:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
1000293c:	2301      	movs	r3, #1
1000293e:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10002940:	68bb      	ldr	r3, [r7, #8]
10002942:	009a      	lsls	r2, r3, #2
10002944:	68fb      	ldr	r3, [r7, #12]
10002946:	429a      	cmp	r2, r3
10002948:	d224      	bcs.n	10002994 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
1000294a:	68fb      	ldr	r3, [r7, #12]
1000294c:	2203      	movs	r2, #3
1000294e:	4393      	bics	r3, r2
10002950:	3304      	adds	r3, #4
10002952:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10002954:	68fb      	ldr	r3, [r7, #12]
10002956:	089b      	lsrs	r3, r3, #2
10002958:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
1000295a:	4b1f      	ldr	r3, [pc, #124]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
1000295c:	681b      	ldr	r3, [r3, #0]
1000295e:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10002960:	68fb      	ldr	r3, [r7, #12]
10002962:	021b      	lsls	r3, r3, #8
10002964:	041b      	lsls	r3, r3, #16
10002966:	0c1a      	lsrs	r2, r3, #16
10002968:	6879      	ldr	r1, [r7, #4]
1000296a:	4b1c      	ldr	r3, [pc, #112]	; (100029dc <CLK002_lFrequencyUpScaling+0xb4>)
1000296c:	400b      	ands	r3, r1
1000296e:	4313      	orrs	r3, r2
10002970:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10002972:	4b19      	ldr	r3, [pc, #100]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
10002974:	687a      	ldr	r2, [r7, #4]
10002976:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002978:	4b17      	ldr	r3, [pc, #92]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
1000297a:	4a17      	ldr	r2, [pc, #92]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
1000297c:	6812      	ldr	r2, [r2, #0]
1000297e:	4918      	ldr	r1, [pc, #96]	; (100029e0 <CLK002_lFrequencyUpScaling+0xb8>)
10002980:	430a      	orrs	r2, r1
10002982:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002984:	46c0      	nop			; (mov r8, r8)
10002986:	4b14      	ldr	r3, [pc, #80]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
10002988:	681a      	ldr	r2, [r3, #0]
1000298a:	2380      	movs	r3, #128	; 0x80
1000298c:	05db      	lsls	r3, r3, #23
1000298e:	4013      	ands	r3, r2
10002990:	d1f9      	bne.n	10002986 <CLK002_lFrequencyUpScaling+0x5e>
10002992:	e01c      	b.n	100029ce <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
10002994:	4b10      	ldr	r3, [pc, #64]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
10002996:	681b      	ldr	r3, [r3, #0]
10002998:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
1000299a:	68bb      	ldr	r3, [r7, #8]
1000299c:	021b      	lsls	r3, r3, #8
1000299e:	041b      	lsls	r3, r3, #16
100029a0:	0c1a      	lsrs	r2, r3, #16
100029a2:	6879      	ldr	r1, [r7, #4]
100029a4:	4b0d      	ldr	r3, [pc, #52]	; (100029dc <CLK002_lFrequencyUpScaling+0xb4>)
100029a6:	400b      	ands	r3, r1
100029a8:	4313      	orrs	r3, r2
100029aa:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
100029ac:	4b0a      	ldr	r3, [pc, #40]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
100029ae:	687a      	ldr	r2, [r7, #4]
100029b0:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100029b2:	4b09      	ldr	r3, [pc, #36]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
100029b4:	4a08      	ldr	r2, [pc, #32]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
100029b6:	6812      	ldr	r2, [r2, #0]
100029b8:	4909      	ldr	r1, [pc, #36]	; (100029e0 <CLK002_lFrequencyUpScaling+0xb8>)
100029ba:	430a      	orrs	r2, r1
100029bc:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100029be:	46c0      	nop			; (mov r8, r8)
100029c0:	4b05      	ldr	r3, [pc, #20]	; (100029d8 <CLK002_lFrequencyUpScaling+0xb0>)
100029c2:	681a      	ldr	r2, [r3, #0]
100029c4:	2380      	movs	r3, #128	; 0x80
100029c6:	05db      	lsls	r3, r3, #23
100029c8:	4013      	ands	r3, r2
100029ca:	d1f9      	bne.n	100029c0 <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
100029cc:	e000      	b.n	100029d0 <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
100029ce:	e7b7      	b.n	10002940 <CLK002_lFrequencyUpScaling+0x18>

}
100029d0:	46bd      	mov	sp, r7
100029d2:	b004      	add	sp, #16
100029d4:	bd80      	pop	{r7, pc}
100029d6:	46c0      	nop			; (mov r8, r8)
100029d8:	40010300 	.word	0x40010300
100029dc:	ffff00ff 	.word	0xffff00ff
100029e0:	3ff00000 	.word	0x3ff00000

100029e4 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
100029e4:	b580      	push	{r7, lr}
100029e6:	b084      	sub	sp, #16
100029e8:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
100029ea:	4b27      	ldr	r3, [pc, #156]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
100029ec:	681a      	ldr	r2, [r3, #0]
100029ee:	23ff      	movs	r3, #255	; 0xff
100029f0:	021b      	lsls	r3, r3, #8
100029f2:	4013      	ands	r3, r2
100029f4:	0a1b      	lsrs	r3, r3, #8
100029f6:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
100029f8:	2301      	movs	r3, #1
100029fa:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
100029fc:	68fb      	ldr	r3, [r7, #12]
100029fe:	009a      	lsls	r2, r3, #2
10002a00:	68bb      	ldr	r3, [r7, #8]
10002a02:	429a      	cmp	r2, r3
10002a04:	d21f      	bcs.n	10002a46 <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
10002a06:	68fb      	ldr	r3, [r7, #12]
10002a08:	009b      	lsls	r3, r3, #2
10002a0a:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10002a0c:	4b1e      	ldr	r3, [pc, #120]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a0e:	681b      	ldr	r3, [r3, #0]
10002a10:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10002a12:	68fb      	ldr	r3, [r7, #12]
10002a14:	021b      	lsls	r3, r3, #8
10002a16:	041b      	lsls	r3, r3, #16
10002a18:	0c1a      	lsrs	r2, r3, #16
10002a1a:	6879      	ldr	r1, [r7, #4]
10002a1c:	4b1b      	ldr	r3, [pc, #108]	; (10002a8c <CLK002_lFrequencyDownScaling+0xa8>)
10002a1e:	400b      	ands	r3, r1
10002a20:	4313      	orrs	r3, r2
10002a22:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10002a24:	4b18      	ldr	r3, [pc, #96]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a26:	687a      	ldr	r2, [r7, #4]
10002a28:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002a2a:	4b17      	ldr	r3, [pc, #92]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a2c:	4a16      	ldr	r2, [pc, #88]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a2e:	6812      	ldr	r2, [r2, #0]
10002a30:	4917      	ldr	r1, [pc, #92]	; (10002a90 <CLK002_lFrequencyDownScaling+0xac>)
10002a32:	430a      	orrs	r2, r1
10002a34:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002a36:	46c0      	nop			; (mov r8, r8)
10002a38:	4b13      	ldr	r3, [pc, #76]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a3a:	681a      	ldr	r2, [r3, #0]
10002a3c:	2380      	movs	r3, #128	; 0x80
10002a3e:	05db      	lsls	r3, r3, #23
10002a40:	4013      	ands	r3, r2
10002a42:	d1f9      	bne.n	10002a38 <CLK002_lFrequencyDownScaling+0x54>
10002a44:	e01c      	b.n	10002a80 <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
10002a46:	4b10      	ldr	r3, [pc, #64]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a48:	681b      	ldr	r3, [r3, #0]
10002a4a:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10002a4c:	68bb      	ldr	r3, [r7, #8]
10002a4e:	021b      	lsls	r3, r3, #8
10002a50:	041b      	lsls	r3, r3, #16
10002a52:	0c1a      	lsrs	r2, r3, #16
10002a54:	6879      	ldr	r1, [r7, #4]
10002a56:	4b0d      	ldr	r3, [pc, #52]	; (10002a8c <CLK002_lFrequencyDownScaling+0xa8>)
10002a58:	400b      	ands	r3, r1
10002a5a:	4313      	orrs	r3, r2
10002a5c:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10002a5e:	4b0a      	ldr	r3, [pc, #40]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a60:	687a      	ldr	r2, [r7, #4]
10002a62:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002a64:	4b08      	ldr	r3, [pc, #32]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a66:	4a08      	ldr	r2, [pc, #32]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a68:	6812      	ldr	r2, [r2, #0]
10002a6a:	4909      	ldr	r1, [pc, #36]	; (10002a90 <CLK002_lFrequencyDownScaling+0xac>)
10002a6c:	430a      	orrs	r2, r1
10002a6e:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002a70:	46c0      	nop			; (mov r8, r8)
10002a72:	4b05      	ldr	r3, [pc, #20]	; (10002a88 <CLK002_lFrequencyDownScaling+0xa4>)
10002a74:	681a      	ldr	r2, [r3, #0]
10002a76:	2380      	movs	r3, #128	; 0x80
10002a78:	05db      	lsls	r3, r3, #23
10002a7a:	4013      	ands	r3, r2
10002a7c:	d1f9      	bne.n	10002a72 <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
10002a7e:	e000      	b.n	10002a82 <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
10002a80:	e7bc      	b.n	100029fc <CLK002_lFrequencyDownScaling+0x18>
}
10002a82:	46bd      	mov	sp, r7
10002a84:	b004      	add	sp, #16
10002a86:	bd80      	pop	{r7, pc}
10002a88:	40010300 	.word	0x40010300
10002a8c:	ffff00ff 	.word	0xffff00ff
10002a90:	3ff00000 	.word	0x3ff00000

10002a94 <U0C0_SSC_vSendData>:
 */

#include "../inc/DAC.h"

static bool U0C0_SSC_vSendData(uint16_t Data) // 不需要更改传入的参数,使用传入变量的拷贝值即可
{
10002a94:	b590      	push	{r4, r7, lr}
10002a96:	b085      	sub	sp, #20
10002a98:	af00      	add	r7, sp, #0
10002a9a:	1c02      	adds	r2, r0, #0
10002a9c:	1dbb      	adds	r3, r7, #6
10002a9e:	801a      	strh	r2, [r3, #0]
	bool Result = FALSE;
10002aa0:	1c3b      	adds	r3, r7, #0
10002aa2:	330f      	adds	r3, #15
10002aa4:	2200      	movs	r2, #0
10002aa6:	701a      	strb	r2, [r3, #0]
	Result = SPI001_WriteData(&SPI001_Handle0, &Data, SPI001_STANDARD);
10002aa8:	1c3c      	adds	r4, r7, #0
10002aaa:	340f      	adds	r4, #15
10002aac:	4a07      	ldr	r2, [pc, #28]	; (10002acc <U0C0_SSC_vSendData+0x38>)
10002aae:	1dbb      	adds	r3, r7, #6
10002ab0:	1c10      	adds	r0, r2, #0
10002ab2:	1c19      	adds	r1, r3, #0
10002ab4:	2200      	movs	r2, #0
10002ab6:	f7ff fb9f 	bl	100021f8 <SPI001_WriteData>
10002aba:	1c03      	adds	r3, r0, #0
10002abc:	7023      	strb	r3, [r4, #0]
	return Result;
10002abe:	1c3b      	adds	r3, r7, #0
10002ac0:	330f      	adds	r3, #15
10002ac2:	781b      	ldrb	r3, [r3, #0]
}
10002ac4:	1c18      	adds	r0, r3, #0
10002ac6:	46bd      	mov	sp, r7
10002ac8:	b005      	add	sp, #20
10002aca:	bd90      	pop	{r4, r7, pc}
10002acc:	10003ba0 	.word	0x10003ba0

10002ad0 <DAOutputs>:
bool DAOutputs(uint16_t *Data,uint16_t Num)
{
10002ad0:	b590      	push	{r4, r7, lr}
10002ad2:	b089      	sub	sp, #36	; 0x24
10002ad4:	af00      	add	r7, sp, #0
10002ad6:	6078      	str	r0, [r7, #4]
10002ad8:	1c0a      	adds	r2, r1, #0
10002ada:	1cbb      	adds	r3, r7, #2
10002adc:	801a      	strh	r2, [r3, #0]
	bool Result = FALSE;
10002ade:	1c3b      	adds	r3, r7, #0
10002ae0:	331f      	adds	r3, #31
10002ae2:	2200      	movs	r2, #0
10002ae4:	701a      	strb	r2, [r3, #0]
    uint16_t channel, DAFIFO[8];

    for (channel=0;channel<Num;channel++)
10002ae6:	1c3b      	adds	r3, r7, #0
10002ae8:	331c      	adds	r3, #28
10002aea:	2200      	movs	r2, #0
10002aec:	801a      	strh	r2, [r3, #0]
10002aee:	e037      	b.n	10002b60 <DAOutputs+0x90>
    {
           DAFIFO[channel] = (channel<<12)|(((Data[channel]+0x8000)>>4)&0x0FFF);//
10002af0:	1c3b      	adds	r3, r7, #0
10002af2:	331c      	adds	r3, #28
10002af4:	881a      	ldrh	r2, [r3, #0]
10002af6:	1c3b      	adds	r3, r7, #0
10002af8:	331c      	adds	r3, #28
10002afa:	881b      	ldrh	r3, [r3, #0]
10002afc:	031b      	lsls	r3, r3, #12
10002afe:	b299      	uxth	r1, r3
10002b00:	1c3b      	adds	r3, r7, #0
10002b02:	331c      	adds	r3, #28
10002b04:	881b      	ldrh	r3, [r3, #0]
10002b06:	005b      	lsls	r3, r3, #1
10002b08:	6878      	ldr	r0, [r7, #4]
10002b0a:	18c3      	adds	r3, r0, r3
10002b0c:	881b      	ldrh	r3, [r3, #0]
10002b0e:	2080      	movs	r0, #128	; 0x80
10002b10:	0200      	lsls	r0, r0, #8
10002b12:	181b      	adds	r3, r3, r0
10002b14:	111b      	asrs	r3, r3, #4
10002b16:	b29b      	uxth	r3, r3
10002b18:	051b      	lsls	r3, r3, #20
10002b1a:	0d1b      	lsrs	r3, r3, #20
10002b1c:	b29b      	uxth	r3, r3
10002b1e:	430b      	orrs	r3, r1
10002b20:	b29b      	uxth	r3, r3
10002b22:	b299      	uxth	r1, r3
10002b24:	1c3b      	adds	r3, r7, #0
10002b26:	330c      	adds	r3, #12
10002b28:	0052      	lsls	r2, r2, #1
10002b2a:	52d1      	strh	r1, [r2, r3]
           Result = U0C0_SSC_vSendData(DAFIFO[channel]);
10002b2c:	1c3b      	adds	r3, r7, #0
10002b2e:	331c      	adds	r3, #28
10002b30:	881a      	ldrh	r2, [r3, #0]
10002b32:	1c3b      	adds	r3, r7, #0
10002b34:	330c      	adds	r3, #12
10002b36:	0052      	lsls	r2, r2, #1
10002b38:	5ad3      	ldrh	r3, [r2, r3]
10002b3a:	1c3c      	adds	r4, r7, #0
10002b3c:	341f      	adds	r4, #31
10002b3e:	1c18      	adds	r0, r3, #0
10002b40:	f7ff ffa8 	bl	10002a94 <U0C0_SSC_vSendData>
10002b44:	1c03      	adds	r3, r0, #0
10002b46:	7023      	strb	r3, [r4, #0]
           if(!Result)
10002b48:	1c3b      	adds	r3, r7, #0
10002b4a:	331f      	adds	r3, #31
10002b4c:	781b      	ldrb	r3, [r3, #0]
10002b4e:	2b00      	cmp	r3, #0
10002b50:	d00e      	beq.n	10002b70 <DAOutputs+0xa0>
bool DAOutputs(uint16_t *Data,uint16_t Num)
{
	bool Result = FALSE;
    uint16_t channel, DAFIFO[8];

    for (channel=0;channel<Num;channel++)
10002b52:	1c3b      	adds	r3, r7, #0
10002b54:	331c      	adds	r3, #28
10002b56:	1c3a      	adds	r2, r7, #0
10002b58:	321c      	adds	r2, #28
10002b5a:	8812      	ldrh	r2, [r2, #0]
10002b5c:	3201      	adds	r2, #1
10002b5e:	801a      	strh	r2, [r3, #0]
10002b60:	1c3a      	adds	r2, r7, #0
10002b62:	321c      	adds	r2, #28
10002b64:	1cbb      	adds	r3, r7, #2
10002b66:	8812      	ldrh	r2, [r2, #0]
10002b68:	881b      	ldrh	r3, [r3, #0]
10002b6a:	429a      	cmp	r2, r3
10002b6c:	d3c0      	bcc.n	10002af0 <DAOutputs+0x20>
10002b6e:	e000      	b.n	10002b72 <DAOutputs+0xa2>
    {
           DAFIFO[channel] = (channel<<12)|(((Data[channel]+0x8000)>>4)&0x0FFF);//
           Result = U0C0_SSC_vSendData(DAFIFO[channel]);
           if(!Result)
           {
        	   break;
10002b70:	46c0      	nop			; (mov r8, r8)
           }
    }
    return Result;
10002b72:	1c3b      	adds	r3, r7, #0
10002b74:	331f      	adds	r3, #31
10002b76:	781b      	ldrb	r3, [r3, #0]
}
10002b78:	1c18      	adds	r0, r3, #0
10002b7a:	46bd      	mov	sp, r7
10002b7c:	b009      	add	sp, #36	; 0x24
10002b7e:	bd90      	pop	{r4, r7, pc}

10002b80 <__aeabi_uidiv>:
10002b80:	2900      	cmp	r1, #0
10002b82:	d034      	beq.n	10002bee <.udivsi3_skip_div0_test+0x6a>

10002b84 <.udivsi3_skip_div0_test>:
10002b84:	2301      	movs	r3, #1
10002b86:	2200      	movs	r2, #0
10002b88:	b410      	push	{r4}
10002b8a:	4288      	cmp	r0, r1
10002b8c:	d32c      	bcc.n	10002be8 <.udivsi3_skip_div0_test+0x64>
10002b8e:	2401      	movs	r4, #1
10002b90:	0724      	lsls	r4, r4, #28
10002b92:	42a1      	cmp	r1, r4
10002b94:	d204      	bcs.n	10002ba0 <.udivsi3_skip_div0_test+0x1c>
10002b96:	4281      	cmp	r1, r0
10002b98:	d202      	bcs.n	10002ba0 <.udivsi3_skip_div0_test+0x1c>
10002b9a:	0109      	lsls	r1, r1, #4
10002b9c:	011b      	lsls	r3, r3, #4
10002b9e:	e7f8      	b.n	10002b92 <.udivsi3_skip_div0_test+0xe>
10002ba0:	00e4      	lsls	r4, r4, #3
10002ba2:	42a1      	cmp	r1, r4
10002ba4:	d204      	bcs.n	10002bb0 <.udivsi3_skip_div0_test+0x2c>
10002ba6:	4281      	cmp	r1, r0
10002ba8:	d202      	bcs.n	10002bb0 <.udivsi3_skip_div0_test+0x2c>
10002baa:	0049      	lsls	r1, r1, #1
10002bac:	005b      	lsls	r3, r3, #1
10002bae:	e7f8      	b.n	10002ba2 <.udivsi3_skip_div0_test+0x1e>
10002bb0:	4288      	cmp	r0, r1
10002bb2:	d301      	bcc.n	10002bb8 <.udivsi3_skip_div0_test+0x34>
10002bb4:	1a40      	subs	r0, r0, r1
10002bb6:	431a      	orrs	r2, r3
10002bb8:	084c      	lsrs	r4, r1, #1
10002bba:	42a0      	cmp	r0, r4
10002bbc:	d302      	bcc.n	10002bc4 <.udivsi3_skip_div0_test+0x40>
10002bbe:	1b00      	subs	r0, r0, r4
10002bc0:	085c      	lsrs	r4, r3, #1
10002bc2:	4322      	orrs	r2, r4
10002bc4:	088c      	lsrs	r4, r1, #2
10002bc6:	42a0      	cmp	r0, r4
10002bc8:	d302      	bcc.n	10002bd0 <.udivsi3_skip_div0_test+0x4c>
10002bca:	1b00      	subs	r0, r0, r4
10002bcc:	089c      	lsrs	r4, r3, #2
10002bce:	4322      	orrs	r2, r4
10002bd0:	08cc      	lsrs	r4, r1, #3
10002bd2:	42a0      	cmp	r0, r4
10002bd4:	d302      	bcc.n	10002bdc <.udivsi3_skip_div0_test+0x58>
10002bd6:	1b00      	subs	r0, r0, r4
10002bd8:	08dc      	lsrs	r4, r3, #3
10002bda:	4322      	orrs	r2, r4
10002bdc:	2800      	cmp	r0, #0
10002bde:	d003      	beq.n	10002be8 <.udivsi3_skip_div0_test+0x64>
10002be0:	091b      	lsrs	r3, r3, #4
10002be2:	d001      	beq.n	10002be8 <.udivsi3_skip_div0_test+0x64>
10002be4:	0909      	lsrs	r1, r1, #4
10002be6:	e7e3      	b.n	10002bb0 <.udivsi3_skip_div0_test+0x2c>
10002be8:	1c10      	adds	r0, r2, #0
10002bea:	bc10      	pop	{r4}
10002bec:	4770      	bx	lr
10002bee:	2800      	cmp	r0, #0
10002bf0:	d001      	beq.n	10002bf6 <.udivsi3_skip_div0_test+0x72>
10002bf2:	2000      	movs	r0, #0
10002bf4:	43c0      	mvns	r0, r0
10002bf6:	b407      	push	{r0, r1, r2}
10002bf8:	4802      	ldr	r0, [pc, #8]	; (10002c04 <.udivsi3_skip_div0_test+0x80>)
10002bfa:	a102      	add	r1, pc, #8	; (adr r1, 10002c04 <.udivsi3_skip_div0_test+0x80>)
10002bfc:	1840      	adds	r0, r0, r1
10002bfe:	9002      	str	r0, [sp, #8]
10002c00:	bd03      	pop	{r0, r1, pc}
10002c02:	46c0      	nop			; (mov r8, r8)
10002c04:	00000019 	.word	0x00000019

10002c08 <__aeabi_uidivmod>:
10002c08:	2900      	cmp	r1, #0
10002c0a:	d0f0      	beq.n	10002bee <.udivsi3_skip_div0_test+0x6a>
10002c0c:	b503      	push	{r0, r1, lr}
10002c0e:	f7ff ffb9 	bl	10002b84 <.udivsi3_skip_div0_test>
10002c12:	bc0e      	pop	{r1, r2, r3}
10002c14:	4342      	muls	r2, r0
10002c16:	1a89      	subs	r1, r1, r2
10002c18:	4718      	bx	r3
10002c1a:	46c0      	nop			; (mov r8, r8)

10002c1c <__aeabi_idiv0>:
10002c1c:	4770      	bx	lr
10002c1e:	46c0      	nop			; (mov r8, r8)

10002c20 <__aeabi_cfrcmple>:
10002c20:	4684      	mov	ip, r0
10002c22:	1c08      	adds	r0, r1, #0
10002c24:	4661      	mov	r1, ip
10002c26:	e7ff      	b.n	10002c28 <__aeabi_cfcmpeq>

10002c28 <__aeabi_cfcmpeq>:
10002c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002c2a:	f000 fbcb 	bl	100033c4 <__lesf2>
10002c2e:	2800      	cmp	r0, #0
10002c30:	d401      	bmi.n	10002c36 <__aeabi_cfcmpeq+0xe>
10002c32:	2100      	movs	r1, #0
10002c34:	42c8      	cmn	r0, r1
10002c36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002c38 <__aeabi_fcmpeq>:
10002c38:	b510      	push	{r4, lr}
10002c3a:	f000 fb53 	bl	100032e4 <__eqsf2>
10002c3e:	4240      	negs	r0, r0
10002c40:	3001      	adds	r0, #1
10002c42:	bd10      	pop	{r4, pc}

10002c44 <__aeabi_fcmplt>:
10002c44:	b510      	push	{r4, lr}
10002c46:	f000 fbbd 	bl	100033c4 <__lesf2>
10002c4a:	2800      	cmp	r0, #0
10002c4c:	db01      	blt.n	10002c52 <__aeabi_fcmplt+0xe>
10002c4e:	2000      	movs	r0, #0
10002c50:	bd10      	pop	{r4, pc}
10002c52:	2001      	movs	r0, #1
10002c54:	bd10      	pop	{r4, pc}
10002c56:	46c0      	nop			; (mov r8, r8)

10002c58 <__aeabi_fcmple>:
10002c58:	b510      	push	{r4, lr}
10002c5a:	f000 fbb3 	bl	100033c4 <__lesf2>
10002c5e:	2800      	cmp	r0, #0
10002c60:	dd01      	ble.n	10002c66 <__aeabi_fcmple+0xe>
10002c62:	2000      	movs	r0, #0
10002c64:	bd10      	pop	{r4, pc}
10002c66:	2001      	movs	r0, #1
10002c68:	bd10      	pop	{r4, pc}
10002c6a:	46c0      	nop			; (mov r8, r8)

10002c6c <__aeabi_fcmpgt>:
10002c6c:	b510      	push	{r4, lr}
10002c6e:	f000 fb61 	bl	10003334 <__gesf2>
10002c72:	2800      	cmp	r0, #0
10002c74:	dc01      	bgt.n	10002c7a <__aeabi_fcmpgt+0xe>
10002c76:	2000      	movs	r0, #0
10002c78:	bd10      	pop	{r4, pc}
10002c7a:	2001      	movs	r0, #1
10002c7c:	bd10      	pop	{r4, pc}
10002c7e:	46c0      	nop			; (mov r8, r8)

10002c80 <__aeabi_fcmpge>:
10002c80:	b510      	push	{r4, lr}
10002c82:	f000 fb57 	bl	10003334 <__gesf2>
10002c86:	2800      	cmp	r0, #0
10002c88:	da01      	bge.n	10002c8e <__aeabi_fcmpge+0xe>
10002c8a:	2000      	movs	r0, #0
10002c8c:	bd10      	pop	{r4, pc}
10002c8e:	2001      	movs	r0, #1
10002c90:	bd10      	pop	{r4, pc}
10002c92:	46c0      	nop			; (mov r8, r8)

10002c94 <__aeabi_f2uiz>:
10002c94:	219e      	movs	r1, #158	; 0x9e
10002c96:	b510      	push	{r4, lr}
10002c98:	05c9      	lsls	r1, r1, #23
10002c9a:	1c04      	adds	r4, r0, #0
10002c9c:	f7ff fff0 	bl	10002c80 <__aeabi_fcmpge>
10002ca0:	2800      	cmp	r0, #0
10002ca2:	d103      	bne.n	10002cac <__aeabi_f2uiz+0x18>
10002ca4:	1c20      	adds	r0, r4, #0
10002ca6:	f000 fedf 	bl	10003a68 <__aeabi_f2iz>
10002caa:	bd10      	pop	{r4, pc}
10002cac:	229e      	movs	r2, #158	; 0x9e
10002cae:	1c20      	adds	r0, r4, #0
10002cb0:	05d1      	lsls	r1, r2, #23
10002cb2:	f000 fcff 	bl	100036b4 <__aeabi_fsub>
10002cb6:	f000 fed7 	bl	10003a68 <__aeabi_f2iz>
10002cba:	2380      	movs	r3, #128	; 0x80
10002cbc:	061c      	lsls	r4, r3, #24
10002cbe:	1900      	adds	r0, r0, r4
10002cc0:	e7f3      	b.n	10002caa <__aeabi_f2uiz+0x16>
10002cc2:	46c0      	nop			; (mov r8, r8)

10002cc4 <__aeabi_fadd>:
10002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002cc6:	0243      	lsls	r3, r0, #9
10002cc8:	0042      	lsls	r2, r0, #1
10002cca:	024f      	lsls	r7, r1, #9
10002ccc:	004c      	lsls	r4, r1, #1
10002cce:	0fc0      	lsrs	r0, r0, #31
10002cd0:	099b      	lsrs	r3, r3, #6
10002cd2:	0e12      	lsrs	r2, r2, #24
10002cd4:	1c06      	adds	r6, r0, #0
10002cd6:	469c      	mov	ip, r3
10002cd8:	0e24      	lsrs	r4, r4, #24
10002cda:	0fc9      	lsrs	r1, r1, #31
10002cdc:	09bf      	lsrs	r7, r7, #6
10002cde:	4288      	cmp	r0, r1
10002ce0:	d057      	beq.n	10002d92 <__aeabi_fadd+0xce>
10002ce2:	1b15      	subs	r5, r2, r4
10002ce4:	2d00      	cmp	r5, #0
10002ce6:	dc00      	bgt.n	10002cea <__aeabi_fadd+0x26>
10002ce8:	e07e      	b.n	10002de8 <__aeabi_fadd+0x124>
10002cea:	2c00      	cmp	r4, #0
10002cec:	d141      	bne.n	10002d72 <__aeabi_fadd+0xae>
10002cee:	2f00      	cmp	r7, #0
10002cf0:	d064      	beq.n	10002dbc <__aeabi_fadd+0xf8>
10002cf2:	3d01      	subs	r5, #1
10002cf4:	2d00      	cmp	r5, #0
10002cf6:	d000      	beq.n	10002cfa <__aeabi_fadd+0x36>
10002cf8:	e0ab      	b.n	10002e52 <__aeabi_fadd+0x18e>
10002cfa:	1bdb      	subs	r3, r3, r7
10002cfc:	1c14      	adds	r4, r2, #0
10002cfe:	1c06      	adds	r6, r0, #0
10002d00:	0159      	lsls	r1, r3, #5
10002d02:	d544      	bpl.n	10002d8e <__aeabi_fadd+0xca>
10002d04:	019a      	lsls	r2, r3, #6
10002d06:	0995      	lsrs	r5, r2, #6
10002d08:	1c28      	adds	r0, r5, #0
10002d0a:	f000 ff21 	bl	10003b50 <__clzsi2>
10002d0e:	3805      	subs	r0, #5
10002d10:	4085      	lsls	r5, r0
10002d12:	4284      	cmp	r4, r0
10002d14:	dd00      	ble.n	10002d18 <__aeabi_fadd+0x54>
10002d16:	e079      	b.n	10002e0c <__aeabi_fadd+0x148>
10002d18:	1b00      	subs	r0, r0, r4
10002d1a:	241f      	movs	r4, #31
10002d1c:	1c2b      	adds	r3, r5, #0
10002d1e:	1c41      	adds	r1, r0, #1
10002d20:	1a22      	subs	r2, r4, r0
10002d22:	40cb      	lsrs	r3, r1
10002d24:	4095      	lsls	r5, r2
10002d26:	1c1f      	adds	r7, r3, #0
10002d28:	1c2b      	adds	r3, r5, #0
10002d2a:	1e5d      	subs	r5, r3, #1
10002d2c:	41ab      	sbcs	r3, r5
10002d2e:	433b      	orrs	r3, r7
10002d30:	2501      	movs	r5, #1
10002d32:	2400      	movs	r4, #0
10002d34:	200f      	movs	r0, #15
10002d36:	4018      	ands	r0, r3
10002d38:	2804      	cmp	r0, #4
10002d3a:	d000      	beq.n	10002d3e <__aeabi_fadd+0x7a>
10002d3c:	3304      	adds	r3, #4
10002d3e:	2180      	movs	r1, #128	; 0x80
10002d40:	04cf      	lsls	r7, r1, #19
10002d42:	2201      	movs	r2, #1
10002d44:	401f      	ands	r7, r3
10002d46:	4016      	ands	r6, r2
10002d48:	2f00      	cmp	r7, #0
10002d4a:	d005      	beq.n	10002d58 <__aeabi_fadd+0x94>
10002d4c:	2dff      	cmp	r5, #255	; 0xff
10002d4e:	d05a      	beq.n	10002e06 <__aeabi_fadd+0x142>
10002d50:	4cb3      	ldr	r4, [pc, #716]	; (10003020 <__aeabi_fadd+0x35c>)
10002d52:	4023      	ands	r3, r4
10002d54:	1c2c      	adds	r4, r5, #0
10002d56:	3501      	adds	r5, #1
10002d58:	b2ed      	uxtb	r5, r5
10002d5a:	08da      	lsrs	r2, r3, #3
10002d5c:	2d01      	cmp	r5, #1
10002d5e:	dd3b      	ble.n	10002dd8 <__aeabi_fadd+0x114>
10002d60:	0253      	lsls	r3, r2, #9
10002d62:	0a5a      	lsrs	r2, r3, #9
10002d64:	b2e4      	uxtb	r4, r4
10002d66:	05e4      	lsls	r4, r4, #23
10002d68:	4322      	orrs	r2, r4
10002d6a:	07f6      	lsls	r6, r6, #31
10002d6c:	1c10      	adds	r0, r2, #0
10002d6e:	4330      	orrs	r0, r6
10002d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002d72:	2aff      	cmp	r2, #255	; 0xff
10002d74:	d02b      	beq.n	10002dce <__aeabi_fadd+0x10a>
10002d76:	2180      	movs	r1, #128	; 0x80
10002d78:	04cc      	lsls	r4, r1, #19
10002d7a:	4327      	orrs	r7, r4
10002d7c:	2301      	movs	r3, #1
10002d7e:	2d1b      	cmp	r5, #27
10002d80:	dd49      	ble.n	10002e16 <__aeabi_fadd+0x152>
10002d82:	4667      	mov	r7, ip
10002d84:	1afb      	subs	r3, r7, r3
10002d86:	1c14      	adds	r4, r2, #0
10002d88:	1c06      	adds	r6, r0, #0
10002d8a:	0159      	lsls	r1, r3, #5
10002d8c:	d4ba      	bmi.n	10002d04 <__aeabi_fadd+0x40>
10002d8e:	1c65      	adds	r5, r4, #1
10002d90:	e7d0      	b.n	10002d34 <__aeabi_fadd+0x70>
10002d92:	1b15      	subs	r5, r2, r4
10002d94:	2d00      	cmp	r5, #0
10002d96:	dd4f      	ble.n	10002e38 <__aeabi_fadd+0x174>
10002d98:	2c00      	cmp	r4, #0
10002d9a:	d013      	beq.n	10002dc4 <__aeabi_fadd+0x100>
10002d9c:	2aff      	cmp	r2, #255	; 0xff
10002d9e:	d05a      	beq.n	10002e56 <__aeabi_fadd+0x192>
10002da0:	2480      	movs	r4, #128	; 0x80
10002da2:	04e1      	lsls	r1, r4, #19
10002da4:	430f      	orrs	r7, r1
10002da6:	2301      	movs	r3, #1
10002da8:	2d1b      	cmp	r5, #27
10002daa:	dc00      	bgt.n	10002dae <__aeabi_fadd+0xea>
10002dac:	e0b0      	b.n	10002f10 <__aeabi_fadd+0x24c>
10002dae:	4463      	add	r3, ip
10002db0:	1c14      	adds	r4, r2, #0
10002db2:	0159      	lsls	r1, r3, #5
10002db4:	d455      	bmi.n	10002e62 <__aeabi_fadd+0x19e>
10002db6:	1c65      	adds	r5, r4, #1
10002db8:	1c06      	adds	r6, r0, #0
10002dba:	e7bb      	b.n	10002d34 <__aeabi_fadd+0x70>
10002dbc:	1c55      	adds	r5, r2, #1
10002dbe:	1c14      	adds	r4, r2, #0
10002dc0:	1c06      	adds	r6, r0, #0
10002dc2:	e7b7      	b.n	10002d34 <__aeabi_fadd+0x70>
10002dc4:	2f00      	cmp	r7, #0
10002dc6:	d17c      	bne.n	10002ec2 <__aeabi_fadd+0x1fe>
10002dc8:	1c55      	adds	r5, r2, #1
10002dca:	1c14      	adds	r4, r2, #0
10002dcc:	e7b2      	b.n	10002d34 <__aeabi_fadd+0x70>
10002dce:	2780      	movs	r7, #128	; 0x80
10002dd0:	4663      	mov	r3, ip
10002dd2:	007d      	lsls	r5, r7, #1
10002dd4:	24ff      	movs	r4, #255	; 0xff
10002dd6:	e7ad      	b.n	10002d34 <__aeabi_fadd+0x70>
10002dd8:	2a00      	cmp	r2, #0
10002dda:	d0c3      	beq.n	10002d64 <__aeabi_fadd+0xa0>
10002ddc:	2c00      	cmp	r4, #0
10002dde:	d028      	beq.n	10002e32 <__aeabi_fadd+0x16e>
10002de0:	2080      	movs	r0, #128	; 0x80
10002de2:	03c1      	lsls	r1, r0, #15
10002de4:	430a      	orrs	r2, r1
10002de6:	e7bb      	b.n	10002d60 <__aeabi_fadd+0x9c>
10002de8:	2d00      	cmp	r5, #0
10002dea:	d147      	bne.n	10002e7c <__aeabi_fadd+0x1b8>
10002dec:	1c50      	adds	r0, r2, #1
10002dee:	b2c3      	uxtb	r3, r0
10002df0:	2b01      	cmp	r3, #1
10002df2:	dc00      	bgt.n	10002df6 <__aeabi_fadd+0x132>
10002df4:	e096      	b.n	10002f24 <__aeabi_fadd+0x260>
10002df6:	4664      	mov	r4, ip
10002df8:	1be5      	subs	r5, r4, r7
10002dfa:	0168      	lsls	r0, r5, #5
10002dfc:	d558      	bpl.n	10002eb0 <__aeabi_fadd+0x1ec>
10002dfe:	1b3d      	subs	r5, r7, r4
10002e00:	1c0e      	adds	r6, r1, #0
10002e02:	1c14      	adds	r4, r2, #0
10002e04:	e780      	b.n	10002d08 <__aeabi_fadd+0x44>
10002e06:	24ff      	movs	r4, #255	; 0xff
10002e08:	2200      	movs	r2, #0
10002e0a:	e7ac      	b.n	10002d66 <__aeabi_fadd+0xa2>
10002e0c:	4b84      	ldr	r3, [pc, #528]	; (10003020 <__aeabi_fadd+0x35c>)
10002e0e:	1a24      	subs	r4, r4, r0
10002e10:	402b      	ands	r3, r5
10002e12:	1c65      	adds	r5, r4, #1
10002e14:	e78e      	b.n	10002d34 <__aeabi_fadd+0x70>
10002e16:	1c3e      	adds	r6, r7, #0
10002e18:	2120      	movs	r1, #32
10002e1a:	40ee      	lsrs	r6, r5
10002e1c:	1b4d      	subs	r5, r1, r5
10002e1e:	40af      	lsls	r7, r5
10002e20:	1c3b      	adds	r3, r7, #0
10002e22:	1e5f      	subs	r7, r3, #1
10002e24:	41bb      	sbcs	r3, r7
10002e26:	4333      	orrs	r3, r6
10002e28:	4667      	mov	r7, ip
10002e2a:	1afb      	subs	r3, r7, r3
10002e2c:	1c14      	adds	r4, r2, #0
10002e2e:	1c06      	adds	r6, r0, #0
10002e30:	e7ab      	b.n	10002d8a <__aeabi_fadd+0xc6>
10002e32:	0257      	lsls	r7, r2, #9
10002e34:	0a7a      	lsrs	r2, r7, #9
10002e36:	e796      	b.n	10002d66 <__aeabi_fadd+0xa2>
10002e38:	2d00      	cmp	r5, #0
10002e3a:	d17f      	bne.n	10002f3c <__aeabi_fadd+0x278>
10002e3c:	1c54      	adds	r4, r2, #1
10002e3e:	b2e1      	uxtb	r1, r4
10002e40:	2901      	cmp	r1, #1
10002e42:	dd53      	ble.n	10002eec <__aeabi_fadd+0x228>
10002e44:	2cff      	cmp	r4, #255	; 0xff
10002e46:	d100      	bne.n	10002e4a <__aeabi_fadd+0x186>
10002e48:	e09b      	b.n	10002f82 <__aeabi_fadd+0x2be>
10002e4a:	18fb      	adds	r3, r7, r3
10002e4c:	085b      	lsrs	r3, r3, #1
10002e4e:	1c95      	adds	r5, r2, #2
10002e50:	e770      	b.n	10002d34 <__aeabi_fadd+0x70>
10002e52:	2aff      	cmp	r2, #255	; 0xff
10002e54:	d192      	bne.n	10002d7c <__aeabi_fadd+0xb8>
10002e56:	1c06      	adds	r6, r0, #0
10002e58:	2080      	movs	r0, #128	; 0x80
10002e5a:	4663      	mov	r3, ip
10002e5c:	0045      	lsls	r5, r0, #1
10002e5e:	24ff      	movs	r4, #255	; 0xff
10002e60:	e768      	b.n	10002d34 <__aeabi_fadd+0x70>
10002e62:	1c67      	adds	r7, r4, #1
10002e64:	2fff      	cmp	r7, #255	; 0xff
10002e66:	d03c      	beq.n	10002ee2 <__aeabi_fadd+0x21e>
10002e68:	4a6d      	ldr	r2, [pc, #436]	; (10003020 <__aeabi_fadd+0x35c>)
10002e6a:	2601      	movs	r6, #1
10002e6c:	401e      	ands	r6, r3
10002e6e:	4013      	ands	r3, r2
10002e70:	085b      	lsrs	r3, r3, #1
10002e72:	4333      	orrs	r3, r6
10002e74:	1ca5      	adds	r5, r4, #2
10002e76:	1c06      	adds	r6, r0, #0
10002e78:	1c3c      	adds	r4, r7, #0
10002e7a:	e75b      	b.n	10002d34 <__aeabi_fadd+0x70>
10002e7c:	4268      	negs	r0, r5
10002e7e:	2a00      	cmp	r2, #0
10002e80:	d025      	beq.n	10002ece <__aeabi_fadd+0x20a>
10002e82:	2cff      	cmp	r4, #255	; 0xff
10002e84:	d070      	beq.n	10002f68 <__aeabi_fadd+0x2a4>
10002e86:	2280      	movs	r2, #128	; 0x80
10002e88:	04d6      	lsls	r6, r2, #19
10002e8a:	1c1d      	adds	r5, r3, #0
10002e8c:	4335      	orrs	r5, r6
10002e8e:	46ac      	mov	ip, r5
10002e90:	2601      	movs	r6, #1
10002e92:	281b      	cmp	r0, #27
10002e94:	dc09      	bgt.n	10002eaa <__aeabi_fadd+0x1e6>
10002e96:	4662      	mov	r2, ip
10002e98:	2520      	movs	r5, #32
10002e9a:	40c2      	lsrs	r2, r0
10002e9c:	1a2b      	subs	r3, r5, r0
10002e9e:	4660      	mov	r0, ip
10002ea0:	4098      	lsls	r0, r3
10002ea2:	1c06      	adds	r6, r0, #0
10002ea4:	1e70      	subs	r0, r6, #1
10002ea6:	4186      	sbcs	r6, r0
10002ea8:	4316      	orrs	r6, r2
10002eaa:	1bbb      	subs	r3, r7, r6
10002eac:	1c0e      	adds	r6, r1, #0
10002eae:	e727      	b.n	10002d00 <__aeabi_fadd+0x3c>
10002eb0:	1c14      	adds	r4, r2, #0
10002eb2:	2d00      	cmp	r5, #0
10002eb4:	d000      	beq.n	10002eb8 <__aeabi_fadd+0x1f4>
10002eb6:	e727      	b.n	10002d08 <__aeabi_fadd+0x44>
10002eb8:	2600      	movs	r6, #0
10002eba:	2501      	movs	r5, #1
10002ebc:	2304      	movs	r3, #4
10002ebe:	2400      	movs	r4, #0
10002ec0:	e74a      	b.n	10002d58 <__aeabi_fadd+0x94>
10002ec2:	3d01      	subs	r5, #1
10002ec4:	2d00      	cmp	r5, #0
10002ec6:	d108      	bne.n	10002eda <__aeabi_fadd+0x216>
10002ec8:	18fb      	adds	r3, r7, r3
10002eca:	1c14      	adds	r4, r2, #0
10002ecc:	e771      	b.n	10002db2 <__aeabi_fadd+0xee>
10002ece:	2b00      	cmp	r3, #0
10002ed0:	d150      	bne.n	10002f74 <__aeabi_fadd+0x2b0>
10002ed2:	1c65      	adds	r5, r4, #1
10002ed4:	1c3b      	adds	r3, r7, #0
10002ed6:	1c0e      	adds	r6, r1, #0
10002ed8:	e72c      	b.n	10002d34 <__aeabi_fadd+0x70>
10002eda:	2aff      	cmp	r2, #255	; 0xff
10002edc:	d000      	beq.n	10002ee0 <__aeabi_fadd+0x21c>
10002ede:	e762      	b.n	10002da6 <__aeabi_fadd+0xe2>
10002ee0:	e7b9      	b.n	10002e56 <__aeabi_fadd+0x192>
10002ee2:	2380      	movs	r3, #128	; 0x80
10002ee4:	005d      	lsls	r5, r3, #1
10002ee6:	24ff      	movs	r4, #255	; 0xff
10002ee8:	2304      	movs	r3, #4
10002eea:	e735      	b.n	10002d58 <__aeabi_fadd+0x94>
10002eec:	2a00      	cmp	r2, #0
10002eee:	d17c      	bne.n	10002fea <__aeabi_fadd+0x326>
10002ef0:	2b00      	cmp	r3, #0
10002ef2:	d100      	bne.n	10002ef6 <__aeabi_fadd+0x232>
10002ef4:	e0a1      	b.n	1000303a <__aeabi_fadd+0x376>
10002ef6:	2f00      	cmp	r7, #0
10002ef8:	d100      	bne.n	10002efc <__aeabi_fadd+0x238>
10002efa:	e0af      	b.n	1000305c <__aeabi_fadd+0x398>
10002efc:	18fb      	adds	r3, r7, r3
10002efe:	0159      	lsls	r1, r3, #5
10002f00:	d400      	bmi.n	10002f04 <__aeabi_fadd+0x240>
10002f02:	e0b0      	b.n	10003066 <__aeabi_fadd+0x3a2>
10002f04:	4e46      	ldr	r6, [pc, #280]	; (10003020 <__aeabi_fadd+0x35c>)
10002f06:	2502      	movs	r5, #2
10002f08:	4033      	ands	r3, r6
10002f0a:	2401      	movs	r4, #1
10002f0c:	1c06      	adds	r6, r0, #0
10002f0e:	e711      	b.n	10002d34 <__aeabi_fadd+0x70>
10002f10:	1c3c      	adds	r4, r7, #0
10002f12:	2320      	movs	r3, #32
10002f14:	40ec      	lsrs	r4, r5
10002f16:	1b5d      	subs	r5, r3, r5
10002f18:	40af      	lsls	r7, r5
10002f1a:	1c3b      	adds	r3, r7, #0
10002f1c:	1e5f      	subs	r7, r3, #1
10002f1e:	41bb      	sbcs	r3, r7
10002f20:	4323      	orrs	r3, r4
10002f22:	e744      	b.n	10002dae <__aeabi_fadd+0xea>
10002f24:	2a00      	cmp	r2, #0
10002f26:	d112      	bne.n	10002f4e <__aeabi_fadd+0x28a>
10002f28:	4665      	mov	r5, ip
10002f2a:	2d00      	cmp	r5, #0
10002f2c:	d141      	bne.n	10002fb2 <__aeabi_fadd+0x2ee>
10002f2e:	2f00      	cmp	r7, #0
10002f30:	d0c2      	beq.n	10002eb8 <__aeabi_fadd+0x1f4>
10002f32:	1c3b      	adds	r3, r7, #0
10002f34:	1c0e      	adds	r6, r1, #0
10002f36:	2501      	movs	r5, #1
10002f38:	2400      	movs	r4, #0
10002f3a:	e6fb      	b.n	10002d34 <__aeabi_fadd+0x70>
10002f3c:	426d      	negs	r5, r5
10002f3e:	2a00      	cmp	r2, #0
10002f40:	d123      	bne.n	10002f8a <__aeabi_fadd+0x2c6>
10002f42:	2b00      	cmp	r3, #0
10002f44:	d166      	bne.n	10003014 <__aeabi_fadd+0x350>
10002f46:	1c65      	adds	r5, r4, #1
10002f48:	1c3b      	adds	r3, r7, #0
10002f4a:	1c06      	adds	r6, r0, #0
10002f4c:	e6f2      	b.n	10002d34 <__aeabi_fadd+0x70>
10002f4e:	4662      	mov	r2, ip
10002f50:	2a00      	cmp	r2, #0
10002f52:	d138      	bne.n	10002fc6 <__aeabi_fadd+0x302>
10002f54:	2f00      	cmp	r7, #0
10002f56:	d107      	bne.n	10002f68 <__aeabi_fadd+0x2a4>
10002f58:	2280      	movs	r2, #128	; 0x80
10002f5a:	2600      	movs	r6, #0
10002f5c:	0055      	lsls	r5, r2, #1
10002f5e:	4b31      	ldr	r3, [pc, #196]	; (10003024 <__aeabi_fadd+0x360>)
10002f60:	24ff      	movs	r4, #255	; 0xff
10002f62:	e6f9      	b.n	10002d58 <__aeabi_fadd+0x94>
10002f64:	2cff      	cmp	r4, #255	; 0xff
10002f66:	d193      	bne.n	10002e90 <__aeabi_fadd+0x1cc>
10002f68:	1c3b      	adds	r3, r7, #0
10002f6a:	2780      	movs	r7, #128	; 0x80
10002f6c:	1c0e      	adds	r6, r1, #0
10002f6e:	007d      	lsls	r5, r7, #1
10002f70:	24ff      	movs	r4, #255	; 0xff
10002f72:	e6df      	b.n	10002d34 <__aeabi_fadd+0x70>
10002f74:	3801      	subs	r0, #1
10002f76:	2800      	cmp	r0, #0
10002f78:	d1f4      	bne.n	10002f64 <__aeabi_fadd+0x2a0>
10002f7a:	4666      	mov	r6, ip
10002f7c:	1bbb      	subs	r3, r7, r6
10002f7e:	1c0e      	adds	r6, r1, #0
10002f80:	e6be      	b.n	10002d00 <__aeabi_fadd+0x3c>
10002f82:	2780      	movs	r7, #128	; 0x80
10002f84:	007d      	lsls	r5, r7, #1
10002f86:	2304      	movs	r3, #4
10002f88:	e6e6      	b.n	10002d58 <__aeabi_fadd+0x94>
10002f8a:	2cff      	cmp	r4, #255	; 0xff
10002f8c:	d05c      	beq.n	10003048 <__aeabi_fadd+0x384>
10002f8e:	2280      	movs	r2, #128	; 0x80
10002f90:	04d1      	lsls	r1, r2, #19
10002f92:	430b      	orrs	r3, r1
10002f94:	469c      	mov	ip, r3
10002f96:	2301      	movs	r3, #1
10002f98:	2d1b      	cmp	r5, #27
10002f9a:	dc08      	bgt.n	10002fae <__aeabi_fadd+0x2ea>
10002f9c:	2120      	movs	r1, #32
10002f9e:	4662      	mov	r2, ip
10002fa0:	40ea      	lsrs	r2, r5
10002fa2:	4663      	mov	r3, ip
10002fa4:	1b4d      	subs	r5, r1, r5
10002fa6:	40ab      	lsls	r3, r5
10002fa8:	1e59      	subs	r1, r3, #1
10002faa:	418b      	sbcs	r3, r1
10002fac:	4313      	orrs	r3, r2
10002fae:	19db      	adds	r3, r3, r7
10002fb0:	e6ff      	b.n	10002db2 <__aeabi_fadd+0xee>
10002fb2:	2f00      	cmp	r7, #0
10002fb4:	d038      	beq.n	10003028 <__aeabi_fadd+0x364>
10002fb6:	1beb      	subs	r3, r5, r7
10002fb8:	015a      	lsls	r2, r3, #5
10002fba:	d54b      	bpl.n	10003054 <__aeabi_fadd+0x390>
10002fbc:	1b7b      	subs	r3, r7, r5
10002fbe:	1c0e      	adds	r6, r1, #0
10002fc0:	2501      	movs	r5, #1
10002fc2:	2400      	movs	r4, #0
10002fc4:	e6b6      	b.n	10002d34 <__aeabi_fadd+0x70>
10002fc6:	2f00      	cmp	r7, #0
10002fc8:	d100      	bne.n	10002fcc <__aeabi_fadd+0x308>
10002fca:	e700      	b.n	10002dce <__aeabi_fadd+0x10a>
10002fcc:	2080      	movs	r0, #128	; 0x80
10002fce:	08d3      	lsrs	r3, r2, #3
10002fd0:	03c4      	lsls	r4, r0, #15
10002fd2:	4223      	tst	r3, r4
10002fd4:	d004      	beq.n	10002fe0 <__aeabi_fadd+0x31c>
10002fd6:	08ff      	lsrs	r7, r7, #3
10002fd8:	4227      	tst	r7, r4
10002fda:	d101      	bne.n	10002fe0 <__aeabi_fadd+0x31c>
10002fdc:	1c3b      	adds	r3, r7, #0
10002fde:	1c0e      	adds	r6, r1, #0
10002fe0:	2180      	movs	r1, #128	; 0x80
10002fe2:	00db      	lsls	r3, r3, #3
10002fe4:	004d      	lsls	r5, r1, #1
10002fe6:	24ff      	movs	r4, #255	; 0xff
10002fe8:	e6a4      	b.n	10002d34 <__aeabi_fadd+0x70>
10002fea:	2b00      	cmp	r3, #0
10002fec:	d020      	beq.n	10003030 <__aeabi_fadd+0x36c>
10002fee:	2f00      	cmp	r7, #0
10002ff0:	d100      	bne.n	10002ff4 <__aeabi_fadd+0x330>
10002ff2:	e6ec      	b.n	10002dce <__aeabi_fadd+0x10a>
10002ff4:	2280      	movs	r2, #128	; 0x80
10002ff6:	08de      	lsrs	r6, r3, #3
10002ff8:	03d5      	lsls	r5, r2, #15
10002ffa:	1c31      	adds	r1, r6, #0
10002ffc:	422e      	tst	r6, r5
10002ffe:	d003      	beq.n	10003008 <__aeabi_fadd+0x344>
10003000:	08f9      	lsrs	r1, r7, #3
10003002:	4229      	tst	r1, r5
10003004:	d000      	beq.n	10003008 <__aeabi_fadd+0x344>
10003006:	1c31      	adds	r1, r6, #0
10003008:	1c06      	adds	r6, r0, #0
1000300a:	2080      	movs	r0, #128	; 0x80
1000300c:	00cb      	lsls	r3, r1, #3
1000300e:	0045      	lsls	r5, r0, #1
10003010:	24ff      	movs	r4, #255	; 0xff
10003012:	e68f      	b.n	10002d34 <__aeabi_fadd+0x70>
10003014:	3d01      	subs	r5, #1
10003016:	2d00      	cmp	r5, #0
10003018:	d114      	bne.n	10003044 <__aeabi_fadd+0x380>
1000301a:	18fb      	adds	r3, r7, r3
1000301c:	e6c9      	b.n	10002db2 <__aeabi_fadd+0xee>
1000301e:	46c0      	nop			; (mov r8, r8)
10003020:	fbffffff 	.word	0xfbffffff
10003024:	03fffffc 	.word	0x03fffffc
10003028:	4663      	mov	r3, ip
1000302a:	2501      	movs	r5, #1
1000302c:	2400      	movs	r4, #0
1000302e:	e681      	b.n	10002d34 <__aeabi_fadd+0x70>
10003030:	2480      	movs	r4, #128	; 0x80
10003032:	0065      	lsls	r5, r4, #1
10003034:	1c3b      	adds	r3, r7, #0
10003036:	24ff      	movs	r4, #255	; 0xff
10003038:	e67c      	b.n	10002d34 <__aeabi_fadd+0x70>
1000303a:	1c3b      	adds	r3, r7, #0
1000303c:	1c06      	adds	r6, r0, #0
1000303e:	2501      	movs	r5, #1
10003040:	2400      	movs	r4, #0
10003042:	e677      	b.n	10002d34 <__aeabi_fadd+0x70>
10003044:	2cff      	cmp	r4, #255	; 0xff
10003046:	d1a6      	bne.n	10002f96 <__aeabi_fadd+0x2d2>
10003048:	1c3b      	adds	r3, r7, #0
1000304a:	2780      	movs	r7, #128	; 0x80
1000304c:	1c06      	adds	r6, r0, #0
1000304e:	007d      	lsls	r5, r7, #1
10003050:	24ff      	movs	r4, #255	; 0xff
10003052:	e66f      	b.n	10002d34 <__aeabi_fadd+0x70>
10003054:	2b00      	cmp	r3, #0
10003056:	d100      	bne.n	1000305a <__aeabi_fadd+0x396>
10003058:	e72e      	b.n	10002eb8 <__aeabi_fadd+0x1f4>
1000305a:	e669      	b.n	10002d30 <__aeabi_fadd+0x6c>
1000305c:	4663      	mov	r3, ip
1000305e:	1c06      	adds	r6, r0, #0
10003060:	2501      	movs	r5, #1
10003062:	2400      	movs	r4, #0
10003064:	e666      	b.n	10002d34 <__aeabi_fadd+0x70>
10003066:	1c06      	adds	r6, r0, #0
10003068:	2501      	movs	r5, #1
1000306a:	2400      	movs	r4, #0
1000306c:	e662      	b.n	10002d34 <__aeabi_fadd+0x70>
1000306e:	46c0      	nop			; (mov r8, r8)

10003070 <__aeabi_fdiv>:
10003070:	b5f0      	push	{r4, r5, r6, r7, lr}
10003072:	465f      	mov	r7, fp
10003074:	4656      	mov	r6, sl
10003076:	464d      	mov	r5, r9
10003078:	4644      	mov	r4, r8
1000307a:	b4f0      	push	{r4, r5, r6, r7}
1000307c:	0245      	lsls	r5, r0, #9
1000307e:	0044      	lsls	r4, r0, #1
10003080:	b083      	sub	sp, #12
10003082:	1c0e      	adds	r6, r1, #0
10003084:	0a6d      	lsrs	r5, r5, #9
10003086:	0e24      	lsrs	r4, r4, #24
10003088:	0fc7      	lsrs	r7, r0, #31
1000308a:	2c00      	cmp	r4, #0
1000308c:	d107      	bne.n	1000309e <__aeabi_fdiv+0x2e>
1000308e:	2d00      	cmp	r5, #0
10003090:	d000      	beq.n	10003094 <__aeabi_fdiv+0x24>
10003092:	e091      	b.n	100031b8 <__aeabi_fdiv+0x148>
10003094:	2104      	movs	r1, #4
10003096:	2201      	movs	r2, #1
10003098:	4688      	mov	r8, r1
1000309a:	4692      	mov	sl, r2
1000309c:	e009      	b.n	100030b2 <__aeabi_fdiv+0x42>
1000309e:	2cff      	cmp	r4, #255	; 0xff
100030a0:	d055      	beq.n	1000314e <__aeabi_fdiv+0xde>
100030a2:	2380      	movs	r3, #128	; 0x80
100030a4:	0418      	lsls	r0, r3, #16
100030a6:	2100      	movs	r1, #0
100030a8:	4305      	orrs	r5, r0
100030aa:	00ed      	lsls	r5, r5, #3
100030ac:	3c7f      	subs	r4, #127	; 0x7f
100030ae:	4688      	mov	r8, r1
100030b0:	468a      	mov	sl, r1
100030b2:	1c33      	adds	r3, r6, #0
100030b4:	0058      	lsls	r0, r3, #1
100030b6:	0276      	lsls	r6, r6, #9
100030b8:	0fd9      	lsrs	r1, r3, #31
100030ba:	0a76      	lsrs	r6, r6, #9
100030bc:	0e00      	lsrs	r0, r0, #24
100030be:	468b      	mov	fp, r1
100030c0:	d14c      	bne.n	1000315c <__aeabi_fdiv+0xec>
100030c2:	2201      	movs	r2, #1
100030c4:	4694      	mov	ip, r2
100030c6:	2e00      	cmp	r6, #0
100030c8:	d000      	beq.n	100030cc <__aeabi_fdiv+0x5c>
100030ca:	e081      	b.n	100031d0 <__aeabi_fdiv+0x160>
100030cc:	465b      	mov	r3, fp
100030ce:	407b      	eors	r3, r7
100030d0:	4662      	mov	r2, ip
100030d2:	4641      	mov	r1, r8
100030d4:	9301      	str	r3, [sp, #4]
100030d6:	430a      	orrs	r2, r1
100030d8:	2a0f      	cmp	r2, #15
100030da:	d950      	bls.n	1000317e <__aeabi_fdiv+0x10e>
100030dc:	1a20      	subs	r0, r4, r0
100030de:	0169      	lsls	r1, r5, #5
100030e0:	4681      	mov	r9, r0
100030e2:	0175      	lsls	r5, r6, #5
100030e4:	42a9      	cmp	r1, r5
100030e6:	d300      	bcc.n	100030ea <__aeabi_fdiv+0x7a>
100030e8:	e0b3      	b.n	10003252 <__aeabi_fdiv+0x1e2>
100030ea:	2201      	movs	r2, #1
100030ec:	4253      	negs	r3, r2
100030ee:	4499      	add	r9, r3
100030f0:	241b      	movs	r4, #27
100030f2:	2600      	movs	r6, #0
100030f4:	2701      	movs	r7, #1
100030f6:	1e62      	subs	r2, r4, #1
100030f8:	1c38      	adds	r0, r7, #0
100030fa:	4010      	ands	r0, r2
100030fc:	004b      	lsls	r3, r1, #1
100030fe:	0076      	lsls	r6, r6, #1
10003100:	2900      	cmp	r1, #0
10003102:	da00      	bge.n	10003106 <__aeabi_fdiv+0x96>
10003104:	e0a9      	b.n	1000325a <__aeabi_fdiv+0x1ea>
10003106:	429d      	cmp	r5, r3
10003108:	d800      	bhi.n	1000310c <__aeabi_fdiv+0x9c>
1000310a:	e0a6      	b.n	1000325a <__aeabi_fdiv+0x1ea>
1000310c:	3c01      	subs	r4, #1
1000310e:	2c00      	cmp	r4, #0
10003110:	dc00      	bgt.n	10003114 <__aeabi_fdiv+0xa4>
10003112:	e0ab      	b.n	1000326c <__aeabi_fdiv+0x1fc>
10003114:	2800      	cmp	r0, #0
10003116:	d00c      	beq.n	10003132 <__aeabi_fdiv+0xc2>
10003118:	1c19      	adds	r1, r3, #0
1000311a:	0076      	lsls	r6, r6, #1
1000311c:	005b      	lsls	r3, r3, #1
1000311e:	2900      	cmp	r1, #0
10003120:	db01      	blt.n	10003126 <__aeabi_fdiv+0xb6>
10003122:	429d      	cmp	r5, r3
10003124:	d801      	bhi.n	1000312a <__aeabi_fdiv+0xba>
10003126:	1b5b      	subs	r3, r3, r5
10003128:	433e      	orrs	r6, r7
1000312a:	3c01      	subs	r4, #1
1000312c:	2c00      	cmp	r4, #0
1000312e:	dc00      	bgt.n	10003132 <__aeabi_fdiv+0xc2>
10003130:	e09c      	b.n	1000326c <__aeabi_fdiv+0x1fc>
10003132:	0059      	lsls	r1, r3, #1
10003134:	0072      	lsls	r2, r6, #1
10003136:	2b00      	cmp	r3, #0
10003138:	db01      	blt.n	1000313e <__aeabi_fdiv+0xce>
1000313a:	428d      	cmp	r5, r1
1000313c:	d801      	bhi.n	10003142 <__aeabi_fdiv+0xd2>
1000313e:	1b49      	subs	r1, r1, r5
10003140:	433a      	orrs	r2, r7
10003142:	3c01      	subs	r4, #1
10003144:	004b      	lsls	r3, r1, #1
10003146:	0056      	lsls	r6, r2, #1
10003148:	2900      	cmp	r1, #0
1000314a:	daea      	bge.n	10003122 <__aeabi_fdiv+0xb2>
1000314c:	e7eb      	b.n	10003126 <__aeabi_fdiv+0xb6>
1000314e:	2d00      	cmp	r5, #0
10003150:	d12d      	bne.n	100031ae <__aeabi_fdiv+0x13e>
10003152:	2008      	movs	r0, #8
10003154:	2102      	movs	r1, #2
10003156:	4680      	mov	r8, r0
10003158:	468a      	mov	sl, r1
1000315a:	e7aa      	b.n	100030b2 <__aeabi_fdiv+0x42>
1000315c:	28ff      	cmp	r0, #255	; 0xff
1000315e:	d020      	beq.n	100031a2 <__aeabi_fdiv+0x132>
10003160:	2280      	movs	r2, #128	; 0x80
10003162:	0413      	lsls	r3, r2, #16
10003164:	2100      	movs	r1, #0
10003166:	431e      	orrs	r6, r3
10003168:	468c      	mov	ip, r1
1000316a:	465b      	mov	r3, fp
1000316c:	407b      	eors	r3, r7
1000316e:	4662      	mov	r2, ip
10003170:	4641      	mov	r1, r8
10003172:	00f6      	lsls	r6, r6, #3
10003174:	387f      	subs	r0, #127	; 0x7f
10003176:	9301      	str	r3, [sp, #4]
10003178:	430a      	orrs	r2, r1
1000317a:	2a0f      	cmp	r2, #15
1000317c:	d8ae      	bhi.n	100030dc <__aeabi_fdiv+0x6c>
1000317e:	4956      	ldr	r1, [pc, #344]	; (100032d8 <__aeabi_fdiv+0x268>)
10003180:	0092      	lsls	r2, r2, #2
10003182:	588a      	ldr	r2, [r1, r2]
10003184:	4697      	mov	pc, r2
10003186:	9b01      	ldr	r3, [sp, #4]
10003188:	26ff      	movs	r6, #255	; 0xff
1000318a:	2500      	movs	r5, #0
1000318c:	05f0      	lsls	r0, r6, #23
1000318e:	4328      	orrs	r0, r5
10003190:	07de      	lsls	r6, r3, #31
10003192:	4330      	orrs	r0, r6
10003194:	b003      	add	sp, #12
10003196:	bc3c      	pop	{r2, r3, r4, r5}
10003198:	4690      	mov	r8, r2
1000319a:	4699      	mov	r9, r3
1000319c:	46a2      	mov	sl, r4
1000319e:	46ab      	mov	fp, r5
100031a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031a2:	1c33      	adds	r3, r6, #0
100031a4:	1e5a      	subs	r2, r3, #1
100031a6:	4193      	sbcs	r3, r2
100031a8:	3302      	adds	r3, #2
100031aa:	469c      	mov	ip, r3
100031ac:	e78e      	b.n	100030cc <__aeabi_fdiv+0x5c>
100031ae:	220c      	movs	r2, #12
100031b0:	2303      	movs	r3, #3
100031b2:	4690      	mov	r8, r2
100031b4:	469a      	mov	sl, r3
100031b6:	e77c      	b.n	100030b2 <__aeabi_fdiv+0x42>
100031b8:	1c28      	adds	r0, r5, #0
100031ba:	f000 fcc9 	bl	10003b50 <__clzsi2>
100031be:	2276      	movs	r2, #118	; 0x76
100031c0:	1f44      	subs	r4, r0, #5
100031c2:	4253      	negs	r3, r2
100031c4:	40a5      	lsls	r5, r4
100031c6:	1a1c      	subs	r4, r3, r0
100031c8:	2000      	movs	r0, #0
100031ca:	4680      	mov	r8, r0
100031cc:	4682      	mov	sl, r0
100031ce:	e770      	b.n	100030b2 <__aeabi_fdiv+0x42>
100031d0:	1c30      	adds	r0, r6, #0
100031d2:	f000 fcbd 	bl	10003b50 <__clzsi2>
100031d6:	2376      	movs	r3, #118	; 0x76
100031d8:	1f41      	subs	r1, r0, #5
100031da:	408e      	lsls	r6, r1
100031dc:	425a      	negs	r2, r3
100031de:	2100      	movs	r1, #0
100031e0:	1a10      	subs	r0, r2, r0
100031e2:	468c      	mov	ip, r1
100031e4:	e772      	b.n	100030cc <__aeabi_fdiv+0x5c>
100031e6:	2300      	movs	r3, #0
100031e8:	4d3c      	ldr	r5, [pc, #240]	; (100032dc <__aeabi_fdiv+0x26c>)
100031ea:	26ff      	movs	r6, #255	; 0xff
100031ec:	e7ce      	b.n	1000318c <__aeabi_fdiv+0x11c>
100031ee:	465f      	mov	r7, fp
100031f0:	1c35      	adds	r5, r6, #0
100031f2:	9701      	str	r7, [sp, #4]
100031f4:	4663      	mov	r3, ip
100031f6:	2b02      	cmp	r3, #2
100031f8:	d0c5      	beq.n	10003186 <__aeabi_fdiv+0x116>
100031fa:	2b03      	cmp	r3, #3
100031fc:	d063      	beq.n	100032c6 <__aeabi_fdiv+0x256>
100031fe:	2b01      	cmp	r3, #1
10003200:	d043      	beq.n	1000328a <__aeabi_fdiv+0x21a>
10003202:	4649      	mov	r1, r9
10003204:	317f      	adds	r1, #127	; 0x7f
10003206:	2900      	cmp	r1, #0
10003208:	dd35      	ble.n	10003276 <__aeabi_fdiv+0x206>
1000320a:	270f      	movs	r7, #15
1000320c:	402f      	ands	r7, r5
1000320e:	2f04      	cmp	r7, #4
10003210:	d000      	beq.n	10003214 <__aeabi_fdiv+0x1a4>
10003212:	3504      	adds	r5, #4
10003214:	012b      	lsls	r3, r5, #4
10003216:	d503      	bpl.n	10003220 <__aeabi_fdiv+0x1b0>
10003218:	4a31      	ldr	r2, [pc, #196]	; (100032e0 <__aeabi_fdiv+0x270>)
1000321a:	4649      	mov	r1, r9
1000321c:	4015      	ands	r5, r2
1000321e:	3180      	adds	r1, #128	; 0x80
10003220:	29fe      	cmp	r1, #254	; 0xfe
10003222:	dcb0      	bgt.n	10003186 <__aeabi_fdiv+0x116>
10003224:	01a8      	lsls	r0, r5, #6
10003226:	0a45      	lsrs	r5, r0, #9
10003228:	b2ce      	uxtb	r6, r1
1000322a:	9b01      	ldr	r3, [sp, #4]
1000322c:	e7ae      	b.n	1000318c <__aeabi_fdiv+0x11c>
1000322e:	2600      	movs	r6, #0
10003230:	2500      	movs	r5, #0
10003232:	e7ab      	b.n	1000318c <__aeabi_fdiv+0x11c>
10003234:	2080      	movs	r0, #128	; 0x80
10003236:	03c1      	lsls	r1, r0, #15
10003238:	420d      	tst	r5, r1
1000323a:	d011      	beq.n	10003260 <__aeabi_fdiv+0x1f0>
1000323c:	420e      	tst	r6, r1
1000323e:	d10f      	bne.n	10003260 <__aeabi_fdiv+0x1f0>
10003240:	430e      	orrs	r6, r1
10003242:	0273      	lsls	r3, r6, #9
10003244:	0a5d      	lsrs	r5, r3, #9
10003246:	26ff      	movs	r6, #255	; 0xff
10003248:	465b      	mov	r3, fp
1000324a:	e79f      	b.n	1000318c <__aeabi_fdiv+0x11c>
1000324c:	9701      	str	r7, [sp, #4]
1000324e:	4653      	mov	r3, sl
10003250:	e7d1      	b.n	100031f6 <__aeabi_fdiv+0x186>
10003252:	1b49      	subs	r1, r1, r5
10003254:	241a      	movs	r4, #26
10003256:	2601      	movs	r6, #1
10003258:	e74c      	b.n	100030f4 <__aeabi_fdiv+0x84>
1000325a:	1b5b      	subs	r3, r3, r5
1000325c:	433e      	orrs	r6, r7
1000325e:	e755      	b.n	1000310c <__aeabi_fdiv+0x9c>
10003260:	430d      	orrs	r5, r1
10003262:	026a      	lsls	r2, r5, #9
10003264:	0a55      	lsrs	r5, r2, #9
10003266:	1c3b      	adds	r3, r7, #0
10003268:	26ff      	movs	r6, #255	; 0xff
1000326a:	e78f      	b.n	1000318c <__aeabi_fdiv+0x11c>
1000326c:	1c1d      	adds	r5, r3, #0
1000326e:	1e6b      	subs	r3, r5, #1
10003270:	419d      	sbcs	r5, r3
10003272:	4335      	orrs	r5, r6
10003274:	e7c5      	b.n	10003202 <__aeabi_fdiv+0x192>
10003276:	247e      	movs	r4, #126	; 0x7e
10003278:	4267      	negs	r7, r4
1000327a:	464a      	mov	r2, r9
1000327c:	1ab9      	subs	r1, r7, r2
1000327e:	291b      	cmp	r1, #27
10003280:	dd08      	ble.n	10003294 <__aeabi_fdiv+0x224>
10003282:	9b01      	ldr	r3, [sp, #4]
10003284:	2600      	movs	r6, #0
10003286:	2500      	movs	r5, #0
10003288:	e780      	b.n	1000318c <__aeabi_fdiv+0x11c>
1000328a:	9d01      	ldr	r5, [sp, #4]
1000328c:	2600      	movs	r6, #0
1000328e:	402b      	ands	r3, r5
10003290:	2500      	movs	r5, #0
10003292:	e77b      	b.n	1000318c <__aeabi_fdiv+0x11c>
10003294:	464e      	mov	r6, r9
10003296:	369e      	adds	r6, #158	; 0x9e
10003298:	1c28      	adds	r0, r5, #0
1000329a:	40b5      	lsls	r5, r6
1000329c:	1c2b      	adds	r3, r5, #0
1000329e:	1e5d      	subs	r5, r3, #1
100032a0:	41ab      	sbcs	r3, r5
100032a2:	40c8      	lsrs	r0, r1
100032a4:	4303      	orrs	r3, r0
100032a6:	250f      	movs	r5, #15
100032a8:	401d      	ands	r5, r3
100032aa:	2d04      	cmp	r5, #4
100032ac:	d000      	beq.n	100032b0 <__aeabi_fdiv+0x240>
100032ae:	3304      	adds	r3, #4
100032b0:	015a      	lsls	r2, r3, #5
100032b2:	d503      	bpl.n	100032bc <__aeabi_fdiv+0x24c>
100032b4:	9b01      	ldr	r3, [sp, #4]
100032b6:	2601      	movs	r6, #1
100032b8:	2500      	movs	r5, #0
100032ba:	e767      	b.n	1000318c <__aeabi_fdiv+0x11c>
100032bc:	019c      	lsls	r4, r3, #6
100032be:	0a65      	lsrs	r5, r4, #9
100032c0:	9b01      	ldr	r3, [sp, #4]
100032c2:	2600      	movs	r6, #0
100032c4:	e762      	b.n	1000318c <__aeabi_fdiv+0x11c>
100032c6:	2780      	movs	r7, #128	; 0x80
100032c8:	03fc      	lsls	r4, r7, #15
100032ca:	4325      	orrs	r5, r4
100032cc:	026e      	lsls	r6, r5, #9
100032ce:	0a75      	lsrs	r5, r6, #9
100032d0:	9b01      	ldr	r3, [sp, #4]
100032d2:	26ff      	movs	r6, #255	; 0xff
100032d4:	e75a      	b.n	1000318c <__aeabi_fdiv+0x11c>
100032d6:	46c0      	nop			; (mov r8, r8)
100032d8:	10003bc8 	.word	0x10003bc8
100032dc:	007fffff 	.word	0x007fffff
100032e0:	f7ffffff 	.word	0xf7ffffff

100032e4 <__eqsf2>:
100032e4:	0243      	lsls	r3, r0, #9
100032e6:	0042      	lsls	r2, r0, #1
100032e8:	b570      	push	{r4, r5, r6, lr}
100032ea:	0a5c      	lsrs	r4, r3, #9
100032ec:	0fc6      	lsrs	r6, r0, #31
100032ee:	0e13      	lsrs	r3, r2, #24
100032f0:	0248      	lsls	r0, r1, #9
100032f2:	004a      	lsls	r2, r1, #1
100032f4:	0a45      	lsrs	r5, r0, #9
100032f6:	0e12      	lsrs	r2, r2, #24
100032f8:	0fc9      	lsrs	r1, r1, #31
100032fa:	2bff      	cmp	r3, #255	; 0xff
100032fc:	d005      	beq.n	1000330a <__eqsf2+0x26>
100032fe:	2aff      	cmp	r2, #255	; 0xff
10003300:	d008      	beq.n	10003314 <__eqsf2+0x30>
10003302:	2001      	movs	r0, #1
10003304:	4293      	cmp	r3, r2
10003306:	d00b      	beq.n	10003320 <__eqsf2+0x3c>
10003308:	bd70      	pop	{r4, r5, r6, pc}
1000330a:	2001      	movs	r0, #1
1000330c:	2c00      	cmp	r4, #0
1000330e:	d1fb      	bne.n	10003308 <__eqsf2+0x24>
10003310:	2aff      	cmp	r2, #255	; 0xff
10003312:	d1f6      	bne.n	10003302 <__eqsf2+0x1e>
10003314:	2001      	movs	r0, #1
10003316:	2d00      	cmp	r5, #0
10003318:	d1f6      	bne.n	10003308 <__eqsf2+0x24>
1000331a:	2001      	movs	r0, #1
1000331c:	4293      	cmp	r3, r2
1000331e:	d1f3      	bne.n	10003308 <__eqsf2+0x24>
10003320:	42ac      	cmp	r4, r5
10003322:	d1f1      	bne.n	10003308 <__eqsf2+0x24>
10003324:	428e      	cmp	r6, r1
10003326:	d003      	beq.n	10003330 <__eqsf2+0x4c>
10003328:	2b00      	cmp	r3, #0
1000332a:	d1ed      	bne.n	10003308 <__eqsf2+0x24>
1000332c:	2c00      	cmp	r4, #0
1000332e:	d1eb      	bne.n	10003308 <__eqsf2+0x24>
10003330:	2000      	movs	r0, #0
10003332:	e7e9      	b.n	10003308 <__eqsf2+0x24>

10003334 <__gesf2>:
10003334:	b5f0      	push	{r4, r5, r6, r7, lr}
10003336:	0243      	lsls	r3, r0, #9
10003338:	0042      	lsls	r2, r0, #1
1000333a:	004f      	lsls	r7, r1, #1
1000333c:	0fc6      	lsrs	r6, r0, #31
1000333e:	0248      	lsls	r0, r1, #9
10003340:	0a5c      	lsrs	r4, r3, #9
10003342:	0a45      	lsrs	r5, r0, #9
10003344:	0e13      	lsrs	r3, r2, #24
10003346:	0fc9      	lsrs	r1, r1, #31
10003348:	0e3a      	lsrs	r2, r7, #24
1000334a:	2bff      	cmp	r3, #255	; 0xff
1000334c:	d026      	beq.n	1000339c <__gesf2+0x68>
1000334e:	2aff      	cmp	r2, #255	; 0xff
10003350:	d029      	beq.n	100033a6 <__gesf2+0x72>
10003352:	2b00      	cmp	r3, #0
10003354:	d10c      	bne.n	10003370 <__gesf2+0x3c>
10003356:	4260      	negs	r0, r4
10003358:	4160      	adcs	r0, r4
1000335a:	4684      	mov	ip, r0
1000335c:	2a00      	cmp	r2, #0
1000335e:	d00a      	beq.n	10003376 <__gesf2+0x42>
10003360:	2800      	cmp	r0, #0
10003362:	d116      	bne.n	10003392 <__gesf2+0x5e>
10003364:	428e      	cmp	r6, r1
10003366:	d021      	beq.n	100033ac <__gesf2+0x78>
10003368:	2e00      	cmp	r6, #0
1000336a:	d114      	bne.n	10003396 <__gesf2+0x62>
1000336c:	2001      	movs	r0, #1
1000336e:	e014      	b.n	1000339a <__gesf2+0x66>
10003370:	2a00      	cmp	r2, #0
10003372:	d1f7      	bne.n	10003364 <__gesf2+0x30>
10003374:	4694      	mov	ip, r2
10003376:	426f      	negs	r7, r5
10003378:	416f      	adcs	r7, r5
1000337a:	4660      	mov	r0, ip
1000337c:	2800      	cmp	r0, #0
1000337e:	d105      	bne.n	1000338c <__gesf2+0x58>
10003380:	2f00      	cmp	r7, #0
10003382:	d0ef      	beq.n	10003364 <__gesf2+0x30>
10003384:	2001      	movs	r0, #1
10003386:	2e00      	cmp	r6, #0
10003388:	d007      	beq.n	1000339a <__gesf2+0x66>
1000338a:	e004      	b.n	10003396 <__gesf2+0x62>
1000338c:	2000      	movs	r0, #0
1000338e:	2f00      	cmp	r7, #0
10003390:	d103      	bne.n	1000339a <__gesf2+0x66>
10003392:	2900      	cmp	r1, #0
10003394:	d1ea      	bne.n	1000336c <__gesf2+0x38>
10003396:	2101      	movs	r1, #1
10003398:	4248      	negs	r0, r1
1000339a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000339c:	2c00      	cmp	r4, #0
1000339e:	d0d6      	beq.n	1000334e <__gesf2+0x1a>
100033a0:	2202      	movs	r2, #2
100033a2:	4250      	negs	r0, r2
100033a4:	e7f9      	b.n	1000339a <__gesf2+0x66>
100033a6:	2d00      	cmp	r5, #0
100033a8:	d0d3      	beq.n	10003352 <__gesf2+0x1e>
100033aa:	e7f9      	b.n	100033a0 <__gesf2+0x6c>
100033ac:	4293      	cmp	r3, r2
100033ae:	dcdb      	bgt.n	10003368 <__gesf2+0x34>
100033b0:	db04      	blt.n	100033bc <__gesf2+0x88>
100033b2:	42ac      	cmp	r4, r5
100033b4:	d8d8      	bhi.n	10003368 <__gesf2+0x34>
100033b6:	2000      	movs	r0, #0
100033b8:	42ac      	cmp	r4, r5
100033ba:	d2ee      	bcs.n	1000339a <__gesf2+0x66>
100033bc:	2e00      	cmp	r6, #0
100033be:	d0ea      	beq.n	10003396 <__gesf2+0x62>
100033c0:	2001      	movs	r0, #1
100033c2:	e7ea      	b.n	1000339a <__gesf2+0x66>

100033c4 <__lesf2>:
100033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100033c6:	0243      	lsls	r3, r0, #9
100033c8:	0042      	lsls	r2, r0, #1
100033ca:	004f      	lsls	r7, r1, #1
100033cc:	0fc6      	lsrs	r6, r0, #31
100033ce:	0248      	lsls	r0, r1, #9
100033d0:	0a5c      	lsrs	r4, r3, #9
100033d2:	0a45      	lsrs	r5, r0, #9
100033d4:	0e13      	lsrs	r3, r2, #24
100033d6:	0fc9      	lsrs	r1, r1, #31
100033d8:	0e3a      	lsrs	r2, r7, #24
100033da:	2bff      	cmp	r3, #255	; 0xff
100033dc:	d026      	beq.n	1000342c <__lesf2+0x68>
100033de:	2aff      	cmp	r2, #255	; 0xff
100033e0:	d028      	beq.n	10003434 <__lesf2+0x70>
100033e2:	2b00      	cmp	r3, #0
100033e4:	d00f      	beq.n	10003406 <__lesf2+0x42>
100033e6:	2a00      	cmp	r2, #0
100033e8:	d114      	bne.n	10003414 <__lesf2+0x50>
100033ea:	4694      	mov	ip, r2
100033ec:	426f      	negs	r7, r5
100033ee:	416f      	adcs	r7, r5
100033f0:	4660      	mov	r0, ip
100033f2:	2800      	cmp	r0, #0
100033f4:	d014      	beq.n	10003420 <__lesf2+0x5c>
100033f6:	2000      	movs	r0, #0
100033f8:	2f00      	cmp	r7, #0
100033fa:	d103      	bne.n	10003404 <__lesf2+0x40>
100033fc:	2900      	cmp	r1, #0
100033fe:	d10d      	bne.n	1000341c <__lesf2+0x58>
10003400:	2101      	movs	r1, #1
10003402:	4248      	negs	r0, r1
10003404:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003406:	4260      	negs	r0, r4
10003408:	4160      	adcs	r0, r4
1000340a:	4684      	mov	ip, r0
1000340c:	2a00      	cmp	r2, #0
1000340e:	d0ed      	beq.n	100033ec <__lesf2+0x28>
10003410:	2800      	cmp	r0, #0
10003412:	d1f3      	bne.n	100033fc <__lesf2+0x38>
10003414:	428e      	cmp	r6, r1
10003416:	d011      	beq.n	1000343c <__lesf2+0x78>
10003418:	2e00      	cmp	r6, #0
1000341a:	d1f1      	bne.n	10003400 <__lesf2+0x3c>
1000341c:	2001      	movs	r0, #1
1000341e:	e7f1      	b.n	10003404 <__lesf2+0x40>
10003420:	2f00      	cmp	r7, #0
10003422:	d0f7      	beq.n	10003414 <__lesf2+0x50>
10003424:	2001      	movs	r0, #1
10003426:	2e00      	cmp	r6, #0
10003428:	d0ec      	beq.n	10003404 <__lesf2+0x40>
1000342a:	e7e9      	b.n	10003400 <__lesf2+0x3c>
1000342c:	2002      	movs	r0, #2
1000342e:	2c00      	cmp	r4, #0
10003430:	d1e8      	bne.n	10003404 <__lesf2+0x40>
10003432:	e7d4      	b.n	100033de <__lesf2+0x1a>
10003434:	2002      	movs	r0, #2
10003436:	2d00      	cmp	r5, #0
10003438:	d1e4      	bne.n	10003404 <__lesf2+0x40>
1000343a:	e7d2      	b.n	100033e2 <__lesf2+0x1e>
1000343c:	4293      	cmp	r3, r2
1000343e:	dceb      	bgt.n	10003418 <__lesf2+0x54>
10003440:	db04      	blt.n	1000344c <__lesf2+0x88>
10003442:	42ac      	cmp	r4, r5
10003444:	d8e8      	bhi.n	10003418 <__lesf2+0x54>
10003446:	2000      	movs	r0, #0
10003448:	42ac      	cmp	r4, r5
1000344a:	d2db      	bcs.n	10003404 <__lesf2+0x40>
1000344c:	2e00      	cmp	r6, #0
1000344e:	d0d7      	beq.n	10003400 <__lesf2+0x3c>
10003450:	2001      	movs	r0, #1
10003452:	e7d7      	b.n	10003404 <__lesf2+0x40>

10003454 <__aeabi_fmul>:
10003454:	b5f0      	push	{r4, r5, r6, r7, lr}
10003456:	465f      	mov	r7, fp
10003458:	4656      	mov	r6, sl
1000345a:	464d      	mov	r5, r9
1000345c:	4644      	mov	r4, r8
1000345e:	b4f0      	push	{r4, r5, r6, r7}
10003460:	0245      	lsls	r5, r0, #9
10003462:	0046      	lsls	r6, r0, #1
10003464:	b083      	sub	sp, #12
10003466:	1c0f      	adds	r7, r1, #0
10003468:	0a6d      	lsrs	r5, r5, #9
1000346a:	0e36      	lsrs	r6, r6, #24
1000346c:	0fc4      	lsrs	r4, r0, #31
1000346e:	2e00      	cmp	r6, #0
10003470:	d106      	bne.n	10003480 <__aeabi_fmul+0x2c>
10003472:	2d00      	cmp	r5, #0
10003474:	d170      	bne.n	10003558 <__aeabi_fmul+0x104>
10003476:	2104      	movs	r1, #4
10003478:	2201      	movs	r2, #1
1000347a:	4688      	mov	r8, r1
1000347c:	4692      	mov	sl, r2
1000347e:	e009      	b.n	10003494 <__aeabi_fmul+0x40>
10003480:	2eff      	cmp	r6, #255	; 0xff
10003482:	d043      	beq.n	1000350c <__aeabi_fmul+0xb8>
10003484:	2380      	movs	r3, #128	; 0x80
10003486:	0418      	lsls	r0, r3, #16
10003488:	2100      	movs	r1, #0
1000348a:	4305      	orrs	r5, r0
1000348c:	00ed      	lsls	r5, r5, #3
1000348e:	3e7f      	subs	r6, #127	; 0x7f
10003490:	4688      	mov	r8, r1
10003492:	468a      	mov	sl, r1
10003494:	1c38      	adds	r0, r7, #0
10003496:	0043      	lsls	r3, r0, #1
10003498:	027f      	lsls	r7, r7, #9
1000349a:	0fc1      	lsrs	r1, r0, #31
1000349c:	0a7f      	lsrs	r7, r7, #9
1000349e:	0e1b      	lsrs	r3, r3, #24
100034a0:	468b      	mov	fp, r1
100034a2:	d13a      	bne.n	1000351a <__aeabi_fmul+0xc6>
100034a4:	2101      	movs	r1, #1
100034a6:	2f00      	cmp	r7, #0
100034a8:	d162      	bne.n	10003570 <__aeabi_fmul+0x11c>
100034aa:	4658      	mov	r0, fp
100034ac:	4060      	eors	r0, r4
100034ae:	4642      	mov	r2, r8
100034b0:	9001      	str	r0, [sp, #4]
100034b2:	430a      	orrs	r2, r1
100034b4:	2a0f      	cmp	r2, #15
100034b6:	d93f      	bls.n	10003538 <__aeabi_fmul+0xe4>
100034b8:	042c      	lsls	r4, r5, #16
100034ba:	18f0      	adds	r0, r6, r3
100034bc:	0c26      	lsrs	r6, r4, #16
100034be:	043b      	lsls	r3, r7, #16
100034c0:	0c1a      	lsrs	r2, r3, #16
100034c2:	1c31      	adds	r1, r6, #0
100034c4:	4351      	muls	r1, r2
100034c6:	0c3f      	lsrs	r7, r7, #16
100034c8:	0c2d      	lsrs	r5, r5, #16
100034ca:	437e      	muls	r6, r7
100034cc:	436a      	muls	r2, r5
100034ce:	4681      	mov	r9, r0
100034d0:	0c08      	lsrs	r0, r1, #16
100034d2:	1836      	adds	r6, r6, r0
100034d4:	1c2c      	adds	r4, r5, #0
100034d6:	18b3      	adds	r3, r6, r2
100034d8:	437c      	muls	r4, r7
100034da:	429a      	cmp	r2, r3
100034dc:	d900      	bls.n	100034e0 <__aeabi_fmul+0x8c>
100034de:	e09a      	b.n	10003616 <__aeabi_fmul+0x1c2>
100034e0:	0409      	lsls	r1, r1, #16
100034e2:	041d      	lsls	r5, r3, #16
100034e4:	0c08      	lsrs	r0, r1, #16
100034e6:	182e      	adds	r6, r5, r0
100034e8:	01b5      	lsls	r5, r6, #6
100034ea:	0c1b      	lsrs	r3, r3, #16
100034ec:	1e69      	subs	r1, r5, #1
100034ee:	418d      	sbcs	r5, r1
100034f0:	0eb2      	lsrs	r2, r6, #26
100034f2:	18e7      	adds	r7, r4, r3
100034f4:	4315      	orrs	r5, r2
100034f6:	01bc      	lsls	r4, r7, #6
100034f8:	4325      	orrs	r5, r4
100034fa:	012b      	lsls	r3, r5, #4
100034fc:	d54b      	bpl.n	10003596 <__aeabi_fmul+0x142>
100034fe:	2001      	movs	r0, #1
10003500:	4028      	ands	r0, r5
10003502:	2101      	movs	r1, #1
10003504:	086d      	lsrs	r5, r5, #1
10003506:	4489      	add	r9, r1
10003508:	4305      	orrs	r5, r0
1000350a:	e044      	b.n	10003596 <__aeabi_fmul+0x142>
1000350c:	2d00      	cmp	r5, #0
1000350e:	d11e      	bne.n	1000354e <__aeabi_fmul+0xfa>
10003510:	2008      	movs	r0, #8
10003512:	2102      	movs	r1, #2
10003514:	4680      	mov	r8, r0
10003516:	468a      	mov	sl, r1
10003518:	e7bc      	b.n	10003494 <__aeabi_fmul+0x40>
1000351a:	2bff      	cmp	r3, #255	; 0xff
1000351c:	d012      	beq.n	10003544 <__aeabi_fmul+0xf0>
1000351e:	2280      	movs	r2, #128	; 0x80
10003520:	0410      	lsls	r0, r2, #16
10003522:	4307      	orrs	r7, r0
10003524:	4658      	mov	r0, fp
10003526:	2100      	movs	r1, #0
10003528:	4060      	eors	r0, r4
1000352a:	4642      	mov	r2, r8
1000352c:	00ff      	lsls	r7, r7, #3
1000352e:	3b7f      	subs	r3, #127	; 0x7f
10003530:	9001      	str	r0, [sp, #4]
10003532:	430a      	orrs	r2, r1
10003534:	2a0f      	cmp	r2, #15
10003536:	d8bf      	bhi.n	100034b8 <__aeabi_fmul+0x64>
10003538:	0090      	lsls	r0, r2, #2
1000353a:	4a5b      	ldr	r2, [pc, #364]	; (100036a8 <__aeabi_fmul+0x254>)
1000353c:	4684      	mov	ip, r0
1000353e:	4462      	add	r2, ip
10003540:	6810      	ldr	r0, [r2, #0]
10003542:	4687      	mov	pc, r0
10003544:	1c39      	adds	r1, r7, #0
10003546:	1e4a      	subs	r2, r1, #1
10003548:	4191      	sbcs	r1, r2
1000354a:	3102      	adds	r1, #2
1000354c:	e7ad      	b.n	100034aa <__aeabi_fmul+0x56>
1000354e:	220c      	movs	r2, #12
10003550:	2303      	movs	r3, #3
10003552:	4690      	mov	r8, r2
10003554:	469a      	mov	sl, r3
10003556:	e79d      	b.n	10003494 <__aeabi_fmul+0x40>
10003558:	1c28      	adds	r0, r5, #0
1000355a:	f000 faf9 	bl	10003b50 <__clzsi2>
1000355e:	2276      	movs	r2, #118	; 0x76
10003560:	1f46      	subs	r6, r0, #5
10003562:	4253      	negs	r3, r2
10003564:	40b5      	lsls	r5, r6
10003566:	1a1e      	subs	r6, r3, r0
10003568:	2000      	movs	r0, #0
1000356a:	4680      	mov	r8, r0
1000356c:	4682      	mov	sl, r0
1000356e:	e791      	b.n	10003494 <__aeabi_fmul+0x40>
10003570:	1c38      	adds	r0, r7, #0
10003572:	f000 faed 	bl	10003b50 <__clzsi2>
10003576:	2176      	movs	r1, #118	; 0x76
10003578:	1f43      	subs	r3, r0, #5
1000357a:	424a      	negs	r2, r1
1000357c:	409f      	lsls	r7, r3
1000357e:	2100      	movs	r1, #0
10003580:	1a13      	subs	r3, r2, r0
10003582:	e792      	b.n	100034aa <__aeabi_fmul+0x56>
10003584:	9401      	str	r4, [sp, #4]
10003586:	4651      	mov	r1, sl
10003588:	2902      	cmp	r1, #2
1000358a:	d02c      	beq.n	100035e6 <__aeabi_fmul+0x192>
1000358c:	2903      	cmp	r1, #3
1000358e:	d100      	bne.n	10003592 <__aeabi_fmul+0x13e>
10003590:	e080      	b.n	10003694 <__aeabi_fmul+0x240>
10003592:	2901      	cmp	r1, #1
10003594:	d048      	beq.n	10003628 <__aeabi_fmul+0x1d4>
10003596:	464e      	mov	r6, r9
10003598:	367f      	adds	r6, #127	; 0x7f
1000359a:	2e00      	cmp	r6, #0
1000359c:	dd51      	ble.n	10003642 <__aeabi_fmul+0x1ee>
1000359e:	240f      	movs	r4, #15
100035a0:	402c      	ands	r4, r5
100035a2:	2c04      	cmp	r4, #4
100035a4:	d000      	beq.n	100035a8 <__aeabi_fmul+0x154>
100035a6:	3504      	adds	r5, #4
100035a8:	012a      	lsls	r2, r5, #4
100035aa:	d503      	bpl.n	100035b4 <__aeabi_fmul+0x160>
100035ac:	493f      	ldr	r1, [pc, #252]	; (100036ac <__aeabi_fmul+0x258>)
100035ae:	464e      	mov	r6, r9
100035b0:	400d      	ands	r5, r1
100035b2:	3680      	adds	r6, #128	; 0x80
100035b4:	2efe      	cmp	r6, #254	; 0xfe
100035b6:	dd3d      	ble.n	10003634 <__aeabi_fmul+0x1e0>
100035b8:	9b01      	ldr	r3, [sp, #4]
100035ba:	2401      	movs	r4, #1
100035bc:	401c      	ands	r4, r3
100035be:	21ff      	movs	r1, #255	; 0xff
100035c0:	2500      	movs	r5, #0
100035c2:	05c8      	lsls	r0, r1, #23
100035c4:	07e2      	lsls	r2, r4, #31
100035c6:	4328      	orrs	r0, r5
100035c8:	4310      	orrs	r0, r2
100035ca:	b003      	add	sp, #12
100035cc:	bc3c      	pop	{r2, r3, r4, r5}
100035ce:	4690      	mov	r8, r2
100035d0:	4699      	mov	r9, r3
100035d2:	46a2      	mov	sl, r4
100035d4:	46ab      	mov	fp, r5
100035d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100035d8:	2400      	movs	r4, #0
100035da:	4d35      	ldr	r5, [pc, #212]	; (100036b0 <__aeabi_fmul+0x25c>)
100035dc:	21ff      	movs	r1, #255	; 0xff
100035de:	e7f0      	b.n	100035c2 <__aeabi_fmul+0x16e>
100035e0:	4651      	mov	r1, sl
100035e2:	2902      	cmp	r1, #2
100035e4:	d1d2      	bne.n	1000358c <__aeabi_fmul+0x138>
100035e6:	9d01      	ldr	r5, [sp, #4]
100035e8:	2401      	movs	r4, #1
100035ea:	402c      	ands	r4, r5
100035ec:	21ff      	movs	r1, #255	; 0xff
100035ee:	2500      	movs	r5, #0
100035f0:	e7e7      	b.n	100035c2 <__aeabi_fmul+0x16e>
100035f2:	465e      	mov	r6, fp
100035f4:	1c3d      	adds	r5, r7, #0
100035f6:	9601      	str	r6, [sp, #4]
100035f8:	e7c6      	b.n	10003588 <__aeabi_fmul+0x134>
100035fa:	1c3d      	adds	r5, r7, #0
100035fc:	e7c4      	b.n	10003588 <__aeabi_fmul+0x134>
100035fe:	2680      	movs	r6, #128	; 0x80
10003600:	03f3      	lsls	r3, r6, #15
10003602:	421d      	tst	r5, r3
10003604:	d00b      	beq.n	1000361e <__aeabi_fmul+0x1ca>
10003606:	421f      	tst	r7, r3
10003608:	d109      	bne.n	1000361e <__aeabi_fmul+0x1ca>
1000360a:	431f      	orrs	r7, r3
1000360c:	027a      	lsls	r2, r7, #9
1000360e:	0a55      	lsrs	r5, r2, #9
10003610:	465c      	mov	r4, fp
10003612:	21ff      	movs	r1, #255	; 0xff
10003614:	e7d5      	b.n	100035c2 <__aeabi_fmul+0x16e>
10003616:	2280      	movs	r2, #128	; 0x80
10003618:	0257      	lsls	r7, r2, #9
1000361a:	19e4      	adds	r4, r4, r7
1000361c:	e760      	b.n	100034e0 <__aeabi_fmul+0x8c>
1000361e:	431d      	orrs	r5, r3
10003620:	026f      	lsls	r7, r5, #9
10003622:	0a7d      	lsrs	r5, r7, #9
10003624:	21ff      	movs	r1, #255	; 0xff
10003626:	e7cc      	b.n	100035c2 <__aeabi_fmul+0x16e>
10003628:	9b01      	ldr	r3, [sp, #4]
1000362a:	2500      	movs	r5, #0
1000362c:	4019      	ands	r1, r3
1000362e:	b2cc      	uxtb	r4, r1
10003630:	2100      	movs	r1, #0
10003632:	e7c6      	b.n	100035c2 <__aeabi_fmul+0x16e>
10003634:	9801      	ldr	r0, [sp, #4]
10003636:	01ad      	lsls	r5, r5, #6
10003638:	2401      	movs	r4, #1
1000363a:	0a6d      	lsrs	r5, r5, #9
1000363c:	b2f1      	uxtb	r1, r6
1000363e:	4004      	ands	r4, r0
10003640:	e7bf      	b.n	100035c2 <__aeabi_fmul+0x16e>
10003642:	267e      	movs	r6, #126	; 0x7e
10003644:	4273      	negs	r3, r6
10003646:	464a      	mov	r2, r9
10003648:	1a9f      	subs	r7, r3, r2
1000364a:	2f1b      	cmp	r7, #27
1000364c:	dd05      	ble.n	1000365a <__aeabi_fmul+0x206>
1000364e:	9d01      	ldr	r5, [sp, #4]
10003650:	2401      	movs	r4, #1
10003652:	402c      	ands	r4, r5
10003654:	2100      	movs	r1, #0
10003656:	2500      	movs	r5, #0
10003658:	e7b3      	b.n	100035c2 <__aeabi_fmul+0x16e>
1000365a:	4649      	mov	r1, r9
1000365c:	319e      	adds	r1, #158	; 0x9e
1000365e:	1c2c      	adds	r4, r5, #0
10003660:	408d      	lsls	r5, r1
10003662:	1c2e      	adds	r6, r5, #0
10003664:	40fc      	lsrs	r4, r7
10003666:	1e75      	subs	r5, r6, #1
10003668:	41ae      	sbcs	r6, r5
1000366a:	4326      	orrs	r6, r4
1000366c:	200f      	movs	r0, #15
1000366e:	4030      	ands	r0, r6
10003670:	2804      	cmp	r0, #4
10003672:	d000      	beq.n	10003676 <__aeabi_fmul+0x222>
10003674:	3604      	adds	r6, #4
10003676:	0170      	lsls	r0, r6, #5
10003678:	d505      	bpl.n	10003686 <__aeabi_fmul+0x232>
1000367a:	9f01      	ldr	r7, [sp, #4]
1000367c:	2401      	movs	r4, #1
1000367e:	403c      	ands	r4, r7
10003680:	2101      	movs	r1, #1
10003682:	2500      	movs	r5, #0
10003684:	e79d      	b.n	100035c2 <__aeabi_fmul+0x16e>
10003686:	9a01      	ldr	r2, [sp, #4]
10003688:	01b3      	lsls	r3, r6, #6
1000368a:	2401      	movs	r4, #1
1000368c:	0a5d      	lsrs	r5, r3, #9
1000368e:	4014      	ands	r4, r2
10003690:	2100      	movs	r1, #0
10003692:	e796      	b.n	100035c2 <__aeabi_fmul+0x16e>
10003694:	2280      	movs	r2, #128	; 0x80
10003696:	03d0      	lsls	r0, r2, #15
10003698:	4305      	orrs	r5, r0
1000369a:	026c      	lsls	r4, r5, #9
1000369c:	9901      	ldr	r1, [sp, #4]
1000369e:	0a65      	lsrs	r5, r4, #9
100036a0:	2401      	movs	r4, #1
100036a2:	400c      	ands	r4, r1
100036a4:	21ff      	movs	r1, #255	; 0xff
100036a6:	e78c      	b.n	100035c2 <__aeabi_fmul+0x16e>
100036a8:	10003c08 	.word	0x10003c08
100036ac:	f7ffffff 	.word	0xf7ffffff
100036b0:	007fffff 	.word	0x007fffff

100036b4 <__aeabi_fsub>:
100036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100036b6:	0243      	lsls	r3, r0, #9
100036b8:	0045      	lsls	r5, r0, #1
100036ba:	024f      	lsls	r7, r1, #9
100036bc:	004c      	lsls	r4, r1, #1
100036be:	0fc2      	lsrs	r2, r0, #31
100036c0:	0998      	lsrs	r0, r3, #6
100036c2:	4684      	mov	ip, r0
100036c4:	0e2d      	lsrs	r5, r5, #24
100036c6:	0e20      	lsrs	r0, r4, #24
100036c8:	0fc9      	lsrs	r1, r1, #31
100036ca:	09bf      	lsrs	r7, r7, #6
100036cc:	28ff      	cmp	r0, #255	; 0xff
100036ce:	d054      	beq.n	1000377a <__aeabi_fsub+0xc6>
100036d0:	2601      	movs	r6, #1
100036d2:	4071      	eors	r1, r6
100036d4:	428a      	cmp	r2, r1
100036d6:	d03b      	beq.n	10003750 <__aeabi_fsub+0x9c>
100036d8:	1a2c      	subs	r4, r5, r0
100036da:	2c00      	cmp	r4, #0
100036dc:	dc00      	bgt.n	100036e0 <__aeabi_fsub+0x2c>
100036de:	e089      	b.n	100037f4 <__aeabi_fsub+0x140>
100036e0:	2800      	cmp	r0, #0
100036e2:	d125      	bne.n	10003730 <__aeabi_fsub+0x7c>
100036e4:	2f00      	cmp	r7, #0
100036e6:	d14b      	bne.n	10003780 <__aeabi_fsub+0xcc>
100036e8:	1c6e      	adds	r6, r5, #1
100036ea:	1c2c      	adds	r4, r5, #0
100036ec:	4663      	mov	r3, ip
100036ee:	1c15      	adds	r5, r2, #0
100036f0:	220f      	movs	r2, #15
100036f2:	401a      	ands	r2, r3
100036f4:	2a04      	cmp	r2, #4
100036f6:	d000      	beq.n	100036fa <__aeabi_fsub+0x46>
100036f8:	3304      	adds	r3, #4
100036fa:	2780      	movs	r7, #128	; 0x80
100036fc:	04f9      	lsls	r1, r7, #19
100036fe:	2201      	movs	r2, #1
10003700:	4019      	ands	r1, r3
10003702:	402a      	ands	r2, r5
10003704:	2900      	cmp	r1, #0
10003706:	d006      	beq.n	10003716 <__aeabi_fsub+0x62>
10003708:	2eff      	cmp	r6, #255	; 0xff
1000370a:	d100      	bne.n	1000370e <__aeabi_fsub+0x5a>
1000370c:	e081      	b.n	10003812 <__aeabi_fsub+0x15e>
1000370e:	4db1      	ldr	r5, [pc, #708]	; (100039d4 <__aeabi_fsub+0x320>)
10003710:	1c34      	adds	r4, r6, #0
10003712:	402b      	ands	r3, r5
10003714:	3601      	adds	r6, #1
10003716:	b2f6      	uxtb	r6, r6
10003718:	08dd      	lsrs	r5, r3, #3
1000371a:	2e01      	cmp	r6, #1
1000371c:	dd62      	ble.n	100037e4 <__aeabi_fsub+0x130>
1000371e:	026b      	lsls	r3, r5, #9
10003720:	0a5d      	lsrs	r5, r3, #9
10003722:	b2e4      	uxtb	r4, r4
10003724:	05e4      	lsls	r4, r4, #23
10003726:	4325      	orrs	r5, r4
10003728:	1c28      	adds	r0, r5, #0
1000372a:	07d2      	lsls	r2, r2, #31
1000372c:	4310      	orrs	r0, r2
1000372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003730:	2dff      	cmp	r5, #255	; 0xff
10003732:	d051      	beq.n	100037d8 <__aeabi_fsub+0x124>
10003734:	2180      	movs	r1, #128	; 0x80
10003736:	04cb      	lsls	r3, r1, #19
10003738:	431f      	orrs	r7, r3
1000373a:	2601      	movs	r6, #1
1000373c:	2c1b      	cmp	r4, #27
1000373e:	dd70      	ble.n	10003822 <__aeabi_fsub+0x16e>
10003740:	4667      	mov	r7, ip
10003742:	1c2c      	adds	r4, r5, #0
10003744:	1bbb      	subs	r3, r7, r6
10003746:	1c15      	adds	r5, r2, #0
10003748:	0158      	lsls	r0, r3, #5
1000374a:	d422      	bmi.n	10003792 <__aeabi_fsub+0xde>
1000374c:	1c66      	adds	r6, r4, #1
1000374e:	e7cf      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003750:	1a2e      	subs	r6, r5, r0
10003752:	2e00      	cmp	r6, #0
10003754:	dd76      	ble.n	10003844 <__aeabi_fsub+0x190>
10003756:	2800      	cmp	r0, #0
10003758:	d032      	beq.n	100037c0 <__aeabi_fsub+0x10c>
1000375a:	2dff      	cmp	r5, #255	; 0xff
1000375c:	d03c      	beq.n	100037d8 <__aeabi_fsub+0x124>
1000375e:	2480      	movs	r4, #128	; 0x80
10003760:	04e1      	lsls	r1, r4, #19
10003762:	430f      	orrs	r7, r1
10003764:	2301      	movs	r3, #1
10003766:	2e1b      	cmp	r6, #27
10003768:	dc00      	bgt.n	1000376c <__aeabi_fsub+0xb8>
1000376a:	e0d1      	b.n	10003910 <__aeabi_fsub+0x25c>
1000376c:	4463      	add	r3, ip
1000376e:	1c2c      	adds	r4, r5, #0
10003770:	0158      	lsls	r0, r3, #5
10003772:	d47a      	bmi.n	1000386a <__aeabi_fsub+0x1b6>
10003774:	1c66      	adds	r6, r4, #1
10003776:	1c15      	adds	r5, r2, #0
10003778:	e7ba      	b.n	100036f0 <__aeabi_fsub+0x3c>
1000377a:	2f00      	cmp	r7, #0
1000377c:	d1aa      	bne.n	100036d4 <__aeabi_fsub+0x20>
1000377e:	e7a7      	b.n	100036d0 <__aeabi_fsub+0x1c>
10003780:	3c01      	subs	r4, #1
10003782:	2c00      	cmp	r4, #0
10003784:	d16d      	bne.n	10003862 <__aeabi_fsub+0x1ae>
10003786:	4663      	mov	r3, ip
10003788:	1c2c      	adds	r4, r5, #0
1000378a:	1bdb      	subs	r3, r3, r7
1000378c:	1c15      	adds	r5, r2, #0
1000378e:	0158      	lsls	r0, r3, #5
10003790:	d5dc      	bpl.n	1000374c <__aeabi_fsub+0x98>
10003792:	019a      	lsls	r2, r3, #6
10003794:	0996      	lsrs	r6, r2, #6
10003796:	1c30      	adds	r0, r6, #0
10003798:	f000 f9da 	bl	10003b50 <__clzsi2>
1000379c:	3805      	subs	r0, #5
1000379e:	4086      	lsls	r6, r0
100037a0:	4284      	cmp	r4, r0
100037a2:	dc39      	bgt.n	10003818 <__aeabi_fsub+0x164>
100037a4:	1b00      	subs	r0, r0, r4
100037a6:	231f      	movs	r3, #31
100037a8:	1a1a      	subs	r2, r3, r0
100037aa:	1c33      	adds	r3, r6, #0
100037ac:	1c31      	adds	r1, r6, #0
100037ae:	1c44      	adds	r4, r0, #1
100037b0:	4093      	lsls	r3, r2
100037b2:	40e1      	lsrs	r1, r4
100037b4:	1e5e      	subs	r6, r3, #1
100037b6:	41b3      	sbcs	r3, r6
100037b8:	430b      	orrs	r3, r1
100037ba:	2601      	movs	r6, #1
100037bc:	2400      	movs	r4, #0
100037be:	e797      	b.n	100036f0 <__aeabi_fsub+0x3c>
100037c0:	2f00      	cmp	r7, #0
100037c2:	d100      	bne.n	100037c6 <__aeabi_fsub+0x112>
100037c4:	e790      	b.n	100036e8 <__aeabi_fsub+0x34>
100037c6:	3e01      	subs	r6, #1
100037c8:	2e00      	cmp	r6, #0
100037ca:	d103      	bne.n	100037d4 <__aeabi_fsub+0x120>
100037cc:	4664      	mov	r4, ip
100037ce:	193b      	adds	r3, r7, r4
100037d0:	1c2c      	adds	r4, r5, #0
100037d2:	e7cd      	b.n	10003770 <__aeabi_fsub+0xbc>
100037d4:	2dff      	cmp	r5, #255	; 0xff
100037d6:	d1c5      	bne.n	10003764 <__aeabi_fsub+0xb0>
100037d8:	1c15      	adds	r5, r2, #0
100037da:	2280      	movs	r2, #128	; 0x80
100037dc:	4663      	mov	r3, ip
100037de:	0056      	lsls	r6, r2, #1
100037e0:	24ff      	movs	r4, #255	; 0xff
100037e2:	e785      	b.n	100036f0 <__aeabi_fsub+0x3c>
100037e4:	2d00      	cmp	r5, #0
100037e6:	d09c      	beq.n	10003722 <__aeabi_fsub+0x6e>
100037e8:	2c00      	cmp	r4, #0
100037ea:	d028      	beq.n	1000383e <__aeabi_fsub+0x18a>
100037ec:	2080      	movs	r0, #128	; 0x80
100037ee:	03c7      	lsls	r7, r0, #15
100037f0:	433d      	orrs	r5, r7
100037f2:	e794      	b.n	1000371e <__aeabi_fsub+0x6a>
100037f4:	2c00      	cmp	r4, #0
100037f6:	d145      	bne.n	10003884 <__aeabi_fsub+0x1d0>
100037f8:	1c6b      	adds	r3, r5, #1
100037fa:	b2d8      	uxtb	r0, r3
100037fc:	2801      	cmp	r0, #1
100037fe:	dc00      	bgt.n	10003802 <__aeabi_fsub+0x14e>
10003800:	e090      	b.n	10003924 <__aeabi_fsub+0x270>
10003802:	4664      	mov	r4, ip
10003804:	1be6      	subs	r6, r4, r7
10003806:	0173      	lsls	r3, r6, #5
10003808:	d557      	bpl.n	100038ba <__aeabi_fsub+0x206>
1000380a:	1b3e      	subs	r6, r7, r4
1000380c:	1c2c      	adds	r4, r5, #0
1000380e:	1c0d      	adds	r5, r1, #0
10003810:	e7c1      	b.n	10003796 <__aeabi_fsub+0xe2>
10003812:	24ff      	movs	r4, #255	; 0xff
10003814:	2500      	movs	r5, #0
10003816:	e785      	b.n	10003724 <__aeabi_fsub+0x70>
10003818:	4b6e      	ldr	r3, [pc, #440]	; (100039d4 <__aeabi_fsub+0x320>)
1000381a:	1a24      	subs	r4, r4, r0
1000381c:	4033      	ands	r3, r6
1000381e:	1c66      	adds	r6, r4, #1
10003820:	e766      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003822:	1c38      	adds	r0, r7, #0
10003824:	2120      	movs	r1, #32
10003826:	40e0      	lsrs	r0, r4
10003828:	1b0c      	subs	r4, r1, r4
1000382a:	40a7      	lsls	r7, r4
1000382c:	1c3e      	adds	r6, r7, #0
1000382e:	1e77      	subs	r7, r6, #1
10003830:	41be      	sbcs	r6, r7
10003832:	4306      	orrs	r6, r0
10003834:	4667      	mov	r7, ip
10003836:	1c2c      	adds	r4, r5, #0
10003838:	1bbb      	subs	r3, r7, r6
1000383a:	1c15      	adds	r5, r2, #0
1000383c:	e784      	b.n	10003748 <__aeabi_fsub+0x94>
1000383e:	0269      	lsls	r1, r5, #9
10003840:	0a4d      	lsrs	r5, r1, #9
10003842:	e76f      	b.n	10003724 <__aeabi_fsub+0x70>
10003844:	2e00      	cmp	r6, #0
10003846:	d179      	bne.n	1000393c <__aeabi_fsub+0x288>
10003848:	1c6c      	adds	r4, r5, #1
1000384a:	b2e0      	uxtb	r0, r4
1000384c:	2801      	cmp	r0, #1
1000384e:	dd4b      	ble.n	100038e8 <__aeabi_fsub+0x234>
10003850:	2cff      	cmp	r4, #255	; 0xff
10003852:	d100      	bne.n	10003856 <__aeabi_fsub+0x1a2>
10003854:	e098      	b.n	10003988 <__aeabi_fsub+0x2d4>
10003856:	4661      	mov	r1, ip
10003858:	187f      	adds	r7, r7, r1
1000385a:	1cae      	adds	r6, r5, #2
1000385c:	087b      	lsrs	r3, r7, #1
1000385e:	1c15      	adds	r5, r2, #0
10003860:	e746      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003862:	2dff      	cmp	r5, #255	; 0xff
10003864:	d000      	beq.n	10003868 <__aeabi_fsub+0x1b4>
10003866:	e768      	b.n	1000373a <__aeabi_fsub+0x86>
10003868:	e7b6      	b.n	100037d8 <__aeabi_fsub+0x124>
1000386a:	1c67      	adds	r7, r4, #1
1000386c:	2fff      	cmp	r7, #255	; 0xff
1000386e:	d036      	beq.n	100038de <__aeabi_fsub+0x22a>
10003870:	4858      	ldr	r0, [pc, #352]	; (100039d4 <__aeabi_fsub+0x320>)
10003872:	2101      	movs	r1, #1
10003874:	4019      	ands	r1, r3
10003876:	4003      	ands	r3, r0
10003878:	085b      	lsrs	r3, r3, #1
1000387a:	1ca6      	adds	r6, r4, #2
1000387c:	430b      	orrs	r3, r1
1000387e:	1c3c      	adds	r4, r7, #0
10003880:	1c15      	adds	r5, r2, #0
10003882:	e735      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003884:	4266      	negs	r6, r4
10003886:	2d00      	cmp	r5, #0
10003888:	d01e      	beq.n	100038c8 <__aeabi_fsub+0x214>
1000388a:	28ff      	cmp	r0, #255	; 0xff
1000388c:	d06f      	beq.n	1000396e <__aeabi_fsub+0x2ba>
1000388e:	2580      	movs	r5, #128	; 0x80
10003890:	4662      	mov	r2, ip
10003892:	04eb      	lsls	r3, r5, #19
10003894:	431a      	orrs	r2, r3
10003896:	4694      	mov	ip, r2
10003898:	2501      	movs	r5, #1
1000389a:	2e1b      	cmp	r6, #27
1000389c:	dc09      	bgt.n	100038b2 <__aeabi_fsub+0x1fe>
1000389e:	4662      	mov	r2, ip
100038a0:	2320      	movs	r3, #32
100038a2:	40f2      	lsrs	r2, r6
100038a4:	4664      	mov	r4, ip
100038a6:	1b9e      	subs	r6, r3, r6
100038a8:	40b4      	lsls	r4, r6
100038aa:	1c25      	adds	r5, r4, #0
100038ac:	1e6c      	subs	r4, r5, #1
100038ae:	41a5      	sbcs	r5, r4
100038b0:	4315      	orrs	r5, r2
100038b2:	1b7b      	subs	r3, r7, r5
100038b4:	1c04      	adds	r4, r0, #0
100038b6:	1c0d      	adds	r5, r1, #0
100038b8:	e769      	b.n	1000378e <__aeabi_fsub+0xda>
100038ba:	2e00      	cmp	r6, #0
100038bc:	d10c      	bne.n	100038d8 <__aeabi_fsub+0x224>
100038be:	2200      	movs	r2, #0
100038c0:	2601      	movs	r6, #1
100038c2:	2304      	movs	r3, #4
100038c4:	2400      	movs	r4, #0
100038c6:	e726      	b.n	10003716 <__aeabi_fsub+0x62>
100038c8:	4664      	mov	r4, ip
100038ca:	2c00      	cmp	r4, #0
100038cc:	d155      	bne.n	1000397a <__aeabi_fsub+0x2c6>
100038ce:	1c46      	adds	r6, r0, #1
100038d0:	1c3b      	adds	r3, r7, #0
100038d2:	1c04      	adds	r4, r0, #0
100038d4:	1c0d      	adds	r5, r1, #0
100038d6:	e70b      	b.n	100036f0 <__aeabi_fsub+0x3c>
100038d8:	1c2c      	adds	r4, r5, #0
100038da:	1c15      	adds	r5, r2, #0
100038dc:	e75b      	b.n	10003796 <__aeabi_fsub+0xe2>
100038de:	2380      	movs	r3, #128	; 0x80
100038e0:	005e      	lsls	r6, r3, #1
100038e2:	24ff      	movs	r4, #255	; 0xff
100038e4:	2304      	movs	r3, #4
100038e6:	e716      	b.n	10003716 <__aeabi_fsub+0x62>
100038e8:	2d00      	cmp	r5, #0
100038ea:	d000      	beq.n	100038ee <__aeabi_fsub+0x23a>
100038ec:	e08d      	b.n	10003a0a <__aeabi_fsub+0x356>
100038ee:	4665      	mov	r5, ip
100038f0:	2d00      	cmp	r5, #0
100038f2:	d100      	bne.n	100038f6 <__aeabi_fsub+0x242>
100038f4:	e0ad      	b.n	10003a52 <__aeabi_fsub+0x39e>
100038f6:	2f00      	cmp	r7, #0
100038f8:	d100      	bne.n	100038fc <__aeabi_fsub+0x248>
100038fa:	e081      	b.n	10003a00 <__aeabi_fsub+0x34c>
100038fc:	197b      	adds	r3, r7, r5
100038fe:	015c      	lsls	r4, r3, #5
10003900:	d400      	bmi.n	10003904 <__aeabi_fsub+0x250>
10003902:	e07e      	b.n	10003a02 <__aeabi_fsub+0x34e>
10003904:	4f33      	ldr	r7, [pc, #204]	; (100039d4 <__aeabi_fsub+0x320>)
10003906:	1c15      	adds	r5, r2, #0
10003908:	403b      	ands	r3, r7
1000390a:	2602      	movs	r6, #2
1000390c:	2401      	movs	r4, #1
1000390e:	e6ef      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003910:	1c38      	adds	r0, r7, #0
10003912:	2320      	movs	r3, #32
10003914:	40f0      	lsrs	r0, r6
10003916:	1b9e      	subs	r6, r3, r6
10003918:	40b7      	lsls	r7, r6
1000391a:	1c3b      	adds	r3, r7, #0
1000391c:	1e5f      	subs	r7, r3, #1
1000391e:	41bb      	sbcs	r3, r7
10003920:	4303      	orrs	r3, r0
10003922:	e723      	b.n	1000376c <__aeabi_fsub+0xb8>
10003924:	2d00      	cmp	r5, #0
10003926:	d115      	bne.n	10003954 <__aeabi_fsub+0x2a0>
10003928:	4665      	mov	r5, ip
1000392a:	2d00      	cmp	r5, #0
1000392c:	d147      	bne.n	100039be <__aeabi_fsub+0x30a>
1000392e:	2f00      	cmp	r7, #0
10003930:	d0c5      	beq.n	100038be <__aeabi_fsub+0x20a>
10003932:	1c3b      	adds	r3, r7, #0
10003934:	1c0d      	adds	r5, r1, #0
10003936:	2601      	movs	r6, #1
10003938:	2400      	movs	r4, #0
1000393a:	e6d9      	b.n	100036f0 <__aeabi_fsub+0x3c>
1000393c:	4276      	negs	r6, r6
1000393e:	2d00      	cmp	r5, #0
10003940:	d126      	bne.n	10003990 <__aeabi_fsub+0x2dc>
10003942:	4665      	mov	r5, ip
10003944:	2d00      	cmp	r5, #0
10003946:	d000      	beq.n	1000394a <__aeabi_fsub+0x296>
10003948:	e07d      	b.n	10003a46 <__aeabi_fsub+0x392>
1000394a:	1c46      	adds	r6, r0, #1
1000394c:	1c3b      	adds	r3, r7, #0
1000394e:	1c04      	adds	r4, r0, #0
10003950:	1c15      	adds	r5, r2, #0
10003952:	e6cd      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003954:	4665      	mov	r5, ip
10003956:	2d00      	cmp	r5, #0
10003958:	d140      	bne.n	100039dc <__aeabi_fsub+0x328>
1000395a:	2f00      	cmp	r7, #0
1000395c:	d107      	bne.n	1000396e <__aeabi_fsub+0x2ba>
1000395e:	2180      	movs	r1, #128	; 0x80
10003960:	2200      	movs	r2, #0
10003962:	004e      	lsls	r6, r1, #1
10003964:	4b1c      	ldr	r3, [pc, #112]	; (100039d8 <__aeabi_fsub+0x324>)
10003966:	24ff      	movs	r4, #255	; 0xff
10003968:	e6d5      	b.n	10003716 <__aeabi_fsub+0x62>
1000396a:	28ff      	cmp	r0, #255	; 0xff
1000396c:	d194      	bne.n	10003898 <__aeabi_fsub+0x1e4>
1000396e:	2080      	movs	r0, #128	; 0x80
10003970:	1c3b      	adds	r3, r7, #0
10003972:	1c0d      	adds	r5, r1, #0
10003974:	0046      	lsls	r6, r0, #1
10003976:	24ff      	movs	r4, #255	; 0xff
10003978:	e6ba      	b.n	100036f0 <__aeabi_fsub+0x3c>
1000397a:	3e01      	subs	r6, #1
1000397c:	2e00      	cmp	r6, #0
1000397e:	d1f4      	bne.n	1000396a <__aeabi_fsub+0x2b6>
10003980:	1b3b      	subs	r3, r7, r4
10003982:	1c0d      	adds	r5, r1, #0
10003984:	1c04      	adds	r4, r0, #0
10003986:	e702      	b.n	1000378e <__aeabi_fsub+0xda>
10003988:	2580      	movs	r5, #128	; 0x80
1000398a:	006e      	lsls	r6, r5, #1
1000398c:	2304      	movs	r3, #4
1000398e:	e6c2      	b.n	10003716 <__aeabi_fsub+0x62>
10003990:	28ff      	cmp	r0, #255	; 0xff
10003992:	d052      	beq.n	10003a3a <__aeabi_fsub+0x386>
10003994:	2480      	movs	r4, #128	; 0x80
10003996:	4661      	mov	r1, ip
10003998:	04e3      	lsls	r3, r4, #19
1000399a:	4319      	orrs	r1, r3
1000399c:	468c      	mov	ip, r1
1000399e:	2301      	movs	r3, #1
100039a0:	2e1b      	cmp	r6, #27
100039a2:	dc09      	bgt.n	100039b8 <__aeabi_fsub+0x304>
100039a4:	2120      	movs	r1, #32
100039a6:	4664      	mov	r4, ip
100039a8:	40f4      	lsrs	r4, r6
100039aa:	4665      	mov	r5, ip
100039ac:	1b8e      	subs	r6, r1, r6
100039ae:	40b5      	lsls	r5, r6
100039b0:	1c2b      	adds	r3, r5, #0
100039b2:	1e59      	subs	r1, r3, #1
100039b4:	418b      	sbcs	r3, r1
100039b6:	4323      	orrs	r3, r4
100039b8:	19db      	adds	r3, r3, r7
100039ba:	1c04      	adds	r4, r0, #0
100039bc:	e6d8      	b.n	10003770 <__aeabi_fsub+0xbc>
100039be:	2f00      	cmp	r7, #0
100039c0:	d01e      	beq.n	10003a00 <__aeabi_fsub+0x34c>
100039c2:	1beb      	subs	r3, r5, r7
100039c4:	0158      	lsls	r0, r3, #5
100039c6:	d54b      	bpl.n	10003a60 <__aeabi_fsub+0x3ac>
100039c8:	1b7b      	subs	r3, r7, r5
100039ca:	2601      	movs	r6, #1
100039cc:	1c0d      	adds	r5, r1, #0
100039ce:	2400      	movs	r4, #0
100039d0:	e68e      	b.n	100036f0 <__aeabi_fsub+0x3c>
100039d2:	46c0      	nop			; (mov r8, r8)
100039d4:	fbffffff 	.word	0xfbffffff
100039d8:	03fffffc 	.word	0x03fffffc
100039dc:	2f00      	cmp	r7, #0
100039de:	d100      	bne.n	100039e2 <__aeabi_fsub+0x32e>
100039e0:	e6fa      	b.n	100037d8 <__aeabi_fsub+0x124>
100039e2:	2080      	movs	r0, #128	; 0x80
100039e4:	08eb      	lsrs	r3, r5, #3
100039e6:	03c4      	lsls	r4, r0, #15
100039e8:	4223      	tst	r3, r4
100039ea:	d037      	beq.n	10003a5c <__aeabi_fsub+0x3a8>
100039ec:	08ff      	lsrs	r7, r7, #3
100039ee:	4227      	tst	r7, r4
100039f0:	d134      	bne.n	10003a5c <__aeabi_fsub+0x3a8>
100039f2:	1c3b      	adds	r3, r7, #0
100039f4:	1c0d      	adds	r5, r1, #0
100039f6:	2280      	movs	r2, #128	; 0x80
100039f8:	00db      	lsls	r3, r3, #3
100039fa:	0056      	lsls	r6, r2, #1
100039fc:	24ff      	movs	r4, #255	; 0xff
100039fe:	e677      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003a00:	4663      	mov	r3, ip
10003a02:	1c15      	adds	r5, r2, #0
10003a04:	2601      	movs	r6, #1
10003a06:	2400      	movs	r4, #0
10003a08:	e672      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003a0a:	4664      	mov	r4, ip
10003a0c:	2c00      	cmp	r4, #0
10003a0e:	d014      	beq.n	10003a3a <__aeabi_fsub+0x386>
10003a10:	2f00      	cmp	r7, #0
10003a12:	d100      	bne.n	10003a16 <__aeabi_fsub+0x362>
10003a14:	e6e0      	b.n	100037d8 <__aeabi_fsub+0x124>
10003a16:	2380      	movs	r3, #128	; 0x80
10003a18:	08e6      	lsrs	r6, r4, #3
10003a1a:	03d8      	lsls	r0, r3, #15
10003a1c:	1c31      	adds	r1, r6, #0
10003a1e:	4206      	tst	r6, r0
10003a20:	d003      	beq.n	10003a2a <__aeabi_fsub+0x376>
10003a22:	08f9      	lsrs	r1, r7, #3
10003a24:	4201      	tst	r1, r0
10003a26:	d000      	beq.n	10003a2a <__aeabi_fsub+0x376>
10003a28:	1c31      	adds	r1, r6, #0
10003a2a:	1c15      	adds	r5, r2, #0
10003a2c:	2280      	movs	r2, #128	; 0x80
10003a2e:	00cb      	lsls	r3, r1, #3
10003a30:	0056      	lsls	r6, r2, #1
10003a32:	24ff      	movs	r4, #255	; 0xff
10003a34:	e65c      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003a36:	28ff      	cmp	r0, #255	; 0xff
10003a38:	d1b1      	bne.n	1000399e <__aeabi_fsub+0x2ea>
10003a3a:	2080      	movs	r0, #128	; 0x80
10003a3c:	1c3b      	adds	r3, r7, #0
10003a3e:	1c15      	adds	r5, r2, #0
10003a40:	0046      	lsls	r6, r0, #1
10003a42:	24ff      	movs	r4, #255	; 0xff
10003a44:	e654      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003a46:	3e01      	subs	r6, #1
10003a48:	2e00      	cmp	r6, #0
10003a4a:	d1f4      	bne.n	10003a36 <__aeabi_fsub+0x382>
10003a4c:	197b      	adds	r3, r7, r5
10003a4e:	1c04      	adds	r4, r0, #0
10003a50:	e68e      	b.n	10003770 <__aeabi_fsub+0xbc>
10003a52:	1c3b      	adds	r3, r7, #0
10003a54:	1c15      	adds	r5, r2, #0
10003a56:	2601      	movs	r6, #1
10003a58:	2400      	movs	r4, #0
10003a5a:	e649      	b.n	100036f0 <__aeabi_fsub+0x3c>
10003a5c:	1c15      	adds	r5, r2, #0
10003a5e:	e7ca      	b.n	100039f6 <__aeabi_fsub+0x342>
10003a60:	2b00      	cmp	r3, #0
10003a62:	d100      	bne.n	10003a66 <__aeabi_fsub+0x3b2>
10003a64:	e72b      	b.n	100038be <__aeabi_fsub+0x20a>
10003a66:	e7cc      	b.n	10003a02 <__aeabi_fsub+0x34e>

10003a68 <__aeabi_f2iz>:
10003a68:	0243      	lsls	r3, r0, #9
10003a6a:	0042      	lsls	r2, r0, #1
10003a6c:	0a59      	lsrs	r1, r3, #9
10003a6e:	0e13      	lsrs	r3, r2, #24
10003a70:	0fc2      	lsrs	r2, r0, #31
10003a72:	2000      	movs	r0, #0
10003a74:	2b7e      	cmp	r3, #126	; 0x7e
10003a76:	dd0d      	ble.n	10003a94 <__aeabi_f2iz+0x2c>
10003a78:	2b9d      	cmp	r3, #157	; 0x9d
10003a7a:	dc0c      	bgt.n	10003a96 <__aeabi_f2iz+0x2e>
10003a7c:	2080      	movs	r0, #128	; 0x80
10003a7e:	0400      	lsls	r0, r0, #16
10003a80:	4301      	orrs	r1, r0
10003a82:	2b95      	cmp	r3, #149	; 0x95
10003a84:	dc0a      	bgt.n	10003a9c <__aeabi_f2iz+0x34>
10003a86:	2096      	movs	r0, #150	; 0x96
10003a88:	1ac3      	subs	r3, r0, r3
10003a8a:	40d9      	lsrs	r1, r3
10003a8c:	4248      	negs	r0, r1
10003a8e:	2a00      	cmp	r2, #0
10003a90:	d100      	bne.n	10003a94 <__aeabi_f2iz+0x2c>
10003a92:	1c08      	adds	r0, r1, #0
10003a94:	4770      	bx	lr
10003a96:	4903      	ldr	r1, [pc, #12]	; (10003aa4 <__aeabi_f2iz+0x3c>)
10003a98:	1850      	adds	r0, r2, r1
10003a9a:	e7fb      	b.n	10003a94 <__aeabi_f2iz+0x2c>
10003a9c:	3b96      	subs	r3, #150	; 0x96
10003a9e:	4099      	lsls	r1, r3
10003aa0:	e7f4      	b.n	10003a8c <__aeabi_f2iz+0x24>
10003aa2:	46c0      	nop			; (mov r8, r8)
10003aa4:	7fffffff 	.word	0x7fffffff

10003aa8 <__aeabi_ui2f>:
10003aa8:	b510      	push	{r4, lr}
10003aaa:	1e04      	subs	r4, r0, #0
10003aac:	d034      	beq.n	10003b18 <__aeabi_ui2f+0x70>
10003aae:	f000 f84f 	bl	10003b50 <__clzsi2>
10003ab2:	239e      	movs	r3, #158	; 0x9e
10003ab4:	1a1b      	subs	r3, r3, r0
10003ab6:	2b96      	cmp	r3, #150	; 0x96
10003ab8:	dc07      	bgt.n	10003aca <__aeabi_ui2f+0x22>
10003aba:	3808      	subs	r0, #8
10003abc:	4084      	lsls	r4, r0
10003abe:	0264      	lsls	r4, r4, #9
10003ac0:	0a61      	lsrs	r1, r4, #9
10003ac2:	b2db      	uxtb	r3, r3
10003ac4:	05d8      	lsls	r0, r3, #23
10003ac6:	4308      	orrs	r0, r1
10003ac8:	bd10      	pop	{r4, pc}
10003aca:	2b99      	cmp	r3, #153	; 0x99
10003acc:	dd0a      	ble.n	10003ae4 <__aeabi_ui2f+0x3c>
10003ace:	1c02      	adds	r2, r0, #0
10003ad0:	321b      	adds	r2, #27
10003ad2:	1c21      	adds	r1, r4, #0
10003ad4:	4091      	lsls	r1, r2
10003ad6:	1c0a      	adds	r2, r1, #0
10003ad8:	1e51      	subs	r1, r2, #1
10003ada:	418a      	sbcs	r2, r1
10003adc:	2105      	movs	r1, #5
10003ade:	1a09      	subs	r1, r1, r0
10003ae0:	40cc      	lsrs	r4, r1
10003ae2:	4314      	orrs	r4, r2
10003ae4:	2805      	cmp	r0, #5
10003ae6:	dc1a      	bgt.n	10003b1e <__aeabi_ui2f+0x76>
10003ae8:	4a18      	ldr	r2, [pc, #96]	; (10003b4c <__aeabi_ui2f+0xa4>)
10003aea:	210f      	movs	r1, #15
10003aec:	4022      	ands	r2, r4
10003aee:	400c      	ands	r4, r1
10003af0:	2c04      	cmp	r4, #4
10003af2:	d000      	beq.n	10003af6 <__aeabi_ui2f+0x4e>
10003af4:	3204      	adds	r2, #4
10003af6:	0151      	lsls	r1, r2, #5
10003af8:	d505      	bpl.n	10003b06 <__aeabi_ui2f+0x5e>
10003afa:	249f      	movs	r4, #159	; 0x9f
10003afc:	1a23      	subs	r3, r4, r0
10003afe:	2bff      	cmp	r3, #255	; 0xff
10003b00:	d021      	beq.n	10003b46 <__aeabi_ui2f+0x9e>
10003b02:	4812      	ldr	r0, [pc, #72]	; (10003b4c <__aeabi_ui2f+0xa4>)
10003b04:	4002      	ands	r2, r0
10003b06:	1c59      	adds	r1, r3, #1
10003b08:	b2cc      	uxtb	r4, r1
10003b0a:	08d2      	lsrs	r2, r2, #3
10003b0c:	2c01      	cmp	r4, #1
10003b0e:	dd09      	ble.n	10003b24 <__aeabi_ui2f+0x7c>
10003b10:	0250      	lsls	r0, r2, #9
10003b12:	0a41      	lsrs	r1, r0, #9
10003b14:	b2db      	uxtb	r3, r3
10003b16:	e7d5      	b.n	10003ac4 <__aeabi_ui2f+0x1c>
10003b18:	2300      	movs	r3, #0
10003b1a:	2100      	movs	r1, #0
10003b1c:	e7d2      	b.n	10003ac4 <__aeabi_ui2f+0x1c>
10003b1e:	1f42      	subs	r2, r0, #5
10003b20:	4094      	lsls	r4, r2
10003b22:	e7e1      	b.n	10003ae8 <__aeabi_ui2f+0x40>
10003b24:	2a00      	cmp	r2, #0
10003b26:	d00b      	beq.n	10003b40 <__aeabi_ui2f+0x98>
10003b28:	2b00      	cmp	r3, #0
10003b2a:	d006      	beq.n	10003b3a <__aeabi_ui2f+0x92>
10003b2c:	2180      	movs	r1, #128	; 0x80
10003b2e:	03cc      	lsls	r4, r1, #15
10003b30:	4322      	orrs	r2, r4
10003b32:	0252      	lsls	r2, r2, #9
10003b34:	0a51      	lsrs	r1, r2, #9
10003b36:	b2db      	uxtb	r3, r3
10003b38:	e7c4      	b.n	10003ac4 <__aeabi_ui2f+0x1c>
10003b3a:	0250      	lsls	r0, r2, #9
10003b3c:	0a41      	lsrs	r1, r0, #9
10003b3e:	e7c1      	b.n	10003ac4 <__aeabi_ui2f+0x1c>
10003b40:	b2db      	uxtb	r3, r3
10003b42:	2100      	movs	r1, #0
10003b44:	e7be      	b.n	10003ac4 <__aeabi_ui2f+0x1c>
10003b46:	23ff      	movs	r3, #255	; 0xff
10003b48:	2100      	movs	r1, #0
10003b4a:	e7bb      	b.n	10003ac4 <__aeabi_ui2f+0x1c>
10003b4c:	fbffffff 	.word	0xfbffffff

10003b50 <__clzsi2>:
10003b50:	211c      	movs	r1, #28
10003b52:	2301      	movs	r3, #1
10003b54:	041b      	lsls	r3, r3, #16
10003b56:	4298      	cmp	r0, r3
10003b58:	d301      	bcc.n	10003b5e <__clzsi2+0xe>
10003b5a:	0c00      	lsrs	r0, r0, #16
10003b5c:	3910      	subs	r1, #16
10003b5e:	0a1b      	lsrs	r3, r3, #8
10003b60:	4298      	cmp	r0, r3
10003b62:	d301      	bcc.n	10003b68 <__clzsi2+0x18>
10003b64:	0a00      	lsrs	r0, r0, #8
10003b66:	3908      	subs	r1, #8
10003b68:	091b      	lsrs	r3, r3, #4
10003b6a:	4298      	cmp	r0, r3
10003b6c:	d301      	bcc.n	10003b72 <__clzsi2+0x22>
10003b6e:	0900      	lsrs	r0, r0, #4
10003b70:	3904      	subs	r1, #4
10003b72:	a202      	add	r2, pc, #8	; (adr r2, 10003b7c <__clzsi2+0x2c>)
10003b74:	5c10      	ldrb	r0, [r2, r0]
10003b76:	1840      	adds	r0, r0, r1
10003b78:	4770      	bx	lr
10003b7a:	46c0      	nop			; (mov r8, r8)
10003b7c:	02020304 	.word	0x02020304
10003b80:	01010101 	.word	0x01010101
	...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	100010c3 	.word	0x100010c3
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100010c5 	.word	0x100010c5
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100010c7 	.word	0x100010c7
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100010c9 	.word	0x100010c9
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	100010cb 	.word	0x100010cb
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100010cd 	.word	0x100010cd
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100010cf 	.word	0x100010cf
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	100010d1 	.word	0x100010d1
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	100010d3 	.word	0x100010d3
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	100010d5 	.word	0x100010d5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	100010d7 	.word	0x100010d7
    MOV PC,R0
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	100010d9 	.word	0x100010d9
    MOV PC,R0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	100010f7 	.word	0x100010f7
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	100010f9 	.word	0x100010f9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	100010fb 	.word	0x100010fb
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	100010fd 	.word	0x100010fd
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	100010ff 	.word	0x100010ff
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001101 	.word	0x10001101
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	100010db 	.word	0x100010db
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	100010dd 	.word	0x100010dd
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	100010df 	.word	0x100010df
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	100010e1 	.word	0x100010e1
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	100010e3 	.word	0x100010e3
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	100010e5 	.word	0x100010e5
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	100010e7 	.word	0x100010e7
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	100010e9 	.word	0x100010e9
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	100010eb 	.word	0x100010eb
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	100010ed 	.word	0x100010ed
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	100010ef 	.word	0x100010ef
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	100010f1 	.word	0x100010f1
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	100010f3 	.word	0x100010f3
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	100010f5 	.word	0x100010f5
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001103 	.word	0x10001103
